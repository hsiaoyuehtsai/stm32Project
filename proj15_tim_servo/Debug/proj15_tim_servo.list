
proj15_tim_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ecc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002fd8  08002fd8  00003fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ffc  08002ffc  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ffc  08002ffc  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ffc  08002ffc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ffc  08002ffc  00003ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003000  08003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003004  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003010  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003010  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007605  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014b5  00000000  00000000  0000c63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0000daf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000725  00000000  00000000  0000e430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016601  00000000  00000000  0000eb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a33  00000000  00000000  00025156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000841b8  00000000  00000000  0002eb89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2d41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027cc  00000000  00000000  000b2d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000b5550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fc0 	.word	0x08002fc0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002fc0 	.word	0x08002fc0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_frsub>:
 8000938:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800093c:	e002      	b.n	8000944 <__addsf3>
 800093e:	bf00      	nop

08000940 <__aeabi_fsub>:
 8000940:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000944 <__addsf3>:
 8000944:	0042      	lsls	r2, r0, #1
 8000946:	bf1f      	itttt	ne
 8000948:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800094c:	ea92 0f03 	teqne	r2, r3
 8000950:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000954:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000958:	d06a      	beq.n	8000a30 <__addsf3+0xec>
 800095a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800095e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000962:	bfc1      	itttt	gt
 8000964:	18d2      	addgt	r2, r2, r3
 8000966:	4041      	eorgt	r1, r0
 8000968:	4048      	eorgt	r0, r1
 800096a:	4041      	eorgt	r1, r0
 800096c:	bfb8      	it	lt
 800096e:	425b      	neglt	r3, r3
 8000970:	2b19      	cmp	r3, #25
 8000972:	bf88      	it	hi
 8000974:	4770      	bxhi	lr
 8000976:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800097a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800097e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000982:	bf18      	it	ne
 8000984:	4240      	negne	r0, r0
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800098e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000992:	bf18      	it	ne
 8000994:	4249      	negne	r1, r1
 8000996:	ea92 0f03 	teq	r2, r3
 800099a:	d03f      	beq.n	8000a1c <__addsf3+0xd8>
 800099c:	f1a2 0201 	sub.w	r2, r2, #1
 80009a0:	fa41 fc03 	asr.w	ip, r1, r3
 80009a4:	eb10 000c 	adds.w	r0, r0, ip
 80009a8:	f1c3 0320 	rsb	r3, r3, #32
 80009ac:	fa01 f103 	lsl.w	r1, r1, r3
 80009b0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009b4:	d502      	bpl.n	80009bc <__addsf3+0x78>
 80009b6:	4249      	negs	r1, r1
 80009b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009bc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009c0:	d313      	bcc.n	80009ea <__addsf3+0xa6>
 80009c2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009c6:	d306      	bcc.n	80009d6 <__addsf3+0x92>
 80009c8:	0840      	lsrs	r0, r0, #1
 80009ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80009ce:	f102 0201 	add.w	r2, r2, #1
 80009d2:	2afe      	cmp	r2, #254	@ 0xfe
 80009d4:	d251      	bcs.n	8000a7a <__addsf3+0x136>
 80009d6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009de:	bf08      	it	eq
 80009e0:	f020 0001 	biceq.w	r0, r0, #1
 80009e4:	ea40 0003 	orr.w	r0, r0, r3
 80009e8:	4770      	bx	lr
 80009ea:	0049      	lsls	r1, r1, #1
 80009ec:	eb40 0000 	adc.w	r0, r0, r0
 80009f0:	3a01      	subs	r2, #1
 80009f2:	bf28      	it	cs
 80009f4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009f8:	d2ed      	bcs.n	80009d6 <__addsf3+0x92>
 80009fa:	fab0 fc80 	clz	ip, r0
 80009fe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a02:	ebb2 020c 	subs.w	r2, r2, ip
 8000a06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0a:	bfaa      	itet	ge
 8000a0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a10:	4252      	neglt	r2, r2
 8000a12:	4318      	orrge	r0, r3
 8000a14:	bfbc      	itt	lt
 8000a16:	40d0      	lsrlt	r0, r2
 8000a18:	4318      	orrlt	r0, r3
 8000a1a:	4770      	bx	lr
 8000a1c:	f092 0f00 	teq	r2, #0
 8000a20:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a24:	bf06      	itte	eq
 8000a26:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a2a:	3201      	addeq	r2, #1
 8000a2c:	3b01      	subne	r3, #1
 8000a2e:	e7b5      	b.n	800099c <__addsf3+0x58>
 8000a30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3e:	d021      	beq.n	8000a84 <__addsf3+0x140>
 8000a40:	ea92 0f03 	teq	r2, r3
 8000a44:	d004      	beq.n	8000a50 <__addsf3+0x10c>
 8000a46:	f092 0f00 	teq	r2, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	4770      	bx	lr
 8000a50:	ea90 0f01 	teq	r0, r1
 8000a54:	bf1c      	itt	ne
 8000a56:	2000      	movne	r0, #0
 8000a58:	4770      	bxne	lr
 8000a5a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a5e:	d104      	bne.n	8000a6a <__addsf3+0x126>
 8000a60:	0040      	lsls	r0, r0, #1
 8000a62:	bf28      	it	cs
 8000a64:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a68:	4770      	bx	lr
 8000a6a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a6e:	bf3c      	itt	cc
 8000a70:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a74:	4770      	bxcc	lr
 8000a76:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a7a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a82:	4770      	bx	lr
 8000a84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a88:	bf16      	itet	ne
 8000a8a:	4608      	movne	r0, r1
 8000a8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a90:	4601      	movne	r1, r0
 8000a92:	0242      	lsls	r2, r0, #9
 8000a94:	bf06      	itte	eq
 8000a96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9a:	ea90 0f01 	teqeq	r0, r1
 8000a9e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000aa2:	4770      	bx	lr

08000aa4 <__aeabi_ui2f>:
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	e004      	b.n	8000ab4 <__aeabi_i2f+0x8>
 8000aaa:	bf00      	nop

08000aac <__aeabi_i2f>:
 8000aac:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ab0:	bf48      	it	mi
 8000ab2:	4240      	negmi	r0, r0
 8000ab4:	ea5f 0c00 	movs.w	ip, r0
 8000ab8:	bf08      	it	eq
 8000aba:	4770      	bxeq	lr
 8000abc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ac0:	4601      	mov	r1, r0
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	e01c      	b.n	8000b02 <__aeabi_l2f+0x2a>

08000ac8 <__aeabi_ul2f>:
 8000ac8:	ea50 0201 	orrs.w	r2, r0, r1
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	e00a      	b.n	8000aec <__aeabi_l2f+0x14>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_l2f>:
 8000ad8:	ea50 0201 	orrs.w	r2, r0, r1
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ae4:	d502      	bpl.n	8000aec <__aeabi_l2f+0x14>
 8000ae6:	4240      	negs	r0, r0
 8000ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aec:	ea5f 0c01 	movs.w	ip, r1
 8000af0:	bf02      	ittt	eq
 8000af2:	4684      	moveq	ip, r0
 8000af4:	4601      	moveq	r1, r0
 8000af6:	2000      	moveq	r0, #0
 8000af8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000afc:	bf08      	it	eq
 8000afe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b02:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b06:	fabc f28c 	clz	r2, ip
 8000b0a:	3a08      	subs	r2, #8
 8000b0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b10:	db10      	blt.n	8000b34 <__aeabi_l2f+0x5c>
 8000b12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b16:	4463      	add	r3, ip
 8000b18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b1c:	f1c2 0220 	rsb	r2, r2, #32
 8000b20:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b24:	fa20 f202 	lsr.w	r2, r0, r2
 8000b28:	eb43 0002 	adc.w	r0, r3, r2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f102 0220 	add.w	r2, r2, #32
 8000b38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b3c:	f1c2 0220 	rsb	r2, r2, #32
 8000b40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b44:	fa21 f202 	lsr.w	r2, r1, r2
 8000b48:	eb43 0002 	adc.w	r0, r3, r2
 8000b4c:	bf08      	it	eq
 8000b4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_fmul>:
 8000b54:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b62:	ea92 0f0c 	teqne	r2, ip
 8000b66:	ea93 0f0c 	teqne	r3, ip
 8000b6a:	d06f      	beq.n	8000c4c <__aeabi_fmul+0xf8>
 8000b6c:	441a      	add	r2, r3
 8000b6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000b72:	0240      	lsls	r0, r0, #9
 8000b74:	bf18      	it	ne
 8000b76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b7a:	d01e      	beq.n	8000bba <__aeabi_fmul+0x66>
 8000b7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b88:	fba0 3101 	umull	r3, r1, r0, r1
 8000b8c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b90:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b94:	bf3e      	ittt	cc
 8000b96:	0049      	lslcc	r1, r1, #1
 8000b98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b9c:	005b      	lslcc	r3, r3, #1
 8000b9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ba2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ba6:	2afd      	cmp	r2, #253	@ 0xfd
 8000ba8:	d81d      	bhi.n	8000be6 <__aeabi_fmul+0x92>
 8000baa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb2:	bf08      	it	eq
 8000bb4:	f020 0001 	biceq.w	r0, r0, #1
 8000bb8:	4770      	bx	lr
 8000bba:	f090 0f00 	teq	r0, #0
 8000bbe:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bc2:	bf08      	it	eq
 8000bc4:	0249      	lsleq	r1, r1, #9
 8000bc6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bce:	3a7f      	subs	r2, #127	@ 0x7f
 8000bd0:	bfc2      	ittt	gt
 8000bd2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bd6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bda:	4770      	bxgt	lr
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	dc5d      	bgt.n	8000ca4 <__aeabi_fmul+0x150>
 8000be8:	f112 0f19 	cmn.w	r2, #25
 8000bec:	bfdc      	itt	le
 8000bee:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bf2:	4770      	bxle	lr
 8000bf4:	f1c2 0200 	rsb	r2, r2, #0
 8000bf8:	0041      	lsls	r1, r0, #1
 8000bfa:	fa21 f102 	lsr.w	r1, r1, r2
 8000bfe:	f1c2 0220 	rsb	r2, r2, #32
 8000c02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c0a:	f140 0000 	adc.w	r0, r0, #0
 8000c0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c12:	bf08      	it	eq
 8000c14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c18:	4770      	bx	lr
 8000c1a:	f092 0f00 	teq	r2, #0
 8000c1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c22:	bf02      	ittt	eq
 8000c24:	0040      	lsleq	r0, r0, #1
 8000c26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c2a:	3a01      	subeq	r2, #1
 8000c2c:	d0f9      	beq.n	8000c22 <__aeabi_fmul+0xce>
 8000c2e:	ea40 000c 	orr.w	r0, r0, ip
 8000c32:	f093 0f00 	teq	r3, #0
 8000c36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c3a:	bf02      	ittt	eq
 8000c3c:	0049      	lsleq	r1, r1, #1
 8000c3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c42:	3b01      	subeq	r3, #1
 8000c44:	d0f9      	beq.n	8000c3a <__aeabi_fmul+0xe6>
 8000c46:	ea41 010c 	orr.w	r1, r1, ip
 8000c4a:	e78f      	b.n	8000b6c <__aeabi_fmul+0x18>
 8000c4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c50:	ea92 0f0c 	teq	r2, ip
 8000c54:	bf18      	it	ne
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d00a      	beq.n	8000c72 <__aeabi_fmul+0x11e>
 8000c5c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c60:	bf18      	it	ne
 8000c62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c66:	d1d8      	bne.n	8000c1a <__aeabi_fmul+0xc6>
 8000c68:	ea80 0001 	eor.w	r0, r0, r1
 8000c6c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c70:	4770      	bx	lr
 8000c72:	f090 0f00 	teq	r0, #0
 8000c76:	bf17      	itett	ne
 8000c78:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	f091 0f00 	teqne	r1, #0
 8000c82:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c86:	d014      	beq.n	8000cb2 <__aeabi_fmul+0x15e>
 8000c88:	ea92 0f0c 	teq	r2, ip
 8000c8c:	d101      	bne.n	8000c92 <__aeabi_fmul+0x13e>
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	d10f      	bne.n	8000cb2 <__aeabi_fmul+0x15e>
 8000c92:	ea93 0f0c 	teq	r3, ip
 8000c96:	d103      	bne.n	8000ca0 <__aeabi_fmul+0x14c>
 8000c98:	024b      	lsls	r3, r1, #9
 8000c9a:	bf18      	it	ne
 8000c9c:	4608      	movne	r0, r1
 8000c9e:	d108      	bne.n	8000cb2 <__aeabi_fmul+0x15e>
 8000ca0:	ea80 0001 	eor.w	r0, r0, r1
 8000ca4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ca8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb0:	4770      	bx	lr
 8000cb2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_fdiv>:
 8000cbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc4:	bf1e      	ittt	ne
 8000cc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cca:	ea92 0f0c 	teqne	r2, ip
 8000cce:	ea93 0f0c 	teqne	r3, ip
 8000cd2:	d069      	beq.n	8000da8 <__aeabi_fdiv+0xec>
 8000cd4:	eba2 0203 	sub.w	r2, r2, r3
 8000cd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000cdc:	0249      	lsls	r1, r1, #9
 8000cde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ce2:	d037      	beq.n	8000d54 <__aeabi_fdiv+0x98>
 8000ce4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ce8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	bf38      	it	cc
 8000cf8:	005b      	lslcc	r3, r3, #1
 8000cfa:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000cfe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d02:	428b      	cmp	r3, r1
 8000d04:	bf24      	itt	cs
 8000d06:	1a5b      	subcs	r3, r3, r1
 8000d08:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d10:	bf24      	itt	cs
 8000d12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d1e:	bf24      	itt	cs
 8000d20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d2c:	bf24      	itt	cs
 8000d2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d3e:	d1e0      	bne.n	8000d02 <__aeabi_fdiv+0x46>
 8000d40:	2afd      	cmp	r2, #253	@ 0xfd
 8000d42:	f63f af50 	bhi.w	8000be6 <__aeabi_fmul+0x92>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5c:	327f      	adds	r2, #127	@ 0x7f
 8000d5e:	bfc2      	ittt	gt
 8000d60:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d68:	4770      	bxgt	lr
 8000d6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	3a01      	subs	r2, #1
 8000d74:	e737      	b.n	8000be6 <__aeabi_fmul+0x92>
 8000d76:	f092 0f00 	teq	r2, #0
 8000d7a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d7e:	bf02      	ittt	eq
 8000d80:	0040      	lsleq	r0, r0, #1
 8000d82:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d86:	3a01      	subeq	r2, #1
 8000d88:	d0f9      	beq.n	8000d7e <__aeabi_fdiv+0xc2>
 8000d8a:	ea40 000c 	orr.w	r0, r0, ip
 8000d8e:	f093 0f00 	teq	r3, #0
 8000d92:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0049      	lsleq	r1, r1, #1
 8000d9a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d9e:	3b01      	subeq	r3, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fdiv+0xda>
 8000da2:	ea41 010c 	orr.w	r1, r1, ip
 8000da6:	e795      	b.n	8000cd4 <__aeabi_fdiv+0x18>
 8000da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	d108      	bne.n	8000dc4 <__aeabi_fdiv+0x108>
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	f47f af7d 	bne.w	8000cb2 <__aeabi_fmul+0x15e>
 8000db8:	ea93 0f0c 	teq	r3, ip
 8000dbc:	f47f af70 	bne.w	8000ca0 <__aeabi_fmul+0x14c>
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e776      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000dc4:	ea93 0f0c 	teq	r3, ip
 8000dc8:	d104      	bne.n	8000dd4 <__aeabi_fdiv+0x118>
 8000dca:	024b      	lsls	r3, r1, #9
 8000dcc:	f43f af4c 	beq.w	8000c68 <__aeabi_fmul+0x114>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e76e      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000dd4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dd8:	bf18      	it	ne
 8000dda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dde:	d1ca      	bne.n	8000d76 <__aeabi_fdiv+0xba>
 8000de0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000de4:	f47f af5c 	bne.w	8000ca0 <__aeabi_fmul+0x14c>
 8000de8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000dec:	f47f af3c 	bne.w	8000c68 <__aeabi_fmul+0x114>
 8000df0:	e75f      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000df2:	bf00      	nop

08000df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfa:	f000 fad7 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfe:	f000 f86f 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e02:	f000 f983 	bl	800110c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e06:	f000 f8b1 	bl	8000f6c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000e0a:	f000 f907 	bl	800101c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000e0e:	213c      	movs	r1, #60	@ 0x3c
 8000e10:	482d      	ldr	r0, [pc, #180]	@ (8000ec8 <main+0xd4>)
 8000e12:	f001 fb83 	bl	800251c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000e16:	2108      	movs	r1, #8
 8000e18:	482c      	ldr	r0, [pc, #176]	@ (8000ecc <main+0xd8>)
 8000e1a:	f001 fa3b 	bl	8002294 <HAL_TIM_PWM_Start>

  int count = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
  int duty = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count = __HAL_TIM_GET_COUNTER(&htim1);
 8000e26:	4b28      	ldr	r3, [pc, #160]	@ (8000ec8 <main+0xd4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e2c:	607b      	str	r3, [r7, #4]
	  if(count > 60000){
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000e34:	4293      	cmp	r3, r2
 8000e36:	dd06      	ble.n	8000e46 <main+0x52>
		  count = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
		  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000e3c:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <main+0xd4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2200      	movs	r2, #0
 8000e42:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e44:	e008      	b.n	8000e58 <main+0x64>
	  }else if(count > COUNT_MAX){
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b14      	cmp	r3, #20
 8000e4a:	dd05      	ble.n	8000e58 <main+0x64>
		  count = COUNT_MAX;
 8000e4c:	2314      	movs	r3, #20
 8000e4e:	607b      	str	r3, [r7, #4]
		  __HAL_TIM_SET_COUNTER(&htim1, COUNT_MAX);
 8000e50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <main+0xd4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2214      	movs	r2, #20
 8000e56:	625a      	str	r2, [r3, #36]	@ 0x24
	  }

	  duty = (10 * count / (float)COUNT_MAX + 2.5) /100 * 2000;
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	4413      	add	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fe22 	bl	8000aac <__aeabi_i2f>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4919      	ldr	r1, [pc, #100]	@ (8000ed0 <main+0xdc>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff25 	bl	8000cbc <__aeabi_fdiv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff facd 	bl	8000414 <__aeabi_f2d>
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <main+0xe0>)
 8000e80:	f7ff f96a 	bl	8000158 <__adddf3>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <main+0xe4>)
 8000e92:	f7ff fc41 	bl	8000718 <__aeabi_ddiv>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <main+0xe8>)
 8000ea4:	f7ff fb0e 	bl	80004c4 <__aeabi_dmul>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f7ff fd1a 	bl	80008e8 <__aeabi_d2iz>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	603b      	str	r3, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty);
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <main+0xd8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	63da      	str	r2, [r3, #60]	@ 0x3c

	  HAL_Delay(10);
 8000ec0:	200a      	movs	r0, #10
 8000ec2:	f000 fad5 	bl	8001470 <HAL_Delay>
	  count = __HAL_TIM_GET_COUNTER(&htim1);
 8000ec6:	e7ae      	b.n	8000e26 <main+0x32>
 8000ec8:	20000028 	.word	0x20000028
 8000ecc:	20000070 	.word	0x20000070
 8000ed0:	41a00000 	.word	0x41a00000
 8000ed4:	40040000 	.word	0x40040000
 8000ed8:	40590000 	.word	0x40590000
 8000edc:	409f4000 	.word	0x409f4000

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b090      	sub	sp, #64	@ 0x40
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0318 	add.w	r3, r7, #24
 8000eea:	2228      	movs	r2, #40	@ 0x28
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 f83a 	bl	8002f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f10:	2301      	movs	r3, #1
 8000f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f14:	2302      	movs	r3, #2
 8000f16:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f1e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f24:	f107 0318 	add.w	r3, r7, #24
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fd2d 	bl	8001988 <HAL_RCC_OscConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f34:	f000 f918 	bl	8001168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f38:	230f      	movs	r3, #15
 8000f3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2102      	movs	r1, #2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 ff9a 	bl	8001e8c <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f5e:	f000 f903 	bl	8001168 <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	3740      	adds	r7, #64	@ 0x40
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	@ 0x30
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	2224      	movs	r2, #36	@ 0x24
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fff4 	bl	8002f68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f88:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <MX_TIM1_Init+0xa8>)
 8000f8a:	4a23      	ldr	r2, [pc, #140]	@ (8001018 <MX_TIM1_Init+0xac>)
 8000f8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <MX_TIM1_Init+0xa8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <MX_TIM1_Init+0xa8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001014 <MX_TIM1_Init+0xa8>)
 8000f9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <MX_TIM1_Init+0xa8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <MX_TIM1_Init+0xa8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fae:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <MX_TIM1_Init+0xa8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <MX_TIM1_Init+0xa8>)
 8000fe0:	f001 f9fa 	bl	80023d8 <HAL_TIM_Encoder_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000fea:	f000 f8bd 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <MX_TIM1_Init+0xa8>)
 8000ffc:	f001 ff56 	bl	8002eac <HAL_TIMEx_MasterConfigSynchronization>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001006:	f000 f8af 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3730      	adds	r7, #48	@ 0x30
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000028 	.word	0x20000028
 8001018:	40012c00 	.word	0x40012c00

0800101c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	@ 0x38
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800104c:	4b2d      	ldr	r3, [pc, #180]	@ (8001104 <MX_TIM4_Init+0xe8>)
 800104e:	4a2e      	ldr	r2, [pc, #184]	@ (8001108 <MX_TIM4_Init+0xec>)
 8001050:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720-1;
 8001052:	4b2c      	ldr	r3, [pc, #176]	@ (8001104 <MX_TIM4_Init+0xe8>)
 8001054:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001058:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105a:	4b2a      	ldr	r3, [pc, #168]	@ (8001104 <MX_TIM4_Init+0xe8>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8001060:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <MX_TIM4_Init+0xe8>)
 8001062:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001066:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001068:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <MX_TIM4_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <MX_TIM4_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001074:	4823      	ldr	r0, [pc, #140]	@ (8001104 <MX_TIM4_Init+0xe8>)
 8001076:	f001 f865 	bl	8002144 <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001080:	f000 f872 	bl	8001168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001088:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800108a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800108e:	4619      	mov	r1, r3
 8001090:	481c      	ldr	r0, [pc, #112]	@ (8001104 <MX_TIM4_Init+0xe8>)
 8001092:	f001 fb93 	bl	80027bc <HAL_TIM_ConfigClockSource>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800109c:	f000 f864 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010a0:	4818      	ldr	r0, [pc, #96]	@ (8001104 <MX_TIM4_Init+0xe8>)
 80010a2:	f001 f89e 	bl	80021e2 <HAL_TIM_PWM_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80010ac:	f000 f85c 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010b8:	f107 0320 	add.w	r3, r7, #32
 80010bc:	4619      	mov	r1, r3
 80010be:	4811      	ldr	r0, [pc, #68]	@ (8001104 <MX_TIM4_Init+0xe8>)
 80010c0:	f001 fef4 	bl	8002eac <HAL_TIMEx_MasterConfigSynchronization>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80010ca:	f000 f84d 	bl	8001168 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ce:	2360      	movs	r3, #96	@ 0x60
 80010d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2208      	movs	r2, #8
 80010e2:	4619      	mov	r1, r3
 80010e4:	4807      	ldr	r0, [pc, #28]	@ (8001104 <MX_TIM4_Init+0xe8>)
 80010e6:	f001 faa7 	bl	8002638 <HAL_TIM_PWM_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80010f0:	f000 f83a 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010f4:	4803      	ldr	r0, [pc, #12]	@ (8001104 <MX_TIM4_Init+0xe8>)
 80010f6:	f000 f8cd 	bl	8001294 <HAL_TIM_MspPostInit>

}
 80010fa:	bf00      	nop
 80010fc:	3738      	adds	r7, #56	@ 0x38
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000070 	.word	0x20000070
 8001108:	40000800 	.word	0x40000800

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <MX_GPIO_Init+0x58>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	4a13      	ldr	r2, [pc, #76]	@ (8001164 <MX_GPIO_Init+0x58>)
 8001118:	f043 0320 	orr.w	r3, r3, #32
 800111c:	6193      	str	r3, [r2, #24]
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <MX_GPIO_Init+0x58>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f003 0320 	and.w	r3, r3, #32
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <MX_GPIO_Init+0x58>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a0d      	ldr	r2, [pc, #52]	@ (8001164 <MX_GPIO_Init+0x58>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <MX_GPIO_Init+0x58>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <MX_GPIO_Init+0x58>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	4a07      	ldr	r2, [pc, #28]	@ (8001164 <MX_GPIO_Init+0x58>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	6193      	str	r3, [r2, #24]
 800114e:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <MX_GPIO_Init+0x58>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	40021000 	.word	0x40021000

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <Error_Handler+0x8>

08001174 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <HAL_MspInit+0x5c>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a14      	ldr	r2, [pc, #80]	@ (80011d0 <HAL_MspInit+0x5c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <HAL_MspInit+0x5c>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <HAL_MspInit+0x5c>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	4a0e      	ldr	r2, [pc, #56]	@ (80011d0 <HAL_MspInit+0x5c>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800119c:	61d3      	str	r3, [r2, #28]
 800119e:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <HAL_MspInit+0x5c>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011aa:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <HAL_MspInit+0x60>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	4a04      	ldr	r2, [pc, #16]	@ (80011d4 <HAL_MspInit+0x60>)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010000 	.word	0x40010000

080011d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a16      	ldr	r2, [pc, #88]	@ (800124c <HAL_TIM_Encoder_MspInit+0x74>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d124      	bne.n	8001242 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <HAL_TIM_Encoder_MspInit+0x78>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a14      	ldr	r2, [pc, #80]	@ (8001250 <HAL_TIM_Encoder_MspInit+0x78>)
 80011fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_TIM_Encoder_MspInit+0x78>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <HAL_TIM_Encoder_MspInit+0x78>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a0e      	ldr	r2, [pc, #56]	@ (8001250 <HAL_TIM_Encoder_MspInit+0x78>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <HAL_TIM_Encoder_MspInit+0x78>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001228:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800122c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	@ (8001254 <HAL_TIM_Encoder_MspInit+0x7c>)
 800123e:	f000 fa1f 	bl	8001680 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001242:	bf00      	nop
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40012c00 	.word	0x40012c00
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800

08001258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a09      	ldr	r2, [pc, #36]	@ (800128c <HAL_TIM_Base_MspInit+0x34>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10b      	bne.n	8001282 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <HAL_TIM_Base_MspInit+0x38>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a08      	ldr	r2, [pc, #32]	@ (8001290 <HAL_TIM_Base_MspInit+0x38>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	61d3      	str	r3, [r2, #28]
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_TIM_Base_MspInit+0x38>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	40000800 	.word	0x40000800
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a10      	ldr	r2, [pc, #64]	@ (80012f0 <HAL_TIM_MspPostInit+0x5c>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d118      	bne.n	80012e6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <HAL_TIM_MspPostInit+0x60>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a0e      	ldr	r2, [pc, #56]	@ (80012f4 <HAL_TIM_MspPostInit+0x60>)
 80012ba:	f043 0308 	orr.w	r3, r3, #8
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <HAL_TIM_MspPostInit+0x60>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <HAL_TIM_MspPostInit+0x64>)
 80012e2:	f000 f9cd 	bl	8001680 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40000800 	.word	0x40000800
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010c00 	.word	0x40010c00

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <NMI_Handler+0x4>

08001304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <MemManage_Handler+0x4>

08001314 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <UsageFault_Handler+0x4>

08001324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134c:	f000 f874 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001360:	f7ff fff8 	bl	8001354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001364:	480b      	ldr	r0, [pc, #44]	@ (8001394 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001366:	490c      	ldr	r1, [pc, #48]	@ (8001398 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001368:	4a0c      	ldr	r2, [pc, #48]	@ (800139c <LoopFillZerobss+0x16>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a09      	ldr	r2, [pc, #36]	@ (80013a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800137c:	4c09      	ldr	r4, [pc, #36]	@ (80013a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138a:	f001 fdf5 	bl	8002f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800138e:	f7ff fd31 	bl	8000df4 <main>
  bx lr
 8001392:	4770      	bx	lr
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001398:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800139c:	08003004 	.word	0x08003004
  ldr r2, =_sbss
 80013a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013a4:	200000bc 	.word	0x200000bc

080013a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC1_2_IRQHandler>
	...

080013ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <HAL_Init+0x28>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a07      	ldr	r2, [pc, #28]	@ (80013d4 <HAL_Init+0x28>)
 80013b6:	f043 0310 	orr.w	r3, r3, #16
 80013ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 f92b 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c2:	200f      	movs	r0, #15
 80013c4:	f000 f808 	bl	80013d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c8:	f7ff fed4 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40022000 	.word	0x40022000

080013d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <HAL_InitTick+0x54>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <HAL_InitTick+0x58>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f935 	bl	8001666 <HAL_SYSTICK_Config>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e00e      	b.n	8001424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d80a      	bhi.n	8001422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f000 f90b 	bl	800162e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001418:	4a06      	ldr	r2, [pc, #24]	@ (8001434 <HAL_InitTick+0x5c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000000 	.word	0x20000000
 8001430:	20000008 	.word	0x20000008
 8001434:	20000004 	.word	0x20000004

08001438 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_IncTick+0x1c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_IncTick+0x20>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a03      	ldr	r2, [pc, #12]	@ (8001458 <HAL_IncTick+0x20>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000008 	.word	0x20000008
 8001458:	200000b8 	.word	0x200000b8

0800145c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b02      	ldr	r3, [pc, #8]	@ (800146c <HAL_GetTick+0x10>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	200000b8 	.word	0x200000b8

08001470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001478:	f7ff fff0 	bl	800145c <HAL_GetTick>
 800147c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001488:	d005      	beq.n	8001496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <HAL_Delay+0x44>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4413      	add	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001496:	bf00      	nop
 8001498:	f7ff ffe0 	bl	800145c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d8f7      	bhi.n	8001498 <HAL_Delay+0x28>
  {
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008

080014b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ea:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	60d3      	str	r3, [r2, #12]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b04      	ldr	r3, [pc, #16]	@ (8001518 <__NVIC_GetPriorityGrouping+0x18>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	f003 0307 	and.w	r3, r3, #7
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	db0a      	blt.n	8001546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	490c      	ldr	r1, [pc, #48]	@ (8001568 <__NVIC_SetPriority+0x4c>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	440b      	add	r3, r1
 8001540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001544:	e00a      	b.n	800155c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4908      	ldr	r1, [pc, #32]	@ (800156c <__NVIC_SetPriority+0x50>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	3b04      	subs	r3, #4
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	440b      	add	r3, r1
 800155a:	761a      	strb	r2, [r3, #24]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000e100 	.word	0xe000e100
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	@ 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f1c3 0307 	rsb	r3, r3, #7
 800158a:	2b04      	cmp	r3, #4
 800158c:	bf28      	it	cs
 800158e:	2304      	movcs	r3, #4
 8001590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3304      	adds	r3, #4
 8001596:	2b06      	cmp	r3, #6
 8001598:	d902      	bls.n	80015a0 <NVIC_EncodePriority+0x30>
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3b03      	subs	r3, #3
 800159e:	e000      	b.n	80015a2 <NVIC_EncodePriority+0x32>
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	401a      	ands	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b8:	f04f 31ff 	mov.w	r1, #4294967295
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa01 f303 	lsl.w	r3, r1, r3
 80015c2:	43d9      	mvns	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	4313      	orrs	r3, r2
         );
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3724      	adds	r7, #36	@ 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff90 	bl	800151c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff49 	bl	80014b8 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff5e 	bl	8001500 <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff90 	bl	8001570 <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5f 	bl	800151c <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffb0 	bl	80015d4 <SysTick_Config>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001680:	b480      	push	{r7}
 8001682:	b08b      	sub	sp, #44	@ 0x2c
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001692:	e169      	b.n	8001968 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001694:	2201      	movs	r2, #1
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	f040 8158 	bne.w	8001962 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4a9a      	ldr	r2, [pc, #616]	@ (8001920 <HAL_GPIO_Init+0x2a0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d05e      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016bc:	4a98      	ldr	r2, [pc, #608]	@ (8001920 <HAL_GPIO_Init+0x2a0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d875      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016c2:	4a98      	ldr	r2, [pc, #608]	@ (8001924 <HAL_GPIO_Init+0x2a4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d058      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016c8:	4a96      	ldr	r2, [pc, #600]	@ (8001924 <HAL_GPIO_Init+0x2a4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d86f      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016ce:	4a96      	ldr	r2, [pc, #600]	@ (8001928 <HAL_GPIO_Init+0x2a8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d052      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016d4:	4a94      	ldr	r2, [pc, #592]	@ (8001928 <HAL_GPIO_Init+0x2a8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d869      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016da:	4a94      	ldr	r2, [pc, #592]	@ (800192c <HAL_GPIO_Init+0x2ac>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d04c      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016e0:	4a92      	ldr	r2, [pc, #584]	@ (800192c <HAL_GPIO_Init+0x2ac>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d863      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016e6:	4a92      	ldr	r2, [pc, #584]	@ (8001930 <HAL_GPIO_Init+0x2b0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d046      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016ec:	4a90      	ldr	r2, [pc, #576]	@ (8001930 <HAL_GPIO_Init+0x2b0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d85d      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016f2:	2b12      	cmp	r3, #18
 80016f4:	d82a      	bhi.n	800174c <HAL_GPIO_Init+0xcc>
 80016f6:	2b12      	cmp	r3, #18
 80016f8:	d859      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001700 <HAL_GPIO_Init+0x80>)
 80016fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001700:	0800177b 	.word	0x0800177b
 8001704:	08001755 	.word	0x08001755
 8001708:	08001767 	.word	0x08001767
 800170c:	080017a9 	.word	0x080017a9
 8001710:	080017af 	.word	0x080017af
 8001714:	080017af 	.word	0x080017af
 8001718:	080017af 	.word	0x080017af
 800171c:	080017af 	.word	0x080017af
 8001720:	080017af 	.word	0x080017af
 8001724:	080017af 	.word	0x080017af
 8001728:	080017af 	.word	0x080017af
 800172c:	080017af 	.word	0x080017af
 8001730:	080017af 	.word	0x080017af
 8001734:	080017af 	.word	0x080017af
 8001738:	080017af 	.word	0x080017af
 800173c:	080017af 	.word	0x080017af
 8001740:	080017af 	.word	0x080017af
 8001744:	0800175d 	.word	0x0800175d
 8001748:	08001771 	.word	0x08001771
 800174c:	4a79      	ldr	r2, [pc, #484]	@ (8001934 <HAL_GPIO_Init+0x2b4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001752:	e02c      	b.n	80017ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	623b      	str	r3, [r7, #32]
          break;
 800175a:	e029      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	3304      	adds	r3, #4
 8001762:	623b      	str	r3, [r7, #32]
          break;
 8001764:	e024      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	3308      	adds	r3, #8
 800176c:	623b      	str	r3, [r7, #32]
          break;
 800176e:	e01f      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	330c      	adds	r3, #12
 8001776:	623b      	str	r3, [r7, #32]
          break;
 8001778:	e01a      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001782:	2304      	movs	r3, #4
 8001784:	623b      	str	r3, [r7, #32]
          break;
 8001786:	e013      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d105      	bne.n	800179c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001790:	2308      	movs	r3, #8
 8001792:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	611a      	str	r2, [r3, #16]
          break;
 800179a:	e009      	b.n	80017b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800179c:	2308      	movs	r3, #8
 800179e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	615a      	str	r2, [r3, #20]
          break;
 80017a6:	e003      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
          break;
 80017ac:	e000      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          break;
 80017ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2bff      	cmp	r3, #255	@ 0xff
 80017b4:	d801      	bhi.n	80017ba <HAL_GPIO_Init+0x13a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	e001      	b.n	80017be <HAL_GPIO_Init+0x13e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3304      	adds	r3, #4
 80017be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2bff      	cmp	r3, #255	@ 0xff
 80017c4:	d802      	bhi.n	80017cc <HAL_GPIO_Init+0x14c>
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	e002      	b.n	80017d2 <HAL_GPIO_Init+0x152>
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	3b08      	subs	r3, #8
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	210f      	movs	r1, #15
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	401a      	ands	r2, r3
 80017e4:	6a39      	ldr	r1, [r7, #32]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	431a      	orrs	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80b1 	beq.w	8001962 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001800:	4b4d      	ldr	r3, [pc, #308]	@ (8001938 <HAL_GPIO_Init+0x2b8>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a4c      	ldr	r2, [pc, #304]	@ (8001938 <HAL_GPIO_Init+0x2b8>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b4a      	ldr	r3, [pc, #296]	@ (8001938 <HAL_GPIO_Init+0x2b8>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001818:	4a48      	ldr	r2, [pc, #288]	@ (800193c <HAL_GPIO_Init+0x2bc>)
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001824:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a40      	ldr	r2, [pc, #256]	@ (8001940 <HAL_GPIO_Init+0x2c0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d013      	beq.n	800186c <HAL_GPIO_Init+0x1ec>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a3f      	ldr	r2, [pc, #252]	@ (8001944 <HAL_GPIO_Init+0x2c4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d00d      	beq.n	8001868 <HAL_GPIO_Init+0x1e8>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a3e      	ldr	r2, [pc, #248]	@ (8001948 <HAL_GPIO_Init+0x2c8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d007      	beq.n	8001864 <HAL_GPIO_Init+0x1e4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a3d      	ldr	r2, [pc, #244]	@ (800194c <HAL_GPIO_Init+0x2cc>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d101      	bne.n	8001860 <HAL_GPIO_Init+0x1e0>
 800185c:	2303      	movs	r3, #3
 800185e:	e006      	b.n	800186e <HAL_GPIO_Init+0x1ee>
 8001860:	2304      	movs	r3, #4
 8001862:	e004      	b.n	800186e <HAL_GPIO_Init+0x1ee>
 8001864:	2302      	movs	r3, #2
 8001866:	e002      	b.n	800186e <HAL_GPIO_Init+0x1ee>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_GPIO_Init+0x1ee>
 800186c:	2300      	movs	r3, #0
 800186e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001870:	f002 0203 	and.w	r2, r2, #3
 8001874:	0092      	lsls	r2, r2, #2
 8001876:	4093      	lsls	r3, r2
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800187e:	492f      	ldr	r1, [pc, #188]	@ (800193c <HAL_GPIO_Init+0x2bc>)
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	3302      	adds	r3, #2
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001898:	4b2d      	ldr	r3, [pc, #180]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	492c      	ldr	r1, [pc, #176]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4928      	ldr	r1, [pc, #160]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d006      	beq.n	80018ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018c0:	4b23      	ldr	r3, [pc, #140]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	4922      	ldr	r1, [pc, #136]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60cb      	str	r3, [r1, #12]
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ce:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	491e      	ldr	r1, [pc, #120]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018d8:	4013      	ands	r3, r2
 80018da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d006      	beq.n	80018f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018e8:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4918      	ldr	r1, [pc, #96]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018f6:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	4914      	ldr	r1, [pc, #80]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 8001900:	4013      	ands	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d021      	beq.n	8001954 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001910:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	490e      	ldr	r1, [pc, #56]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	600b      	str	r3, [r1, #0]
 800191c:	e021      	b.n	8001962 <HAL_GPIO_Init+0x2e2>
 800191e:	bf00      	nop
 8001920:	10320000 	.word	0x10320000
 8001924:	10310000 	.word	0x10310000
 8001928:	10220000 	.word	0x10220000
 800192c:	10210000 	.word	0x10210000
 8001930:	10120000 	.word	0x10120000
 8001934:	10110000 	.word	0x10110000
 8001938:	40021000 	.word	0x40021000
 800193c:	40010000 	.word	0x40010000
 8001940:	40010800 	.word	0x40010800
 8001944:	40010c00 	.word	0x40010c00
 8001948:	40011000 	.word	0x40011000
 800194c:	40011400 	.word	0x40011400
 8001950:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <HAL_GPIO_Init+0x304>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	43db      	mvns	r3, r3
 800195c:	4909      	ldr	r1, [pc, #36]	@ (8001984 <HAL_GPIO_Init+0x304>)
 800195e:	4013      	ands	r3, r2
 8001960:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	f47f ae8e 	bne.w	8001694 <HAL_GPIO_Init+0x14>
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	372c      	adds	r7, #44	@ 0x2c
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e272      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8087 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a8:	4b92      	ldr	r3, [pc, #584]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d00c      	beq.n	80019ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b4:	4b8f      	ldr	r3, [pc, #572]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d112      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
 80019c0:	4b8c      	ldr	r3, [pc, #560]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019cc:	d10b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ce:	4b89      	ldr	r3, [pc, #548]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d06c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d168      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e24c      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x76>
 80019f0:	4b80      	ldr	r3, [pc, #512]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a7f      	ldr	r2, [pc, #508]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e02e      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x98>
 8001a06:	4b7b      	ldr	r3, [pc, #492]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a7a      	ldr	r2, [pc, #488]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b78      	ldr	r3, [pc, #480]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a77      	ldr	r2, [pc, #476]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01d      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0xbc>
 8001a2a:	4b72      	ldr	r3, [pc, #456]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a71      	ldr	r2, [pc, #452]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b6f      	ldr	r3, [pc, #444]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a44:	4b6b      	ldr	r3, [pc, #428]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6a      	ldr	r2, [pc, #424]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b68      	ldr	r3, [pc, #416]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a67      	ldr	r2, [pc, #412]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fcfa 	bl	800145c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fcf6 	bl	800145c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	@ 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e200      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe4>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fce6 	bl	800145c <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fce2 	bl	800145c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	@ 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1ec      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	4b53      	ldr	r3, [pc, #332]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x10c>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d063      	beq.n	8001b8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ac2:	4b4c      	ldr	r3, [pc, #304]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ace:	4b49      	ldr	r3, [pc, #292]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d11c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
 8001ada:	4b46      	ldr	r3, [pc, #280]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d116      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e1c0      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4939      	ldr	r1, [pc, #228]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e03a      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d020      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b36      	ldr	r3, [pc, #216]	@ (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff fc9b 	bl	800145c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fc97 	bl	800145c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e1a1      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4927      	ldr	r1, [pc, #156]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5e:	4b26      	ldr	r3, [pc, #152]	@ (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fc7a 	bl	800145c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fc76 	bl	800145c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e180      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d03a      	beq.n	8001c0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d019      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9e:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fc5a 	bl	800145c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff fc56 	bl	800145c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e160      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f000 fa9c 	bl	8002108 <RCC_Delay>
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fc40 	bl	800145c <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bde:	e00f      	b.n	8001c00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be0:	f7ff fc3c 	bl	800145c <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d908      	bls.n	8001c00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e146      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	42420000 	.word	0x42420000
 8001bfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b92      	ldr	r3, [pc, #584]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e9      	bne.n	8001be0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a6 	beq.w	8001d66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b8b      	ldr	r3, [pc, #556]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10d      	bne.n	8001c46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b88      	ldr	r3, [pc, #544]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a87      	ldr	r2, [pc, #540]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b85      	ldr	r3, [pc, #532]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	4b82      	ldr	r3, [pc, #520]	@ (8001e50 <HAL_RCC_OscConfig+0x4c8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c52:	4b7f      	ldr	r3, [pc, #508]	@ (8001e50 <HAL_RCC_OscConfig+0x4c8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a7e      	ldr	r2, [pc, #504]	@ (8001e50 <HAL_RCC_OscConfig+0x4c8>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff fbfd 	bl	800145c <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7ff fbf9 	bl	800145c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b64      	cmp	r3, #100	@ 0x64
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e103      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	4b75      	ldr	r3, [pc, #468]	@ (8001e50 <HAL_RCC_OscConfig+0x4c8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x312>
 8001c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a6e      	ldr	r2, [pc, #440]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	e02d      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x334>
 8001ca2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a69      	ldr	r2, [pc, #420]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	4b67      	ldr	r3, [pc, #412]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a66      	ldr	r2, [pc, #408]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	e01c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0x356>
 8001cc4:	4b61      	ldr	r3, [pc, #388]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a60      	ldr	r2, [pc, #384]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	e00b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cde:	4b5b      	ldr	r3, [pc, #364]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a5a      	ldr	r2, [pc, #360]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	4b58      	ldr	r3, [pc, #352]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a57      	ldr	r2, [pc, #348]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d015      	beq.n	8001d2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff fbad 	bl	800145c <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7ff fba9 	bl	800145c <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e0b1      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ee      	beq.n	8001d06 <HAL_RCC_OscConfig+0x37e>
 8001d28:	e014      	b.n	8001d54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7ff fb97 	bl	800145c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff fb93 	bl	800145c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e09b      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	4b40      	ldr	r3, [pc, #256]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ee      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d105      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a3b      	ldr	r2, [pc, #236]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8087 	beq.w	8001e7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d70:	4b36      	ldr	r3, [pc, #216]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d061      	beq.n	8001e40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d146      	bne.n	8001e12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d84:	4b33      	ldr	r3, [pc, #204]	@ (8001e54 <HAL_RCC_OscConfig+0x4cc>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7ff fb67 	bl	800145c <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7ff fb63 	bl	800145c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e06d      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da4:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f0      	bne.n	8001d92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001db8:	d108      	bne.n	8001dcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dba:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	4921      	ldr	r1, [pc, #132]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a19      	ldr	r1, [r3, #32]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	491b      	ldr	r1, [pc, #108]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <HAL_RCC_OscConfig+0x4cc>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff fb37 	bl	800145c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff fb33 	bl	800145c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e03d      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x46a>
 8001e10:	e035      	b.n	8001e7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <HAL_RCC_OscConfig+0x4cc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fb20 	bl	800145c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff fb1c 	bl	800145c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e026      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x498>
 8001e3e:	e01e      	b.n	8001e7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e019      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40007000 	.word	0x40007000
 8001e54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e58:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <HAL_RCC_OscConfig+0x500>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000

08001e8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0d0      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d910      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b67      	ldr	r3, [pc, #412]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 0207 	bic.w	r2, r3, #7
 8001eb6:	4965      	ldr	r1, [pc, #404]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b63      	ldr	r3, [pc, #396]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0b8      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee8:	4b59      	ldr	r3, [pc, #356]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4a58      	ldr	r2, [pc, #352]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ef2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f00:	4b53      	ldr	r3, [pc, #332]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a52      	ldr	r2, [pc, #328]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0c:	4b50      	ldr	r3, [pc, #320]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	494d      	ldr	r1, [pc, #308]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d040      	beq.n	8001fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b47      	ldr	r3, [pc, #284]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d115      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e07f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4a:	4b41      	ldr	r3, [pc, #260]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e073      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e06b      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f6a:	4b39      	ldr	r3, [pc, #228]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f023 0203 	bic.w	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4936      	ldr	r1, [pc, #216]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f7c:	f7ff fa6e 	bl	800145c <HAL_GetTick>
 8001f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f84:	f7ff fa6a 	bl	800145c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e053      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 020c 	and.w	r2, r3, #12
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d1eb      	bne.n	8001f84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fac:	4b27      	ldr	r3, [pc, #156]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d210      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b24      	ldr	r3, [pc, #144]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 0207 	bic.w	r2, r3, #7
 8001fc2:	4922      	ldr	r1, [pc, #136]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b20      	ldr	r3, [pc, #128]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e032      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe8:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4916      	ldr	r1, [pc, #88]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002006:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	490e      	ldr	r1, [pc, #56]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800201a:	f000 f821 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 800201e:	4602      	mov	r2, r0
 8002020:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	490a      	ldr	r1, [pc, #40]	@ (8002054 <HAL_RCC_ClockConfig+0x1c8>)
 800202c:	5ccb      	ldrb	r3, [r1, r3]
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	4a09      	ldr	r2, [pc, #36]	@ (8002058 <HAL_RCC_ClockConfig+0x1cc>)
 8002034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002036:	4b09      	ldr	r3, [pc, #36]	@ (800205c <HAL_RCC_ClockConfig+0x1d0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f9cc 	bl	80013d8 <HAL_InitTick>

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40022000 	.word	0x40022000
 8002050:	40021000 	.word	0x40021000
 8002054:	08002fd8 	.word	0x08002fd8
 8002058:	20000000 	.word	0x20000000
 800205c:	20000004 	.word	0x20000004

08002060 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800207a:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b04      	cmp	r3, #4
 8002088:	d002      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x30>
 800208a:	2b08      	cmp	r3, #8
 800208c:	d003      	beq.n	8002096 <HAL_RCC_GetSysClockFreq+0x36>
 800208e:	e027      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002090:	4b19      	ldr	r3, [pc, #100]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002092:	613b      	str	r3, [r7, #16]
      break;
 8002094:	e027      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	0c9b      	lsrs	r3, r3, #18
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	4a17      	ldr	r2, [pc, #92]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80020a0:	5cd3      	ldrb	r3, [r2, r3]
 80020a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d010      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ae:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	0c5b      	lsrs	r3, r3, #17
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	4a11      	ldr	r2, [pc, #68]	@ (8002100 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020ba:	5cd3      	ldrb	r3, [r2, r3]
 80020bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a0d      	ldr	r2, [pc, #52]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020c2:	fb03 f202 	mul.w	r2, r3, r2
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	e004      	b.n	80020da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002104 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020d4:	fb02 f303 	mul.w	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	613b      	str	r3, [r7, #16]
      break;
 80020de:	e002      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020e0:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020e2:	613b      	str	r3, [r7, #16]
      break;
 80020e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e6:	693b      	ldr	r3, [r7, #16]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	371c      	adds	r7, #28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	007a1200 	.word	0x007a1200
 80020fc:	08002fe8 	.word	0x08002fe8
 8002100:	08002ff8 	.word	0x08002ff8
 8002104:	003d0900 	.word	0x003d0900

08002108 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002110:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <RCC_Delay+0x34>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <RCC_Delay+0x38>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	0a5b      	lsrs	r3, r3, #9
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002124:	bf00      	nop
  }
  while (Delay --);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1e5a      	subs	r2, r3, #1
 800212a:	60fa      	str	r2, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f9      	bne.n	8002124 <RCC_Delay+0x1c>
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	20000000 	.word	0x20000000
 8002140:	10624dd3 	.word	0x10624dd3

08002144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e041      	b.n	80021da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff f874 	bl	8001258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3304      	adds	r3, #4
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f000 fbe2 	bl	800294c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e041      	b.n	8002278 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d106      	bne.n	800220e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f839 	bl	8002280 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2202      	movs	r2, #2
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3304      	adds	r3, #4
 800221e:	4619      	mov	r1, r3
 8002220:	4610      	mov	r0, r2
 8002222:	f000 fb93 	bl	800294c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
	...

08002294 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d109      	bne.n	80022b8 <HAL_TIM_PWM_Start+0x24>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e022      	b.n	80022fe <HAL_TIM_PWM_Start+0x6a>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d109      	bne.n	80022d2 <HAL_TIM_PWM_Start+0x3e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	bf14      	ite	ne
 80022ca:	2301      	movne	r3, #1
 80022cc:	2300      	moveq	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	e015      	b.n	80022fe <HAL_TIM_PWM_Start+0x6a>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d109      	bne.n	80022ec <HAL_TIM_PWM_Start+0x58>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	bf14      	ite	ne
 80022e4:	2301      	movne	r3, #1
 80022e6:	2300      	moveq	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	e008      	b.n	80022fe <HAL_TIM_PWM_Start+0x6a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	bf14      	ite	ne
 80022f8:	2301      	movne	r3, #1
 80022fa:	2300      	moveq	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e05e      	b.n	80023c4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d104      	bne.n	8002316 <HAL_TIM_PWM_Start+0x82>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002314:	e013      	b.n	800233e <HAL_TIM_PWM_Start+0xaa>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d104      	bne.n	8002326 <HAL_TIM_PWM_Start+0x92>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002324:	e00b      	b.n	800233e <HAL_TIM_PWM_Start+0xaa>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d104      	bne.n	8002336 <HAL_TIM_PWM_Start+0xa2>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002334:	e003      	b.n	800233e <HAL_TIM_PWM_Start+0xaa>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2202      	movs	r2, #2
 800233a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2201      	movs	r2, #1
 8002344:	6839      	ldr	r1, [r7, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fd8c 	bl	8002e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1e      	ldr	r2, [pc, #120]	@ (80023cc <HAL_TIM_PWM_Start+0x138>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d107      	bne.n	8002366 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002364:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a18      	ldr	r2, [pc, #96]	@ (80023cc <HAL_TIM_PWM_Start+0x138>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00e      	beq.n	800238e <HAL_TIM_PWM_Start+0xfa>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002378:	d009      	beq.n	800238e <HAL_TIM_PWM_Start+0xfa>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a14      	ldr	r2, [pc, #80]	@ (80023d0 <HAL_TIM_PWM_Start+0x13c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d004      	beq.n	800238e <HAL_TIM_PWM_Start+0xfa>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a12      	ldr	r2, [pc, #72]	@ (80023d4 <HAL_TIM_PWM_Start+0x140>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d111      	bne.n	80023b2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b06      	cmp	r3, #6
 800239e:	d010      	beq.n	80023c2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b0:	e007      	b.n	80023c2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40012c00 	.word	0x40012c00
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800

080023d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e093      	b.n	8002514 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d106      	bne.n	8002406 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7fe fee9 	bl	80011d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2202      	movs	r2, #2
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800241c:	f023 0307 	bic.w	r3, r3, #7
 8002420:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3304      	adds	r3, #4
 800242a:	4619      	mov	r1, r3
 800242c:	4610      	mov	r0, r2
 800242e:	f000 fa8d 	bl	800294c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	4313      	orrs	r3, r2
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002478:	f023 030c 	bic.w	r3, r3, #12
 800247c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002484:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	4313      	orrs	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	011a      	lsls	r2, r3, #4
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	031b      	lsls	r3, r3, #12
 80024a8:	4313      	orrs	r3, r2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80024b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	4313      	orrs	r3, r2
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800252c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002534:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800253c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002544:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d110      	bne.n	800256e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d102      	bne.n	8002558 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002552:	7b7b      	ldrb	r3, [r7, #13]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d001      	beq.n	800255c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e069      	b.n	8002630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800256c:	e031      	b.n	80025d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d110      	bne.n	8002596 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002574:	7bbb      	ldrb	r3, [r7, #14]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d102      	bne.n	8002580 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800257a:	7b3b      	ldrb	r3, [r7, #12]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d001      	beq.n	8002584 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e055      	b.n	8002630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002594:	e01d      	b.n	80025d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d108      	bne.n	80025ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800259c:	7bbb      	ldrb	r3, [r7, #14]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d105      	bne.n	80025ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80025a2:	7b7b      	ldrb	r3, [r7, #13]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d102      	bne.n	80025ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80025a8:	7b3b      	ldrb	r3, [r7, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d001      	beq.n	80025b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e03e      	b.n	8002630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_TIM_Encoder_Start+0xc4>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d008      	beq.n	80025f0 <HAL_TIM_Encoder_Start+0xd4>
 80025de:	e00f      	b.n	8002600 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2201      	movs	r2, #1
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fc3b 	bl	8002e64 <TIM_CCxChannelCmd>
      break;
 80025ee:	e016      	b.n	800261e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2201      	movs	r2, #1
 80025f6:	2104      	movs	r1, #4
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fc33 	bl	8002e64 <TIM_CCxChannelCmd>
      break;
 80025fe:	e00e      	b.n	800261e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2201      	movs	r2, #1
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fc2b 	bl	8002e64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2201      	movs	r2, #1
 8002614:	2104      	movs	r1, #4
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fc24 	bl	8002e64 <TIM_CCxChannelCmd>
      break;
 800261c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0201 	orr.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002652:	2302      	movs	r3, #2
 8002654:	e0ae      	b.n	80027b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b0c      	cmp	r3, #12
 8002662:	f200 809f 	bhi.w	80027a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002666:	a201      	add	r2, pc, #4	@ (adr r2, 800266c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266c:	080026a1 	.word	0x080026a1
 8002670:	080027a5 	.word	0x080027a5
 8002674:	080027a5 	.word	0x080027a5
 8002678:	080027a5 	.word	0x080027a5
 800267c:	080026e1 	.word	0x080026e1
 8002680:	080027a5 	.word	0x080027a5
 8002684:	080027a5 	.word	0x080027a5
 8002688:	080027a5 	.word	0x080027a5
 800268c:	08002723 	.word	0x08002723
 8002690:	080027a5 	.word	0x080027a5
 8002694:	080027a5 	.word	0x080027a5
 8002698:	080027a5 	.word	0x080027a5
 800269c:	08002763 	.word	0x08002763
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f9be 	bl	8002a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699a      	ldr	r2, [r3, #24]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0208 	orr.w	r2, r2, #8
 80026ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0204 	bic.w	r2, r2, #4
 80026ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6999      	ldr	r1, [r3, #24]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	619a      	str	r2, [r3, #24]
      break;
 80026de:	e064      	b.n	80027aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fa04 	bl	8002af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800270a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6999      	ldr	r1, [r3, #24]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	021a      	lsls	r2, r3, #8
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	619a      	str	r2, [r3, #24]
      break;
 8002720:	e043      	b.n	80027aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fa4d 	bl	8002bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0208 	orr.w	r2, r2, #8
 800273c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69da      	ldr	r2, [r3, #28]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0204 	bic.w	r2, r2, #4
 800274c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69d9      	ldr	r1, [r3, #28]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	61da      	str	r2, [r3, #28]
      break;
 8002760:	e023      	b.n	80027aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68b9      	ldr	r1, [r7, #8]
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fa97 	bl	8002c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800277c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69da      	ldr	r2, [r3, #28]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800278c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69d9      	ldr	r1, [r3, #28]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	021a      	lsls	r2, r3, #8
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	61da      	str	r2, [r3, #28]
      break;
 80027a2:	e002      	b.n	80027aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	75fb      	strb	r3, [r7, #23]
      break;
 80027a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_TIM_ConfigClockSource+0x1c>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e0b4      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x186>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002810:	d03e      	beq.n	8002890 <HAL_TIM_ConfigClockSource+0xd4>
 8002812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002816:	f200 8087 	bhi.w	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800281e:	f000 8086 	beq.w	800292e <HAL_TIM_ConfigClockSource+0x172>
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002826:	d87f      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002828:	2b70      	cmp	r3, #112	@ 0x70
 800282a:	d01a      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0xa6>
 800282c:	2b70      	cmp	r3, #112	@ 0x70
 800282e:	d87b      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b60      	cmp	r3, #96	@ 0x60
 8002832:	d050      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x11a>
 8002834:	2b60      	cmp	r3, #96	@ 0x60
 8002836:	d877      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b50      	cmp	r3, #80	@ 0x50
 800283a:	d03c      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0xfa>
 800283c:	2b50      	cmp	r3, #80	@ 0x50
 800283e:	d873      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b40      	cmp	r3, #64	@ 0x40
 8002842:	d058      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x13a>
 8002844:	2b40      	cmp	r3, #64	@ 0x40
 8002846:	d86f      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b30      	cmp	r3, #48	@ 0x30
 800284a:	d064      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 800284c:	2b30      	cmp	r3, #48	@ 0x30
 800284e:	d86b      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b20      	cmp	r3, #32
 8002852:	d060      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 8002854:	2b20      	cmp	r3, #32
 8002856:	d867      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05c      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 800285c:	2b10      	cmp	r3, #16
 800285e:	d05a      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 8002860:	e062      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002872:	f000 fad8 	bl	8002e26 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002884:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	609a      	str	r2, [r3, #8]
      break;
 800288e:	e04f      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028a0:	f000 fac1 	bl	8002e26 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028b2:	609a      	str	r2, [r3, #8]
      break;
 80028b4:	e03c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 fa38 	bl	8002d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2150      	movs	r1, #80	@ 0x50
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fa8f 	bl	8002df2 <TIM_ITRx_SetConfig>
      break;
 80028d4:	e02c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e2:	461a      	mov	r2, r3
 80028e4:	f000 fa56 	bl	8002d94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2160      	movs	r1, #96	@ 0x60
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fa7f 	bl	8002df2 <TIM_ITRx_SetConfig>
      break;
 80028f4:	e01c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002902:	461a      	mov	r2, r3
 8002904:	f000 fa18 	bl	8002d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2140      	movs	r1, #64	@ 0x40
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fa6f 	bl	8002df2 <TIM_ITRx_SetConfig>
      break;
 8002914:	e00c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f000 fa66 	bl	8002df2 <TIM_ITRx_SetConfig>
      break;
 8002926:	e003      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e000      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800292e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002940:	7bfb      	ldrb	r3, [r7, #15]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a2f      	ldr	r2, [pc, #188]	@ (8002a1c <TIM_Base_SetConfig+0xd0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00b      	beq.n	800297c <TIM_Base_SetConfig+0x30>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800296a:	d007      	beq.n	800297c <TIM_Base_SetConfig+0x30>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a2c      	ldr	r2, [pc, #176]	@ (8002a20 <TIM_Base_SetConfig+0xd4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d003      	beq.n	800297c <TIM_Base_SetConfig+0x30>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a2b      	ldr	r2, [pc, #172]	@ (8002a24 <TIM_Base_SetConfig+0xd8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d108      	bne.n	800298e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a22      	ldr	r2, [pc, #136]	@ (8002a1c <TIM_Base_SetConfig+0xd0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00b      	beq.n	80029ae <TIM_Base_SetConfig+0x62>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800299c:	d007      	beq.n	80029ae <TIM_Base_SetConfig+0x62>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a20 <TIM_Base_SetConfig+0xd4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d003      	beq.n	80029ae <TIM_Base_SetConfig+0x62>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a24 <TIM_Base_SetConfig+0xd8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d108      	bne.n	80029c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a0d      	ldr	r2, [pc, #52]	@ (8002a1c <TIM_Base_SetConfig+0xd0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d103      	bne.n	80029f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f023 0201 	bic.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	611a      	str	r2, [r3, #16]
  }
}
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40000800 	.word	0x40000800

08002a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	f023 0201 	bic.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f023 0302 	bic.w	r3, r3, #2
 8002a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002af0 <TIM_OC1_SetConfig+0xc8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d10c      	bne.n	8002a9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f023 0308 	bic.w	r3, r3, #8
 8002a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 0304 	bic.w	r3, r3, #4
 8002a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a13      	ldr	r2, [pc, #76]	@ (8002af0 <TIM_OC1_SetConfig+0xc8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d111      	bne.n	8002aca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	621a      	str	r2, [r3, #32]
}
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40012c00 	.word	0x40012c00

08002af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f023 0210 	bic.w	r2, r3, #16
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f023 0320 	bic.w	r3, r3, #32
 8002b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc4 <TIM_OC2_SetConfig+0xd0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d10d      	bne.n	8002b70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a14      	ldr	r2, [pc, #80]	@ (8002bc4 <TIM_OC2_SetConfig+0xd0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d113      	bne.n	8002ba0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	621a      	str	r2, [r3, #32]
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	40012c00 	.word	0x40012c00

08002bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0303 	bic.w	r3, r3, #3
 8002bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a1d      	ldr	r2, [pc, #116]	@ (8002c98 <TIM_OC3_SetConfig+0xd0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10d      	bne.n	8002c42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a14      	ldr	r2, [pc, #80]	@ (8002c98 <TIM_OC3_SetConfig+0xd0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d113      	bne.n	8002c72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	621a      	str	r2, [r3, #32]
}
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40012c00 	.word	0x40012c00

08002c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	031b      	lsls	r3, r3, #12
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8002d34 <TIM_OC4_SetConfig+0x98>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d109      	bne.n	8002d10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	019b      	lsls	r3, r3, #6
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	621a      	str	r2, [r3, #32]
}
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	40012c00 	.word	0x40012c00

08002d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	f023 0201 	bic.w	r2, r3, #1
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f023 030a 	bic.w	r3, r3, #10
 8002d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	621a      	str	r2, [r3, #32]
}
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f023 0210 	bic.w	r2, r3, #16
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	031b      	lsls	r3, r3, #12
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	621a      	str	r2, [r3, #32]
}
 8002de8:	bf00      	nop
 8002dea:	371c      	adds	r7, #28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f043 0307 	orr.w	r3, r3, #7
 8002e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	609a      	str	r2, [r3, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b087      	sub	sp, #28
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	021a      	lsls	r2, r3, #8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	609a      	str	r2, [r3, #8]
}
 8002e5a:	bf00      	nop
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	2201      	movs	r2, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	401a      	ands	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a1a      	ldr	r2, [r3, #32]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e046      	b.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a16      	ldr	r2, [pc, #88]	@ (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00e      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f10:	d009      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a12      	ldr	r2, [pc, #72]	@ (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a10      	ldr	r2, [pc, #64]	@ (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10c      	bne.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	40012c00 	.word	0x40012c00
 8002f60:	40000400 	.word	0x40000400
 8002f64:	40000800 	.word	0x40000800

08002f68 <memset>:
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4402      	add	r2, r0
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d100      	bne.n	8002f72 <memset+0xa>
 8002f70:	4770      	bx	lr
 8002f72:	f803 1b01 	strb.w	r1, [r3], #1
 8002f76:	e7f9      	b.n	8002f6c <memset+0x4>

08002f78 <__libc_init_array>:
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	4d0c      	ldr	r5, [pc, #48]	@ (8002fb0 <__libc_init_array+0x38>)
 8002f7e:	4c0d      	ldr	r4, [pc, #52]	@ (8002fb4 <__libc_init_array+0x3c>)
 8002f80:	1b64      	subs	r4, r4, r5
 8002f82:	10a4      	asrs	r4, r4, #2
 8002f84:	42a6      	cmp	r6, r4
 8002f86:	d109      	bne.n	8002f9c <__libc_init_array+0x24>
 8002f88:	f000 f81a 	bl	8002fc0 <_init>
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	4d0a      	ldr	r5, [pc, #40]	@ (8002fb8 <__libc_init_array+0x40>)
 8002f90:	4c0a      	ldr	r4, [pc, #40]	@ (8002fbc <__libc_init_array+0x44>)
 8002f92:	1b64      	subs	r4, r4, r5
 8002f94:	10a4      	asrs	r4, r4, #2
 8002f96:	42a6      	cmp	r6, r4
 8002f98:	d105      	bne.n	8002fa6 <__libc_init_array+0x2e>
 8002f9a:	bd70      	pop	{r4, r5, r6, pc}
 8002f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa0:	4798      	blx	r3
 8002fa2:	3601      	adds	r6, #1
 8002fa4:	e7ee      	b.n	8002f84 <__libc_init_array+0xc>
 8002fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002faa:	4798      	blx	r3
 8002fac:	3601      	adds	r6, #1
 8002fae:	e7f2      	b.n	8002f96 <__libc_init_array+0x1e>
 8002fb0:	08002ffc 	.word	0x08002ffc
 8002fb4:	08002ffc 	.word	0x08002ffc
 8002fb8:	08002ffc 	.word	0x08002ffc
 8002fbc:	08003000 	.word	0x08003000

08002fc0 <_init>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	bf00      	nop
 8002fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc6:	bc08      	pop	{r3}
 8002fc8:	469e      	mov	lr, r3
 8002fca:	4770      	bx	lr

08002fcc <_fini>:
 8002fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fce:	bf00      	nop
 8002fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd2:	bc08      	pop	{r3}
 8002fd4:	469e      	mov	lr, r3
 8002fd6:	4770      	bx	lr
