
proj6_iic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e54  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08009f68  08009f68  0000af68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3f0  0800a3f0  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3f0  0800a3f0  0000b3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3f8  0800a3f8  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3f8  0800a3f8  0000b3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3fc  0800a3fc  0000b3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a400  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200001d8  0800a5d8  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  0800a5d8  0000c3f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af8b  00000000  00000000  0000c201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002076  00000000  00000000  0001718c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00019208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000832  00000000  00000000  00019ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001856c  00000000  00000000  0001a4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb4e  00000000  00000000  00032a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000864fb  00000000  00000000  00041594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7a8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc0  00000000  00000000  000c7ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000cba94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009f4c 	.word	0x08009f4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08009f4c 	.word	0x08009f4c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <AHT20_Init>:

#define AHT20_ADDRESS 0x70

uint8_t readBuffer[6] = {0};

void AHT20_Init(){
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af02      	add	r7, sp, #8
	uint8_t readBuffer;
	HAL_Delay(40);
 8001096:	2028      	movs	r0, #40	@ 0x28
 8001098:	f000 fc3e 	bl	8001918 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, &readBuffer , 1, HAL_MAX_DELAY);
 800109c:	1dfa      	adds	r2, r7, #7
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	2170      	movs	r1, #112	@ 0x70
 80010a8:	480e      	ldr	r0, [pc, #56]	@ (80010e4 <AHT20_Init+0x54>)
 80010aa:	f001 f9c7 	bl	800243c <HAL_I2C_Master_Receive>
	if((readBuffer & 0x08) == 0x00){
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d110      	bne.n	80010da <AHT20_Init+0x4a>
		uint8_t sendBuffer[3] = { 0xBE, 0x08, 0x00};
 80010b8:	4a0b      	ldr	r2, [pc, #44]	@ (80010e8 <AHT20_Init+0x58>)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	4611      	mov	r1, r2
 80010c0:	8019      	strh	r1, [r3, #0]
 80010c2:	3302      	adds	r3, #2
 80010c4:	0c12      	lsrs	r2, r2, #16
 80010c6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendBuffer, 3, HAL_MAX_DELAY);
 80010c8:	1d3a      	adds	r2, r7, #4
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2303      	movs	r3, #3
 80010d2:	2170      	movs	r1, #112	@ 0x70
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <AHT20_Init+0x54>)
 80010d6:	f001 f8b3 	bl	8002240 <HAL_I2C_Master_Transmit>
	}
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200001fc 	.word	0x200001fc
 80010e8:	08009f68 	.word	0x08009f68

080010ec <AHT20_Measure>:
		data = (((uint32_t)readBuffer[3] & 0x0F) << 16) + ((uint32_t)readBuffer[2] << 8) + (uint32_t)readBuffer[5];
		*Temperature = data * 200.0f / (1 <<20) - 50;
	}
}

void AHT20_Measure(){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	static uint8_t sendBuffer[3] = {0xAC, 0x33, 0x00 };
	HAL_I2C_Master_Transmit_IT(&hi2c1, AHT20_ADDRESS, sendBuffer, 3);
 80010f0:	2303      	movs	r3, #3
 80010f2:	4a03      	ldr	r2, [pc, #12]	@ (8001100 <AHT20_Measure+0x14>)
 80010f4:	2170      	movs	r1, #112	@ 0x70
 80010f6:	4803      	ldr	r0, [pc, #12]	@ (8001104 <AHT20_Measure+0x18>)
 80010f8:	f001 fc0c 	bl	8002914 <HAL_I2C_Master_Transmit_IT>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	200001fc 	.word	0x200001fc

08001108 <AHT20_Get>:

void AHT20_Get(){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Receive_IT(&hi2c1, AHT20_ADDRESS, readBuffer , 6);
 800110c:	2306      	movs	r3, #6
 800110e:	4a03      	ldr	r2, [pc, #12]	@ (800111c <AHT20_Get+0x14>)
 8001110:	2170      	movs	r1, #112	@ 0x70
 8001112:	4803      	ldr	r0, [pc, #12]	@ (8001120 <AHT20_Get+0x18>)
 8001114:	f001 fc9e 	bl	8002a54 <HAL_I2C_Master_Receive_IT>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200001f4 	.word	0x200001f4
 8001120:	200001fc 	.word	0x200001fc

08001124 <AHT20_Analysis>:

void AHT20_Analysis(float *Temperature, float *Humidity){
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	if((readBuffer[0] & 0x80) == 0x00){
 800112e:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <AHT20_Analysis+0xa8>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b25b      	sxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	db45      	blt.n	80011c4 <AHT20_Analysis+0xa0>
		uint32_t data = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
		data = ((uint32_t)readBuffer[3] >> 4) + ((uint32_t)readBuffer[2] << 4) + ((uint32_t)readBuffer[3] << 12);
 800113c:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <AHT20_Analysis+0xa8>)
 800113e:	78db      	ldrb	r3, [r3, #3]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	b2db      	uxtb	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <AHT20_Analysis+0xa8>)
 8001148:	789b      	ldrb	r3, [r3, #2]
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	441a      	add	r2, r3
 800114e:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <AHT20_Analysis+0xa8>)
 8001150:	78db      	ldrb	r3, [r3, #3]
 8001152:	031b      	lsls	r3, r3, #12
 8001154:	4413      	add	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]
		*Humidity = data * 100.0f / (1 << 20);
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f7ff fdbb 	bl	8000cd4 <__aeabi_ui2f>
 800115e:	4603      	mov	r3, r0
 8001160:	491b      	ldr	r1, [pc, #108]	@ (80011d0 <AHT20_Analysis+0xac>)
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fe0e 	bl	8000d84 <__aeabi_fmul>
 8001168:	4603      	mov	r3, r0
 800116a:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff febc 	bl	8000eec <__aeabi_fdiv>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	601a      	str	r2, [r3, #0]

		data = (((uint32_t)readBuffer[3] & 0x0F) << 16) + ((uint32_t)readBuffer[2] << 8) + (uint32_t)readBuffer[5];
 800117c:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <AHT20_Analysis+0xa8>)
 800117e:	78db      	ldrb	r3, [r3, #3]
 8001180:	041b      	lsls	r3, r3, #16
 8001182:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <AHT20_Analysis+0xa8>)
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	4413      	add	r3, r2
 800118e:	4a0f      	ldr	r2, [pc, #60]	@ (80011cc <AHT20_Analysis+0xa8>)
 8001190:	7952      	ldrb	r2, [r2, #5]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
		*Temperature = data * 200.0f / (1 <<20) - 50;
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f7ff fd9c 	bl	8000cd4 <__aeabi_ui2f>
 800119c:	4603      	mov	r3, r0
 800119e:	490d      	ldr	r1, [pc, #52]	@ (80011d4 <AHT20_Analysis+0xb0>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fdef 	bl	8000d84 <__aeabi_fmul>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fe9d 	bl	8000eec <__aeabi_fdiv>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4908      	ldr	r1, [pc, #32]	@ (80011d8 <AHT20_Analysis+0xb4>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fcda 	bl	8000b70 <__aeabi_fsub>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	601a      	str	r2, [r3, #0]
	}
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200001f4 	.word	0x200001f4
 80011d0:	42c80000 	.word	0x42c80000
 80011d4:	43480000 	.word	0x43480000
 80011d8:	42480000 	.word	0x42480000

080011dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_GPIO_Init+0x40>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4a0d      	ldr	r2, [pc, #52]	@ (800121c <MX_GPIO_Init+0x40>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6193      	str	r3, [r2, #24]
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <MX_GPIO_Init+0x40>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <MX_GPIO_Init+0x40>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4a07      	ldr	r2, [pc, #28]	@ (800121c <MX_GPIO_Init+0x40>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	6193      	str	r3, [r2, #24]
 8001206:	4b05      	ldr	r3, [pc, #20]	@ (800121c <MX_GPIO_Init+0x40>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	40021000 	.word	0x40021000

08001220 <HAL_I2C_MasterTxCpltCallback>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "i2c.h"

/* USER CODE BEGIN 0 */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1){
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a05      	ldr	r2, [pc, #20]	@ (8001240 <HAL_I2C_MasterTxCpltCallback+0x20>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d102      	bne.n	8001236 <HAL_I2C_MasterTxCpltCallback+0x16>
		aht20State = 2;
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001232:	2202      	movs	r2, #2
 8001234:	701a      	strb	r2, [r3, #0]
	}
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	200001fc 	.word	0x200001fc
 8001244:	20000250 	.word	0x20000250

08001248 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1){
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <HAL_I2C_MasterRxCpltCallback+0x20>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d102      	bne.n	800125e <HAL_I2C_MasterRxCpltCallback+0x16>
		aht20State = 4;
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <HAL_I2C_MasterRxCpltCallback+0x24>)
 800125a:	2204      	movs	r2, #4
 800125c:	701a      	strb	r2, [r3, #0]
	}
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	200001fc 	.word	0x200001fc
 800126c:	20000250 	.word	0x20000250

08001270 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <MX_I2C1_Init+0x50>)
 8001276:	4a13      	ldr	r2, [pc, #76]	@ (80012c4 <MX_I2C1_Init+0x54>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_I2C1_Init+0x50>)
 800127c:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <MX_I2C1_Init+0x58>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <MX_I2C1_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <MX_I2C1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_I2C1_Init+0x50>)
 800128e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001292:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <MX_I2C1_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_I2C1_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <MX_I2C1_Init+0x50>)
 80012ae:	f000 fe6f 	bl	8001f90 <HAL_I2C_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012b8:	f000 f8f1 	bl	800149e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200001fc 	.word	0x200001fc
 80012c4:	40005400 	.word	0x40005400
 80012c8:	000186a0 	.word	0x000186a0

080012cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a1d      	ldr	r2, [pc, #116]	@ (800135c <HAL_I2C_MspInit+0x90>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d133      	bne.n	8001354 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001360 <HAL_I2C_MspInit+0x94>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001360 <HAL_I2C_MspInit+0x94>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <HAL_I2C_MspInit+0x94>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001304:	23c0      	movs	r3, #192	@ 0xc0
 8001306:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001308:	2312      	movs	r3, #18
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4619      	mov	r1, r3
 8001316:	4813      	ldr	r0, [pc, #76]	@ (8001364 <HAL_I2C_MspInit+0x98>)
 8001318:	f000 fcb6 	bl	8001c88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800131c:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <HAL_I2C_MspInit+0x94>)
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	4a0f      	ldr	r2, [pc, #60]	@ (8001360 <HAL_I2C_MspInit+0x94>)
 8001322:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001326:	61d3      	str	r3, [r2, #28]
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <HAL_I2C_MspInit+0x94>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	201f      	movs	r0, #31
 800133a:	f000 fbe8 	bl	8001b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800133e:	201f      	movs	r0, #31
 8001340:	f000 fc01 	bl	8001b46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2020      	movs	r0, #32
 800134a:	f000 fbe0 	bl	8001b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800134e:	2020      	movs	r0, #32
 8001350:	f000 fbf9 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40005400 	.word	0x40005400
 8001360:	40021000 	.word	0x40021000
 8001364:	40010c00 	.word	0x40010c00

08001368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b092      	sub	sp, #72	@ 0x48
 800136c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136e:	f000 fa71 	bl	8001854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001372:	f000 f859 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001376:	f7ff ff31 	bl	80011dc <MX_GPIO_Init>
  MX_I2C1_Init();
 800137a:	f7ff ff79 	bl	8001270 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800137e:	f000 f9cf 	bl	8001720 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  AHT20_Init();
 8001382:	f7ff fe85 	bl	8001090 <AHT20_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(aht20State == 0){
 8001386:	4b25      	ldr	r3, [pc, #148]	@ (800141c <main+0xb4>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d105      	bne.n	800139a <main+0x32>
		  AHT20_Measure();
 800138e:	f7ff fead 	bl	80010ec <AHT20_Measure>
		  aht20State = 1;
 8001392:	4b22      	ldr	r3, [pc, #136]	@ (800141c <main+0xb4>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	e7f5      	b.n	8001386 <main+0x1e>
	  }else if(aht20State == 2){
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <main+0xb4>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d108      	bne.n	80013b4 <main+0x4c>
		  HAL_Delay(75);
 80013a2:	204b      	movs	r0, #75	@ 0x4b
 80013a4:	f000 fab8 	bl	8001918 <HAL_Delay>
		  AHT20_Get();
 80013a8:	f7ff feae 	bl	8001108 <AHT20_Get>
		  aht20State = 3;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <main+0xb4>)
 80013ae:	2203      	movs	r2, #3
 80013b0:	701a      	strb	r2, [r3, #0]
 80013b2:	e7e8      	b.n	8001386 <main+0x1e>
	  }else if(aht20State == 4){
 80013b4:	4b19      	ldr	r3, [pc, #100]	@ (800141c <main+0xb4>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d1e4      	bne.n	8001386 <main+0x1e>
		  AHT20_Analysis(&temperature, &humidity);
 80013bc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80013c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff feac 	bl	8001124 <AHT20_Analysis>
		  sprintf(message,"溫度: %.1f 度C , 濕度: %.1f %%\r\n",temperature,humidity);
 80013cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f82a 	bl	8000428 <__aeabi_f2d>
 80013d4:	4604      	mov	r4, r0
 80013d6:	460d      	mov	r5, r1
 80013d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f824 	bl	8000428 <__aeabi_f2d>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	1d38      	adds	r0, r7, #4
 80013e6:	e9cd 2300 	strd	r2, r3, [sp]
 80013ea:	4622      	mov	r2, r4
 80013ec:	462b      	mov	r3, r5
 80013ee:	490c      	ldr	r1, [pc, #48]	@ (8001420 <main+0xb8>)
 80013f0:	f005 f980 	bl	80066f4 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe feaa 	bl	8000150 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	1d39      	adds	r1, r7, #4
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	4807      	ldr	r0, [pc, #28]	@ (8001424 <main+0xbc>)
 8001408:	f004 f872 	bl	80054f0 <HAL_UART_Transmit>

		  HAL_Delay(1000);
 800140c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001410:	f000 fa82 	bl	8001918 <HAL_Delay>
		  aht20State = 0;
 8001414:	4b01      	ldr	r3, [pc, #4]	@ (800141c <main+0xb4>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
	  if(aht20State == 0){
 800141a:	e7b4      	b.n	8001386 <main+0x1e>
 800141c:	20000250 	.word	0x20000250
 8001420:	08009f70 	.word	0x08009f70
 8001424:	20000258 	.word	0x20000258

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b090      	sub	sp, #64	@ 0x40
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 0318 	add.w	r3, r7, #24
 8001432:	2228      	movs	r2, #40	@ 0x28
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f005 f9bf 	bl	80067ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144e:	2301      	movs	r3, #1
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001452:	2310      	movs	r3, #16
 8001454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001456:	2300      	movs	r3, #0
 8001458:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	4618      	mov	r0, r3
 8001460:	f003 fbe6 	bl	8004c30 <HAL_RCC_OscConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800146a:	f000 f818 	bl	800149e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146e:	230f      	movs	r3, #15
 8001470:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fe54 	bl	8005134 <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001492:	f000 f804 	bl	800149e <Error_Handler>
  }
}
 8001496:	bf00      	nop
 8001498:	3740      	adds	r7, #64	@ 0x40
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a2:	b672      	cpsid	i
}
 80014a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a6:	bf00      	nop
 80014a8:	e7fd      	b.n	80014a6 <Error_Handler+0x8>
	...

080014ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <HAL_MspInit+0x5c>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	4a14      	ldr	r2, [pc, #80]	@ (8001508 <HAL_MspInit+0x5c>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6193      	str	r3, [r2, #24]
 80014be:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <HAL_MspInit+0x5c>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <HAL_MspInit+0x5c>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001508 <HAL_MspInit+0x5c>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d4:	61d3      	str	r3, [r2, #28]
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <HAL_MspInit+0x5c>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <HAL_MspInit+0x60>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4a04      	ldr	r2, [pc, #16]	@ (800150c <HAL_MspInit+0x60>)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000
 800150c:	40010000 	.word	0x40010000

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <NMI_Handler+0x4>

08001518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <MemManage_Handler+0x4>

08001528 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <UsageFault_Handler+0x4>

08001538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001560:	f000 f9be 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800156c:	4802      	ldr	r0, [pc, #8]	@ (8001578 <I2C1_EV_IRQHandler+0x10>)
 800156e:	f001 fb19 	bl	8002ba4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200001fc 	.word	0x200001fc

0800157c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001580:	4802      	ldr	r0, [pc, #8]	@ (800158c <I2C1_ER_IRQHandler+0x10>)
 8001582:	f001 fc62 	bl	8002e4a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200001fc 	.word	0x200001fc

08001590 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return 1;
 8001594:	2301      	movs	r3, #1
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <_kill>:

int _kill(int pid, int sig)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015a8:	f005 f95a 	bl	8006860 <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2216      	movs	r2, #22
 80015b0:	601a      	str	r2, [r3, #0]
  return -1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_exit>:

void _exit (int status)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015c6:	f04f 31ff 	mov.w	r1, #4294967295
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffe7 	bl	800159e <_kill>
  while (1) {}    /* Make sure we hang here */
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <_exit+0x12>

080015d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	e00a      	b.n	80015fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015e6:	f3af 8000 	nop.w
 80015ea:	4601      	mov	r1, r0
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	60ba      	str	r2, [r7, #8]
 80015f2:	b2ca      	uxtb	r2, r1
 80015f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	dbf0      	blt.n	80015e6 <_read+0x12>
  }

  return len;
 8001604:	687b      	ldr	r3, [r7, #4]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e009      	b.n	8001634 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	60ba      	str	r2, [r7, #8]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3301      	adds	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	dbf1      	blt.n	8001620 <_write+0x12>
  }
  return len;
 800163c:	687b      	ldr	r3, [r7, #4]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_close>:

int _close(int file)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800166c:	605a      	str	r2, [r3, #4]
  return 0;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <_isatty>:

int _isatty(int file)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
	...

080016a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b0:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <_sbrk+0x5c>)
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <_sbrk+0x60>)
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <_sbrk+0x64>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <_sbrk+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d207      	bcs.n	80016e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d8:	f005 f8c2 	bl	8006860 <__errno>
 80016dc:	4603      	mov	r3, r0
 80016de:	220c      	movs	r2, #12
 80016e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	e009      	b.n	80016fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a05      	ldr	r2, [pc, #20]	@ (800170c <_sbrk+0x64>)
 80016f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fa:	68fb      	ldr	r3, [r7, #12]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20005000 	.word	0x20005000
 8001708:	00000400 	.word	0x00000400
 800170c:	20000254 	.word	0x20000254
 8001710:	200003f0 	.word	0x200003f0

08001714 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001726:	4a12      	ldr	r2, [pc, #72]	@ (8001770 <MX_USART2_UART_Init+0x50>)
 8001728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800172a:	4b10      	ldr	r3, [pc, #64]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 800172c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001758:	f003 fe7a 	bl	8005450 <HAL_UART_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001762:	f7ff fe9c 	bl	800149e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000258 	.word	0x20000258
 8001770:	40004400 	.word	0x40004400

08001774 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a1b      	ldr	r2, [pc, #108]	@ (80017fc <HAL_UART_MspInit+0x88>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d12f      	bne.n	80017f4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001794:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <HAL_UART_MspInit+0x8c>)
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	4a19      	ldr	r2, [pc, #100]	@ (8001800 <HAL_UART_MspInit+0x8c>)
 800179a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179e:	61d3      	str	r3, [r2, #28]
 80017a0:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <HAL_UART_MspInit+0x8c>)
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ac:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <HAL_UART_MspInit+0x8c>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a13      	ldr	r2, [pc, #76]	@ (8001800 <HAL_UART_MspInit+0x8c>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <HAL_UART_MspInit+0x8c>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017c4:	2304      	movs	r3, #4
 80017c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	4619      	mov	r1, r3
 80017d6:	480b      	ldr	r0, [pc, #44]	@ (8001804 <HAL_UART_MspInit+0x90>)
 80017d8:	f000 fa56 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017dc:	2308      	movs	r3, #8
 80017de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	4619      	mov	r1, r3
 80017ee:	4805      	ldr	r0, [pc, #20]	@ (8001804 <HAL_UART_MspInit+0x90>)
 80017f0:	f000 fa4a 	bl	8001c88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40004400 	.word	0x40004400
 8001800:	40021000 	.word	0x40021000
 8001804:	40010800 	.word	0x40010800

08001808 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001808:	f7ff ff84 	bl	8001714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800180c:	480b      	ldr	r0, [pc, #44]	@ (800183c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800180e:	490c      	ldr	r1, [pc, #48]	@ (8001840 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001810:	4a0c      	ldr	r2, [pc, #48]	@ (8001844 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a09      	ldr	r2, [pc, #36]	@ (8001848 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001824:	4c09      	ldr	r4, [pc, #36]	@ (800184c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001832:	f005 f81b 	bl	800686c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001836:	f7ff fd97 	bl	8001368 <main>
  bx lr
 800183a:	4770      	bx	lr
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001844:	0800a400 	.word	0x0800a400
  ldr r2, =_sbss
 8001848:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800184c:	200003f0 	.word	0x200003f0

08001850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC1_2_IRQHandler>
	...

08001854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <HAL_Init+0x28>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	@ (800187c <HAL_Init+0x28>)
 800185e:	f043 0310 	orr.w	r3, r3, #16
 8001862:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f947 	bl	8001af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	200f      	movs	r0, #15
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fe1c 	bl	80014ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40022000 	.word	0x40022000

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f95f 	bl	8001b62 <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f927 	bl	8001b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	@ (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000004 	.word	0x20000004
 80018d8:	2000000c 	.word	0x2000000c
 80018dc:	20000008 	.word	0x20000008

080018e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_IncTick+0x1c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_IncTick+0x20>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a03      	ldr	r2, [pc, #12]	@ (8001900 <HAL_IncTick+0x20>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	2000000c 	.word	0x2000000c
 8001900:	200002a0 	.word	0x200002a0

08001904 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b02      	ldr	r3, [pc, #8]	@ (8001914 <HAL_GetTick+0x10>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	200002a0 	.word	0x200002a0

08001918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff fff0 	bl	8001904 <HAL_GetTick>
 8001924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d005      	beq.n	800193e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <HAL_Delay+0x44>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800193e:	bf00      	nop
 8001940:	f7ff ffe0 	bl	8001904 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	429a      	cmp	r2, r3
 800194e:	d8f7      	bhi.n	8001940 <HAL_Delay+0x28>
  {
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000000c 	.word	0x2000000c

08001960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800198c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0b      	blt.n	80019ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	4906      	ldr	r1, [pc, #24]	@ (80019f8 <__NVIC_EnableIRQ+0x34>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	2001      	movs	r0, #1
 80019e6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	@ (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	@ (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	@ 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac4:	d301      	bcc.n	8001aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00f      	b.n	8001aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <SysTick_Config+0x40>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f7ff ff90 	bl	80019fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <SysTick_Config+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae2:	4b04      	ldr	r3, [pc, #16]	@ (8001af4 <SysTick_Config+0x40>)
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff2d 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b20:	f7ff ff42 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	6978      	ldr	r0, [r7, #20]
 8001b2c:	f7ff ff90 	bl	8001a50 <NVIC_EncodePriority>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff5f 	bl	80019fc <__NVIC_SetPriority>
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff35 	bl	80019c4 <__NVIC_EnableIRQ>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffa2 	bl	8001ab4 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d005      	beq.n	8001ba0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2204      	movs	r2, #4
 8001b98:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	e051      	b.n	8001c44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 020e 	bic.w	r2, r2, #14
 8001bae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a22      	ldr	r2, [pc, #136]	@ (8001c50 <HAL_DMA_Abort_IT+0xd4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d029      	beq.n	8001c1e <HAL_DMA_Abort_IT+0xa2>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a21      	ldr	r2, [pc, #132]	@ (8001c54 <HAL_DMA_Abort_IT+0xd8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d022      	beq.n	8001c1a <HAL_DMA_Abort_IT+0x9e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c58 <HAL_DMA_Abort_IT+0xdc>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01a      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x98>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c5c <HAL_DMA_Abort_IT+0xe0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d012      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x92>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1c      	ldr	r2, [pc, #112]	@ (8001c60 <HAL_DMA_Abort_IT+0xe4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00a      	beq.n	8001c08 <HAL_DMA_Abort_IT+0x8c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c64 <HAL_DMA_Abort_IT+0xe8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d102      	bne.n	8001c02 <HAL_DMA_Abort_IT+0x86>
 8001bfc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c00:	e00e      	b.n	8001c20 <HAL_DMA_Abort_IT+0xa4>
 8001c02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c06:	e00b      	b.n	8001c20 <HAL_DMA_Abort_IT+0xa4>
 8001c08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c0c:	e008      	b.n	8001c20 <HAL_DMA_Abort_IT+0xa4>
 8001c0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c12:	e005      	b.n	8001c20 <HAL_DMA_Abort_IT+0xa4>
 8001c14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c18:	e002      	b.n	8001c20 <HAL_DMA_Abort_IT+0xa4>
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	e000      	b.n	8001c20 <HAL_DMA_Abort_IT+0xa4>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	4a11      	ldr	r2, [pc, #68]	@ (8001c68 <HAL_DMA_Abort_IT+0xec>)
 8001c22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
    } 
  }
  return status;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40020008 	.word	0x40020008
 8001c54:	4002001c 	.word	0x4002001c
 8001c58:	40020030 	.word	0x40020030
 8001c5c:	40020044 	.word	0x40020044
 8001c60:	40020058 	.word	0x40020058
 8001c64:	4002006c 	.word	0x4002006c
 8001c68:	40020000 	.word	0x40020000

08001c6c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c7a:	b2db      	uxtb	r3, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b08b      	sub	sp, #44	@ 0x2c
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9a:	e169      	b.n	8001f70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f040 8158 	bne.w	8001f6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4a9a      	ldr	r2, [pc, #616]	@ (8001f28 <HAL_GPIO_Init+0x2a0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d05e      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cc4:	4a98      	ldr	r2, [pc, #608]	@ (8001f28 <HAL_GPIO_Init+0x2a0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d875      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cca:	4a98      	ldr	r2, [pc, #608]	@ (8001f2c <HAL_GPIO_Init+0x2a4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d058      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cd0:	4a96      	ldr	r2, [pc, #600]	@ (8001f2c <HAL_GPIO_Init+0x2a4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d86f      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cd6:	4a96      	ldr	r2, [pc, #600]	@ (8001f30 <HAL_GPIO_Init+0x2a8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d052      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cdc:	4a94      	ldr	r2, [pc, #592]	@ (8001f30 <HAL_GPIO_Init+0x2a8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d869      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001ce2:	4a94      	ldr	r2, [pc, #592]	@ (8001f34 <HAL_GPIO_Init+0x2ac>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d04c      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001ce8:	4a92      	ldr	r2, [pc, #584]	@ (8001f34 <HAL_GPIO_Init+0x2ac>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d863      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cee:	4a92      	ldr	r2, [pc, #584]	@ (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d046      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a90      	ldr	r2, [pc, #576]	@ (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d85d      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cfa:	2b12      	cmp	r3, #18
 8001cfc:	d82a      	bhi.n	8001d54 <HAL_GPIO_Init+0xcc>
 8001cfe:	2b12      	cmp	r3, #18
 8001d00:	d859      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001d02:	a201      	add	r2, pc, #4	@ (adr r2, 8001d08 <HAL_GPIO_Init+0x80>)
 8001d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d08:	08001d83 	.word	0x08001d83
 8001d0c:	08001d5d 	.word	0x08001d5d
 8001d10:	08001d6f 	.word	0x08001d6f
 8001d14:	08001db1 	.word	0x08001db1
 8001d18:	08001db7 	.word	0x08001db7
 8001d1c:	08001db7 	.word	0x08001db7
 8001d20:	08001db7 	.word	0x08001db7
 8001d24:	08001db7 	.word	0x08001db7
 8001d28:	08001db7 	.word	0x08001db7
 8001d2c:	08001db7 	.word	0x08001db7
 8001d30:	08001db7 	.word	0x08001db7
 8001d34:	08001db7 	.word	0x08001db7
 8001d38:	08001db7 	.word	0x08001db7
 8001d3c:	08001db7 	.word	0x08001db7
 8001d40:	08001db7 	.word	0x08001db7
 8001d44:	08001db7 	.word	0x08001db7
 8001d48:	08001db7 	.word	0x08001db7
 8001d4c:	08001d65 	.word	0x08001d65
 8001d50:	08001d79 	.word	0x08001d79
 8001d54:	4a79      	ldr	r2, [pc, #484]	@ (8001f3c <HAL_GPIO_Init+0x2b4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d013      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d5a:	e02c      	b.n	8001db6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	623b      	str	r3, [r7, #32]
          break;
 8001d62:	e029      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	623b      	str	r3, [r7, #32]
          break;
 8001d6c:	e024      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	3308      	adds	r3, #8
 8001d74:	623b      	str	r3, [r7, #32]
          break;
 8001d76:	e01f      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	330c      	adds	r3, #12
 8001d7e:	623b      	str	r3, [r7, #32]
          break;
 8001d80:	e01a      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	623b      	str	r3, [r7, #32]
          break;
 8001d8e:	e013      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d98:	2308      	movs	r3, #8
 8001d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	611a      	str	r2, [r3, #16]
          break;
 8001da2:	e009      	b.n	8001db8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da4:	2308      	movs	r3, #8
 8001da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	615a      	str	r2, [r3, #20]
          break;
 8001dae:	e003      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
          break;
 8001db4:	e000      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          break;
 8001db6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2bff      	cmp	r3, #255	@ 0xff
 8001dbc:	d801      	bhi.n	8001dc2 <HAL_GPIO_Init+0x13a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	e001      	b.n	8001dc6 <HAL_GPIO_Init+0x13e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	2bff      	cmp	r3, #255	@ 0xff
 8001dcc:	d802      	bhi.n	8001dd4 <HAL_GPIO_Init+0x14c>
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x152>
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	3b08      	subs	r3, #8
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	210f      	movs	r1, #15
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	6a39      	ldr	r1, [r7, #32]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	431a      	orrs	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80b1 	beq.w	8001f6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e08:	4b4d      	ldr	r3, [pc, #308]	@ (8001f40 <HAL_GPIO_Init+0x2b8>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f40 <HAL_GPIO_Init+0x2b8>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6193      	str	r3, [r2, #24]
 8001e14:	4b4a      	ldr	r3, [pc, #296]	@ (8001f40 <HAL_GPIO_Init+0x2b8>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e20:	4a48      	ldr	r2, [pc, #288]	@ (8001f44 <HAL_GPIO_Init+0x2bc>)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a40      	ldr	r2, [pc, #256]	@ (8001f48 <HAL_GPIO_Init+0x2c0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_GPIO_Init+0x1ec>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f4c <HAL_GPIO_Init+0x2c4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00d      	beq.n	8001e70 <HAL_GPIO_Init+0x1e8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a3e      	ldr	r2, [pc, #248]	@ (8001f50 <HAL_GPIO_Init+0x2c8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <HAL_GPIO_Init+0x1e4>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f54 <HAL_GPIO_Init+0x2cc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_GPIO_Init+0x1e0>
 8001e64:	2303      	movs	r3, #3
 8001e66:	e006      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e68:	2304      	movs	r3, #4
 8001e6a:	e004      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e002      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e74:	2300      	movs	r3, #0
 8001e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e78:	f002 0203 	and.w	r2, r2, #3
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	4093      	lsls	r3, r2
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e86:	492f      	ldr	r1, [pc, #188]	@ (8001f44 <HAL_GPIO_Init+0x2bc>)
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	492c      	ldr	r1, [pc, #176]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eae:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4928      	ldr	r1, [pc, #160]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ec8:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	4922      	ldr	r1, [pc, #136]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60cb      	str	r3, [r1, #12]
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ed6:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	491e      	ldr	r1, [pc, #120]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	4918      	ldr	r1, [pc, #96]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	4914      	ldr	r1, [pc, #80]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d021      	beq.n	8001f5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f18:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	490e      	ldr	r1, [pc, #56]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
 8001f24:	e021      	b.n	8001f6a <HAL_GPIO_Init+0x2e2>
 8001f26:	bf00      	nop
 8001f28:	10320000 	.word	0x10320000
 8001f2c:	10310000 	.word	0x10310000
 8001f30:	10220000 	.word	0x10220000
 8001f34:	10210000 	.word	0x10210000
 8001f38:	10120000 	.word	0x10120000
 8001f3c:	10110000 	.word	0x10110000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40010000 	.word	0x40010000
 8001f48:	40010800 	.word	0x40010800
 8001f4c:	40010c00 	.word	0x40010c00
 8001f50:	40011000 	.word	0x40011000
 8001f54:	40011400 	.word	0x40011400
 8001f58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <HAL_GPIO_Init+0x304>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	4909      	ldr	r1, [pc, #36]	@ (8001f8c <HAL_GPIO_Init+0x304>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f47f ae8e 	bne.w	8001c9c <HAL_GPIO_Init+0x14>
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	372c      	adds	r7, #44	@ 0x2c
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40010400 	.word	0x40010400

08001f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e12b      	b.n	80021fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff f988 	bl	80012cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2224      	movs	r2, #36	@ 0x24
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ff4:	f003 f9e6 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 8001ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a81      	ldr	r2, [pc, #516]	@ (8002204 <HAL_I2C_Init+0x274>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d807      	bhi.n	8002014 <HAL_I2C_Init+0x84>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4a80      	ldr	r2, [pc, #512]	@ (8002208 <HAL_I2C_Init+0x278>)
 8002008:	4293      	cmp	r3, r2
 800200a:	bf94      	ite	ls
 800200c:	2301      	movls	r3, #1
 800200e:	2300      	movhi	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	e006      	b.n	8002022 <HAL_I2C_Init+0x92>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4a7d      	ldr	r2, [pc, #500]	@ (800220c <HAL_I2C_Init+0x27c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	bf94      	ite	ls
 800201c:	2301      	movls	r3, #1
 800201e:	2300      	movhi	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0e7      	b.n	80021fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4a78      	ldr	r2, [pc, #480]	@ (8002210 <HAL_I2C_Init+0x280>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0c9b      	lsrs	r3, r3, #18
 8002034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	430a      	orrs	r2, r1
 8002048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a6a      	ldr	r2, [pc, #424]	@ (8002204 <HAL_I2C_Init+0x274>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d802      	bhi.n	8002064 <HAL_I2C_Init+0xd4>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	3301      	adds	r3, #1
 8002062:	e009      	b.n	8002078 <HAL_I2C_Init+0xe8>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	4a69      	ldr	r2, [pc, #420]	@ (8002214 <HAL_I2C_Init+0x284>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	099b      	lsrs	r3, r3, #6
 8002076:	3301      	adds	r3, #1
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	430b      	orrs	r3, r1
 800207e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800208a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	495c      	ldr	r1, [pc, #368]	@ (8002204 <HAL_I2C_Init+0x274>)
 8002094:	428b      	cmp	r3, r1
 8002096:	d819      	bhi.n	80020cc <HAL_I2C_Init+0x13c>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1e59      	subs	r1, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a6:	1c59      	adds	r1, r3, #1
 80020a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020ac:	400b      	ands	r3, r1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_I2C_Init+0x138>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1e59      	subs	r1, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c6:	e051      	b.n	800216c <HAL_I2C_Init+0x1dc>
 80020c8:	2304      	movs	r3, #4
 80020ca:	e04f      	b.n	800216c <HAL_I2C_Init+0x1dc>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d111      	bne.n	80020f8 <HAL_I2C_Init+0x168>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1e58      	subs	r0, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6859      	ldr	r1, [r3, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	440b      	add	r3, r1
 80020e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	e012      	b.n	800211e <HAL_I2C_Init+0x18e>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1e58      	subs	r0, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	0099      	lsls	r1, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	fbb0 f3f3 	udiv	r3, r0, r3
 800210e:	3301      	adds	r3, #1
 8002110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Init+0x196>
 8002122:	2301      	movs	r3, #1
 8002124:	e022      	b.n	800216c <HAL_I2C_Init+0x1dc>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10e      	bne.n	800214c <HAL_I2C_Init+0x1bc>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1e58      	subs	r0, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	440b      	add	r3, r1
 800213c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002140:	3301      	adds	r3, #1
 8002142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800214a:	e00f      	b.n	800216c <HAL_I2C_Init+0x1dc>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1e58      	subs	r0, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	0099      	lsls	r1, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002162:	3301      	adds	r3, #1
 8002164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002168:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	6809      	ldr	r1, [r1, #0]
 8002170:	4313      	orrs	r3, r2
 8002172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800219a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6911      	ldr	r1, [r2, #16]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68d2      	ldr	r2, [r2, #12]
 80021a6:	4311      	orrs	r1, r2
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	430b      	orrs	r3, r1
 80021ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	000186a0 	.word	0x000186a0
 8002208:	001e847f 	.word	0x001e847f
 800220c:	003d08ff 	.word	0x003d08ff
 8002210:	431bde83 	.word	0x431bde83
 8002214:	10624dd3 	.word	0x10624dd3

08002218 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222a:	2b80      	cmp	r3, #128	@ 0x80
 800222c:	d103      	bne.n	8002236 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  }
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	461a      	mov	r2, r3
 800224c:	460b      	mov	r3, r1
 800224e:	817b      	strh	r3, [r7, #10]
 8002250:	4613      	mov	r3, r2
 8002252:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff fb56 	bl	8001904 <HAL_GetTick>
 8002258:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b20      	cmp	r3, #32
 8002264:	f040 80e0 	bne.w	8002428 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2319      	movs	r3, #25
 800226e:	2201      	movs	r2, #1
 8002270:	4970      	ldr	r1, [pc, #448]	@ (8002434 <HAL_I2C_Master_Transmit+0x1f4>)
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f002 fa5a 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800227e:	2302      	movs	r3, #2
 8002280:	e0d3      	b.n	800242a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_I2C_Master_Transmit+0x50>
 800228c:	2302      	movs	r3, #2
 800228e:	e0cc      	b.n	800242a <HAL_I2C_Master_Transmit+0x1ea>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d007      	beq.n	80022b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0201 	orr.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2221      	movs	r2, #33	@ 0x21
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2210      	movs	r2, #16
 80022d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	893a      	ldrh	r2, [r7, #8]
 80022e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a50      	ldr	r2, [pc, #320]	@ (8002438 <HAL_I2C_Master_Transmit+0x1f8>)
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022f8:	8979      	ldrh	r1, [r7, #10]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	6a3a      	ldr	r2, [r7, #32]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f002 f81c 	bl	800433c <I2C_MasterRequestWrite>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e08d      	b.n	800242a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002324:	e066      	b.n	80023f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	6a39      	ldr	r1, [r7, #32]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f002 fb18 	bl	8004960 <I2C_WaitOnTXEFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00d      	beq.n	8002352 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	2b04      	cmp	r3, #4
 800233c:	d107      	bne.n	800234e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800234c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e06b      	b.n	800242a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002356:	781a      	ldrb	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b04      	cmp	r3, #4
 800238e:	d11b      	bne.n	80023c8 <HAL_I2C_Master_Transmit+0x188>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	d017      	beq.n	80023c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	6a39      	ldr	r1, [r7, #32]
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f002 fb0f 	bl	80049f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00d      	beq.n	80023f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d107      	bne.n	80023f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e01a      	b.n	800242a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d194      	bne.n	8002326 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800240a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	e000      	b.n	800242a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002428:	2302      	movs	r3, #2
  }
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	00100002 	.word	0x00100002
 8002438:	ffff0000 	.word	0xffff0000

0800243c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08c      	sub	sp, #48	@ 0x30
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	461a      	mov	r2, r3
 8002448:	460b      	mov	r3, r1
 800244a:	817b      	strh	r3, [r7, #10]
 800244c:	4613      	mov	r3, r2
 800244e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002454:	f7ff fa56 	bl	8001904 <HAL_GetTick>
 8002458:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b20      	cmp	r3, #32
 8002464:	f040 824b 	bne.w	80028fe <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2319      	movs	r3, #25
 800246e:	2201      	movs	r2, #1
 8002470:	497f      	ldr	r1, [pc, #508]	@ (8002670 <HAL_I2C_Master_Receive+0x234>)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f002 f95a 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800247e:	2302      	movs	r3, #2
 8002480:	e23e      	b.n	8002900 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_I2C_Master_Receive+0x54>
 800248c:	2302      	movs	r3, #2
 800248e:	e237      	b.n	8002900 <HAL_I2C_Master_Receive+0x4c4>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d007      	beq.n	80024b6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2222      	movs	r2, #34	@ 0x22
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2210      	movs	r2, #16
 80024d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	893a      	ldrh	r2, [r7, #8]
 80024e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4a5f      	ldr	r2, [pc, #380]	@ (8002674 <HAL_I2C_Master_Receive+0x238>)
 80024f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024f8:	8979      	ldrh	r1, [r7, #10]
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f001 ff9e 	bl	8004440 <I2C_MasterRequestRead>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e1f8      	b.n	8002900 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	2b00      	cmp	r3, #0
 8002514:	d113      	bne.n	800253e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e1cc      	b.n	80028d8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002542:	2b01      	cmp	r3, #1
 8002544:	d11e      	bne.n	8002584 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002554:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002556:	b672      	cpsid	i
}
 8002558:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002580:	b662      	cpsie	i
}
 8002582:	e035      	b.n	80025f0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002588:	2b02      	cmp	r3, #2
 800258a:	d11e      	bne.n	80025ca <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800259a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800259c:	b672      	cpsid	i
}
 800259e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025c6:	b662      	cpsie	i
}
 80025c8:	e012      	b.n	80025f0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80025f0:	e172      	b.n	80028d8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	f200 811f 	bhi.w	800283a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002600:	2b01      	cmp	r3, #1
 8002602:	d123      	bne.n	800264c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002606:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f002 fa6b 	bl	8004ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e173      	b.n	8002900 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800264a:	e145      	b.n	80028d8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002650:	2b02      	cmp	r3, #2
 8002652:	d152      	bne.n	80026fa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265a:	2200      	movs	r2, #0
 800265c:	4906      	ldr	r1, [pc, #24]	@ (8002678 <HAL_I2C_Master_Receive+0x23c>)
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f002 f864 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e148      	b.n	8002900 <HAL_I2C_Master_Receive+0x4c4>
 800266e:	bf00      	nop
 8002670:	00100002 	.word	0x00100002
 8002674:	ffff0000 	.word	0xffff0000
 8002678:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800267c:	b672      	cpsid	i
}
 800267e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800268e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026c2:	b662      	cpsie	i
}
 80026c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026f8:	e0ee      	b.n	80028d8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002700:	2200      	movs	r2, #0
 8002702:	4981      	ldr	r1, [pc, #516]	@ (8002908 <HAL_I2C_Master_Receive+0x4cc>)
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f002 f811 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0f5      	b.n	8002900 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002722:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002724:	b672      	cpsid	i
}
 8002726:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800275a:	4b6c      	ldr	r3, [pc, #432]	@ (800290c <HAL_I2C_Master_Receive+0x4d0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	08db      	lsrs	r3, r3, #3
 8002760:	4a6b      	ldr	r2, [pc, #428]	@ (8002910 <HAL_I2C_Master_Receive+0x4d4>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	0a1a      	lsrs	r2, r3, #8
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	00da      	lsls	r2, r3, #3
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	3b01      	subs	r3, #1
 8002778:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d118      	bne.n	80027b2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	f043 0220 	orr.w	r2, r3, #32
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80027a2:	b662      	cpsie	i
}
 80027a4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e0a6      	b.n	8002900 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d1d9      	bne.n	8002774 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002802:	b662      	cpsie	i
}
 8002804:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002838:	e04e      	b.n	80028d8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800283c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f002 f950 	bl	8004ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e058      	b.n	8002900 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b04      	cmp	r3, #4
 800288c:	d124      	bne.n	80028d8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002892:	2b03      	cmp	r3, #3
 8002894:	d107      	bne.n	80028a6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028a4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f47f ae88 	bne.w	80025f2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e000      	b.n	8002900 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80028fe:	2302      	movs	r3, #2
  }
}
 8002900:	4618      	mov	r0, r3
 8002902:	3728      	adds	r7, #40	@ 0x28
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	00010004 	.word	0x00010004
 800290c:	20000004 	.word	0x20000004
 8002910:	14f8b589 	.word	0x14f8b589

08002914 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	461a      	mov	r2, r3
 8002920:	460b      	mov	r3, r1
 8002922:	817b      	strh	r3, [r7, #10]
 8002924:	4613      	mov	r3, r2
 8002926:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b20      	cmp	r3, #32
 8002936:	f040 8081 	bne.w	8002a3c <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800293a:	4b43      	ldr	r3, [pc, #268]	@ (8002a48 <HAL_I2C_Master_Transmit_IT+0x134>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	08db      	lsrs	r3, r3, #3
 8002940:	4a42      	ldr	r2, [pc, #264]	@ (8002a4c <HAL_I2C_Master_Transmit_IT+0x138>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	0a1a      	lsrs	r2, r3, #8
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	009a      	lsls	r2, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3b01      	subs	r3, #1
 8002958:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d112      	bne.n	8002986 <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002982:	2302      	movs	r3, #2
 8002984:	e05b      	b.n	8002a3e <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b02      	cmp	r3, #2
 8002992:	d0df      	beq.n	8002954 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_I2C_Master_Transmit_IT+0x8e>
 800299e:	2302      	movs	r3, #2
 80029a0:	e04d      	b.n	8002a3e <HAL_I2C_Master_Transmit_IT+0x12a>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d007      	beq.n	80029c8 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2221      	movs	r2, #33	@ 0x21
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2210      	movs	r2, #16
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	893a      	ldrh	r2, [r7, #8]
 80029f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a12      	ldr	r2, [pc, #72]	@ (8002a50 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8002a08:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002a0a:	897a      	ldrh	r2, [r7, #10]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002a26:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a36:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e000      	b.n	8002a3e <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	20000004 	.word	0x20000004
 8002a4c:	14f8b589 	.word	0x14f8b589
 8002a50:	ffff0000 	.word	0xffff0000

08002a54 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	460b      	mov	r3, r1
 8002a62:	817b      	strh	r3, [r7, #10]
 8002a64:	4613      	mov	r3, r2
 8002a66:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	f040 8089 	bne.w	8002b8c <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a7a:	4b47      	ldr	r3, [pc, #284]	@ (8002b98 <HAL_I2C_Master_Receive_IT+0x144>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	08db      	lsrs	r3, r3, #3
 8002a80:	4a46      	ldr	r2, [pc, #280]	@ (8002b9c <HAL_I2C_Master_Receive_IT+0x148>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0a1a      	lsrs	r2, r3, #8
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009a      	lsls	r2, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d112      	bne.n	8002ac6 <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f043 0220 	orr.w	r2, r3, #32
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e063      	b.n	8002b8e <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d0df      	beq.n	8002a94 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_I2C_Master_Receive_IT+0x8e>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e055      	b.n	8002b8e <HAL_I2C_Master_Receive_IT+0x13a>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d007      	beq.n	8002b08 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2222      	movs	r2, #34	@ 0x22
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2210      	movs	r2, #16
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	893a      	ldrh	r2, [r7, #8]
 8002b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <HAL_I2C_Master_Receive_IT+0x14c>)
 8002b48:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002b4a:	897a      	ldrh	r2, [r7, #10]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	645a      	str	r2, [r3, #68]	@ 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002b66:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b76:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b86:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e000      	b.n	8002b8e <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	20000004 	.word	0x20000004
 8002b9c:	14f8b589 	.word	0x14f8b589
 8002ba0:	ffff0000 	.word	0xffff0000

08002ba4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bc4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bcc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	2b10      	cmp	r3, #16
 8002bd2:	d003      	beq.n	8002bdc <HAL_I2C_EV_IRQHandler+0x38>
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b40      	cmp	r3, #64	@ 0x40
 8002bd8:	f040 80b1 	bne.w	8002d3e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10d      	bne.n	8002c12 <HAL_I2C_EV_IRQHandler+0x6e>
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002bfc:	d003      	beq.n	8002c06 <HAL_I2C_EV_IRQHandler+0x62>
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_EV_IRQHandler+0x66>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_I2C_EV_IRQHandler+0x68>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f000 8114 	beq.w	8002e3a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <HAL_I2C_EV_IRQHandler+0x90>
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f001 ffe7 	bl	8004bfa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fd62 	bl	80036f6 <I2C_Master_SB>
 8002c32:	e083      	b.n	8002d3c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_I2C_EV_IRQHandler+0xac>
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fdd9 	bl	8003800 <I2C_Master_ADD10>
 8002c4e:	e075      	b.n	8002d3c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <HAL_I2C_EV_IRQHandler+0xc8>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fdf4 	bl	8003852 <I2C_Master_ADDR>
 8002c6a:	e067      	b.n	8002d3c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d036      	beq.n	8002ce4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c84:	f000 80db 	beq.w	8002e3e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00d      	beq.n	8002cae <HAL_I2C_EV_IRQHandler+0x10a>
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_I2C_EV_IRQHandler+0x10a>
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d103      	bne.n	8002cae <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f9c2 	bl	8003030 <I2C_MasterTransmit_TXE>
 8002cac:	e046      	b.n	8002d3c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80c2 	beq.w	8002e3e <HAL_I2C_EV_IRQHandler+0x29a>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80bc 	beq.w	8002e3e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002cc6:	7bbb      	ldrb	r3, [r7, #14]
 8002cc8:	2b21      	cmp	r3, #33	@ 0x21
 8002cca:	d103      	bne.n	8002cd4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fa4b 	bl	8003168 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cd2:	e0b4      	b.n	8002e3e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b40      	cmp	r3, #64	@ 0x40
 8002cd8:	f040 80b1 	bne.w	8002e3e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fab9 	bl	8003254 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ce2:	e0ac      	b.n	8002e3e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cf2:	f000 80a4 	beq.w	8002e3e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00d      	beq.n	8002d1c <HAL_I2C_EV_IRQHandler+0x178>
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_I2C_EV_IRQHandler+0x178>
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d103      	bne.n	8002d1c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fb35 	bl	8003384 <I2C_MasterReceive_RXNE>
 8002d1a:	e00f      	b.n	8002d3c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 808b 	beq.w	8002e3e <HAL_I2C_EV_IRQHandler+0x29a>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8085 	beq.w	8002e3e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fbed 	bl	8003514 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d3a:	e080      	b.n	8002e3e <HAL_I2C_EV_IRQHandler+0x29a>
 8002d3c:	e07f      	b.n	8002e3e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d004      	beq.n	8002d50 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e007      	b.n	8002d60 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d011      	beq.n	8002d8e <HAL_I2C_EV_IRQHandler+0x1ea>
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00c      	beq.n	8002d8e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002d84:	69b9      	ldr	r1, [r7, #24]
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 ffba 	bl	8003d00 <I2C_Slave_ADDR>
 8002d8c:	e05a      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_I2C_EV_IRQHandler+0x206>
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fff4 	bl	8003d90 <I2C_Slave_STOPF>
 8002da8:	e04c      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002daa:	7bbb      	ldrb	r3, [r7, #14]
 8002dac:	2b21      	cmp	r3, #33	@ 0x21
 8002dae:	d002      	beq.n	8002db6 <HAL_I2C_EV_IRQHandler+0x212>
 8002db0:	7bbb      	ldrb	r3, [r7, #14]
 8002db2:	2b29      	cmp	r3, #41	@ 0x29
 8002db4:	d120      	bne.n	8002df8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00d      	beq.n	8002ddc <HAL_I2C_EV_IRQHandler+0x238>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <HAL_I2C_EV_IRQHandler+0x238>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d103      	bne.n	8002ddc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fed7 	bl	8003b88 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dda:	e032      	b.n	8002e42 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d02d      	beq.n	8002e42 <HAL_I2C_EV_IRQHandler+0x29e>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d028      	beq.n	8002e42 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 ff06 	bl	8003c02 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002df6:	e024      	b.n	8002e42 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00d      	beq.n	8002e1e <HAL_I2C_EV_IRQHandler+0x27a>
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_I2C_EV_IRQHandler+0x27a>
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 ff13 	bl	8003c42 <I2C_SlaveReceive_RXNE>
 8002e1c:	e012      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00d      	beq.n	8002e44 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 ff43 	bl	8003cbe <I2C_SlaveReceive_BTF>
 8002e38:	e004      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002e3a:	bf00      	nop
 8002e3c:	e002      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e3e:	bf00      	nop
 8002e40:	e000      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e42:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b08a      	sub	sp, #40	@ 0x28
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e6c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d015      	beq.n	8002ea4 <HAL_I2C_ER_IRQHandler+0x5a>
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d010      	beq.n	8002ea4 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002e92:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ea2:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <HAL_I2C_ER_IRQHandler+0x80>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	f043 0302 	orr.w	r3, r3, #2
 8002ebe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002ec8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d03e      	beq.n	8002f52 <HAL_I2C_ER_IRQHandler+0x108>
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d039      	beq.n	8002f52 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8002ede:	7efb      	ldrb	r3, [r7, #27]
 8002ee0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002ef8:	7ebb      	ldrb	r3, [r7, #26]
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d112      	bne.n	8002f24 <HAL_I2C_ER_IRQHandler+0xda>
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10f      	bne.n	8002f24 <HAL_I2C_ER_IRQHandler+0xda>
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	2b21      	cmp	r3, #33	@ 0x21
 8002f08:	d008      	beq.n	8002f1c <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	2b29      	cmp	r3, #41	@ 0x29
 8002f0e:	d005      	beq.n	8002f1c <HAL_I2C_ER_IRQHandler+0xd2>
 8002f10:	7cfb      	ldrb	r3, [r7, #19]
 8002f12:	2b28      	cmp	r3, #40	@ 0x28
 8002f14:	d106      	bne.n	8002f24 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b21      	cmp	r3, #33	@ 0x21
 8002f1a:	d103      	bne.n	8002f24 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f001 f867 	bl	8003ff0 <I2C_Slave_AF>
 8002f22:	e016      	b.n	8002f52 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f2c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f36:	7efb      	ldrb	r3, [r7, #27]
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d002      	beq.n	8002f42 <HAL_I2C_ER_IRQHandler+0xf8>
 8002f3c:	7efb      	ldrb	r3, [r7, #27]
 8002f3e:	2b40      	cmp	r3, #64	@ 0x40
 8002f40:	d107      	bne.n	8002f52 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f50:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00d      	beq.n	8002f78 <HAL_I2C_ER_IRQHandler+0x12e>
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	f043 0308 	orr.w	r3, r3, #8
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002f76:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f001 f8a4 	bl	80040d8 <I2C_ITError>
  }
}
 8002f90:	bf00      	nop
 8002f92:	3728      	adds	r7, #40	@ 0x28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	70fb      	strb	r3, [r7, #3]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr

08002ffa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800303e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003046:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003052:	2b00      	cmp	r3, #0
 8003054:	d150      	bne.n	80030f8 <I2C_MasterTransmit_TXE+0xc8>
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b21      	cmp	r3, #33	@ 0x21
 800305a:	d14d      	bne.n	80030f8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b08      	cmp	r3, #8
 8003060:	d01d      	beq.n	800309e <I2C_MasterTransmit_TXE+0x6e>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b20      	cmp	r3, #32
 8003066:	d01a      	beq.n	800309e <I2C_MasterTransmit_TXE+0x6e>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800306e:	d016      	beq.n	800309e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800307e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2211      	movs	r2, #17
 8003084:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe f8c2 	bl	8001220 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800309c:	e060      	b.n	8003160 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030ac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030bc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b40      	cmp	r3, #64	@ 0x40
 80030d6:	d107      	bne.n	80030e8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ff81 	bl	8002fe8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030e6:	e03b      	b.n	8003160 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7fe f895 	bl	8001220 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030f6:	e033      	b.n	8003160 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b21      	cmp	r3, #33	@ 0x21
 80030fc:	d005      	beq.n	800310a <I2C_MasterTransmit_TXE+0xda>
 80030fe:	7bbb      	ldrb	r3, [r7, #14]
 8003100:	2b40      	cmp	r3, #64	@ 0x40
 8003102:	d12d      	bne.n	8003160 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b22      	cmp	r3, #34	@ 0x22
 8003108:	d12a      	bne.n	8003160 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d108      	bne.n	8003126 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003122:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003124:	e01c      	b.n	8003160 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b40      	cmp	r3, #64	@ 0x40
 8003130:	d103      	bne.n	800313a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f88e 	bl	8003254 <I2C_MemoryTransmit_TXE_BTF>
}
 8003138:	e012      	b.n	8003160 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800315e:	e7ff      	b.n	8003160 <I2C_MasterTransmit_TXE+0x130>
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003174:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b21      	cmp	r3, #33	@ 0x21
 8003180:	d164      	bne.n	800324c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d012      	beq.n	80031b2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80031b0:	e04c      	b.n	800324c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d01d      	beq.n	80031f4 <I2C_MasterTransmit_BTF+0x8c>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d01a      	beq.n	80031f4 <I2C_MasterTransmit_BTF+0x8c>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031c4:	d016      	beq.n	80031f4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031d4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2211      	movs	r2, #17
 80031da:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7fe f817 	bl	8001220 <HAL_I2C_MasterTxCpltCallback>
}
 80031f2:	e02b      	b.n	800324c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003202:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003212:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b40      	cmp	r3, #64	@ 0x40
 800322c:	d107      	bne.n	800323e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff fed6 	bl	8002fe8 <HAL_I2C_MemTxCpltCallback>
}
 800323c:	e006      	b.n	800324c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd ffea 	bl	8001220 <HAL_I2C_MasterTxCpltCallback>
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003262:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003268:	2b00      	cmp	r3, #0
 800326a:	d11d      	bne.n	80032a8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10b      	bne.n	800328c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003278:	b2da      	uxtb	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003284:	1c9a      	adds	r2, r3, #2
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800328a:	e077      	b.n	800337c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003290:	b29b      	uxth	r3, r3
 8003292:	121b      	asrs	r3, r3, #8
 8003294:	b2da      	uxtb	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80032a6:	e069      	b.n	800337c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d10b      	bne.n	80032c8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80032c6:	e059      	b.n	800337c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d152      	bne.n	8003376 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b22      	cmp	r3, #34	@ 0x22
 80032d4:	d10d      	bne.n	80032f2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80032f0:	e044      	b.n	800337c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d015      	beq.n	8003328 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b21      	cmp	r3, #33	@ 0x21
 8003300:	d112      	bne.n	8003328 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	781a      	ldrb	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003326:	e029      	b.n	800337c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d124      	bne.n	800337c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b21      	cmp	r3, #33	@ 0x21
 8003336:	d121      	bne.n	800337c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003346:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003356:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff fe3a 	bl	8002fe8 <HAL_I2C_MemTxCpltCallback>
}
 8003374:	e002      	b.n	800337c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe ff4e 	bl	8002218 <I2C_Flush_DR>
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b22      	cmp	r3, #34	@ 0x22
 8003396:	f040 80b9 	bne.w	800350c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d921      	bls.n	80033f2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b03      	cmp	r3, #3
 80033dc:	f040 8096 	bne.w	800350c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ee:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80033f0:	e08c      	b.n	800350c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d07f      	beq.n	80034fa <I2C_MasterReceive_RXNE+0x176>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d002      	beq.n	8003406 <I2C_MasterReceive_RXNE+0x82>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d179      	bne.n	80034fa <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f001 fb3a 	bl	8004a80 <I2C_WaitOnSTOPRequestThroughIT>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d14c      	bne.n	80034ac <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003420:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003430:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b40      	cmp	r3, #64	@ 0x40
 800346a:	d10a      	bne.n	8003482 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff fdbd 	bl	8002ffa <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003480:	e044      	b.n	800350c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b08      	cmp	r3, #8
 800348e:	d002      	beq.n	8003496 <I2C_MasterReceive_RXNE+0x112>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b20      	cmp	r3, #32
 8003494:	d103      	bne.n	800349e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
 800349c:	e002      	b.n	80034a4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2212      	movs	r2, #18
 80034a2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7fd fecf 	bl	8001248 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034aa:	e02f      	b.n	800350c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fd8a 	bl	800300c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034f8:	e008      	b.n	800350c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003508:	605a      	str	r2, [r3, #4]
}
 800350a:	e7ff      	b.n	800350c <I2C_MasterReceive_RXNE+0x188>
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003520:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b04      	cmp	r3, #4
 800352a:	d11b      	bne.n	8003564 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003562:	e0c4      	b.n	80036ee <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b03      	cmp	r3, #3
 800356c:	d129      	bne.n	80035c2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800357c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2b04      	cmp	r3, #4
 8003582:	d00a      	beq.n	800359a <I2C_MasterReceive_BTF+0x86>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d007      	beq.n	800359a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003598:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80035c0:	e095      	b.n	80036ee <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d17d      	bne.n	80036c8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d002      	beq.n	80035d8 <I2C_MasterReceive_BTF+0xc4>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d108      	bne.n	80035ea <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	e016      	b.n	8003618 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d002      	beq.n	80035f6 <I2C_MasterReceive_BTF+0xe2>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d108      	bne.n	8003608 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e007      	b.n	8003618 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003616:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003672:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b40      	cmp	r3, #64	@ 0x40
 8003686:	d10a      	bne.n	800369e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff fcaf 	bl	8002ffa <HAL_I2C_MemRxCpltCallback>
}
 800369c:	e027      	b.n	80036ee <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d002      	beq.n	80036b2 <I2C_MasterReceive_BTF+0x19e>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d103      	bne.n	80036ba <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80036b8:	e002      	b.n	80036c0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2212      	movs	r2, #18
 80036be:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7fd fdc1 	bl	8001248 <HAL_I2C_MasterRxCpltCallback>
}
 80036c6:	e012      	b.n	80036ee <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b40      	cmp	r3, #64	@ 0x40
 8003708:	d117      	bne.n	800373a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003722:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003724:	e067      	b.n	80037f6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	b2da      	uxtb	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	611a      	str	r2, [r3, #16]
}
 8003738:	e05d      	b.n	80037f6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003742:	d133      	bne.n	80037ac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b21      	cmp	r3, #33	@ 0x21
 800374e:	d109      	bne.n	8003764 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003760:	611a      	str	r2, [r3, #16]
 8003762:	e008      	b.n	8003776 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003768:	b2db      	uxtb	r3, r3
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	b2da      	uxtb	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <I2C_Master_SB+0x92>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003784:	2b00      	cmp	r3, #0
 8003786:	d108      	bne.n	800379a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378c:	2b00      	cmp	r3, #0
 800378e:	d032      	beq.n	80037f6 <I2C_Master_SB+0x100>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003796:	2b00      	cmp	r3, #0
 8003798:	d02d      	beq.n	80037f6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037a8:	605a      	str	r2, [r3, #4]
}
 80037aa:	e024      	b.n	80037f6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10e      	bne.n	80037d2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	11db      	asrs	r3, r3, #7
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f003 0306 	and.w	r3, r3, #6
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f063 030f 	orn	r3, r3, #15
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	611a      	str	r2, [r3, #16]
}
 80037d0:	e011      	b.n	80037f6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d10d      	bne.n	80037f6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	b29b      	uxth	r3, r3
 80037e0:	11db      	asrs	r3, r3, #7
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f003 0306 	and.w	r3, r3, #6
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f063 030e 	orn	r3, r3, #14
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	611a      	str	r2, [r3, #16]
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380c:	b2da      	uxtb	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <I2C_Master_ADD10+0x26>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003822:	2b00      	cmp	r3, #0
 8003824:	d108      	bne.n	8003838 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00c      	beq.n	8003848 <I2C_Master_ADD10+0x48>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	d007      	beq.n	8003848 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003846:	605a      	str	r2, [r3, #4]
  }
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003852:	b480      	push	{r7}
 8003854:	b091      	sub	sp, #68	@ 0x44
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003860:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b22      	cmp	r3, #34	@ 0x22
 800387a:	f040 8174 	bne.w	8003b66 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10f      	bne.n	80038a6 <I2C_Master_ADDR+0x54>
 8003886:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800388a:	2b40      	cmp	r3, #64	@ 0x40
 800388c:	d10b      	bne.n	80038a6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388e:	2300      	movs	r3, #0
 8003890:	633b      	str	r3, [r7, #48]	@ 0x30
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	633b      	str	r3, [r7, #48]	@ 0x30
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80038a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a4:	e16b      	b.n	8003b7e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11d      	bne.n	80038ea <I2C_Master_ADDR+0x98>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80038b6:	d118      	bne.n	80038ea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b8:	2300      	movs	r3, #0
 80038ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038dc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80038e8:	e149      	b.n	8003b7e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d113      	bne.n	800391c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f4:	2300      	movs	r3, #0
 80038f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e120      	b.n	8003b5e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b01      	cmp	r3, #1
 8003924:	f040 808a 	bne.w	8003a3c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800392e:	d137      	bne.n	80039a0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800393e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800394a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800394e:	d113      	bne.n	8003978 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800395e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003960:	2300      	movs	r3, #0
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	e0f2      	b.n	8003b5e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003978:	2300      	movs	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	623b      	str	r3, [r7, #32]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	623b      	str	r3, [r7, #32]
 800398c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e0de      	b.n	8003b5e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80039a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d02e      	beq.n	8003a04 <I2C_Master_ADDR+0x1b2>
 80039a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	d02b      	beq.n	8003a04 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80039ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ae:	2b12      	cmp	r3, #18
 80039b0:	d102      	bne.n	80039b8 <I2C_Master_ADDR+0x166>
 80039b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d125      	bne.n	8003a04 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d00e      	beq.n	80039dc <I2C_Master_ADDR+0x18a>
 80039be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d00b      	beq.n	80039dc <I2C_Master_ADDR+0x18a>
 80039c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d008      	beq.n	80039dc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e007      	b.n	80039ec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039ea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	e0ac      	b.n	8003b5e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a12:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e090      	b.n	8003b5e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d158      	bne.n	8003af8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d021      	beq.n	8003a90 <I2C_Master_ADDR+0x23e>
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d01e      	beq.n	8003a90 <I2C_Master_ADDR+0x23e>
 8003a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d01b      	beq.n	8003a90 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a66:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e012      	b.n	8003ab6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a9e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ac4:	d14b      	bne.n	8003b5e <I2C_Master_ADDR+0x30c>
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003acc:	d00b      	beq.n	8003ae6 <I2C_Master_ADDR+0x294>
 8003ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d008      	beq.n	8003ae6 <I2C_Master_ADDR+0x294>
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d005      	beq.n	8003ae6 <I2C_Master_ADDR+0x294>
 8003ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003adc:	2b10      	cmp	r3, #16
 8003ade:	d002      	beq.n	8003ae6 <I2C_Master_ADDR+0x294>
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d13b      	bne.n	8003b5e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	e032      	b.n	8003b5e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b06:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b16:	d117      	bne.n	8003b48 <I2C_Master_ADDR+0x2f6>
 8003b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b1e:	d00b      	beq.n	8003b38 <I2C_Master_ADDR+0x2e6>
 8003b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d008      	beq.n	8003b38 <I2C_Master_ADDR+0x2e6>
 8003b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d005      	beq.n	8003b38 <I2C_Master_ADDR+0x2e6>
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2e:	2b10      	cmp	r3, #16
 8003b30:	d002      	beq.n	8003b38 <I2C_Master_ADDR+0x2e6>
 8003b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d107      	bne.n	8003b48 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b46:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003b64:	e00b      	b.n	8003b7e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b66:	2300      	movs	r3, #0
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
}
 8003b7c:	e7ff      	b.n	8003b7e <I2C_Master_ADDR+0x32c>
 8003b7e:	bf00      	nop
 8003b80:	3744      	adds	r7, #68	@ 0x44
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d02b      	beq.n	8003bfa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	781a      	ldrb	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d114      	bne.n	8003bfa <I2C_SlaveTransmit_TXE+0x72>
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	2b29      	cmp	r3, #41	@ 0x29
 8003bd4:	d111      	bne.n	8003bfa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2221      	movs	r2, #33	@ 0x21
 8003bea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2228      	movs	r2, #40	@ 0x28
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff f9cf 	bl	8002f98 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d011      	beq.n	8003c38 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	781a      	ldrb	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c50:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d02c      	beq.n	8003cb6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d114      	bne.n	8003cb6 <I2C_SlaveReceive_RXNE+0x74>
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c90:	d111      	bne.n	8003cb6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ca0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2222      	movs	r2, #34	@ 0x22
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2228      	movs	r2, #40	@ 0x28
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff f97a 	bl	8002faa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d012      	beq.n	8003cf6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d1a:	2b28      	cmp	r3, #40	@ 0x28
 8003d1c:	d125      	bne.n	8003d6a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d2c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d103      	bne.n	8003d4e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	81bb      	strh	r3, [r7, #12]
 8003d4c:	e002      	b.n	8003d54 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d5c:	89ba      	ldrh	r2, [r7, #12]
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff f92a 	bl	8002fbc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d68:	e00e      	b.n	8003d88 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d9e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003db0:	2300      	movs	r3, #0
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ddc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dec:	d172      	bne.n	8003ed4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	2b22      	cmp	r3, #34	@ 0x22
 8003df2:	d002      	beq.n	8003dfa <I2C_Slave_STOPF+0x6a>
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003df8:	d135      	bne.n	8003e66 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	f043 0204 	orr.w	r2, r3, #4
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fd ff1a 	bl	8001c6c <HAL_DMA_GetState>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d049      	beq.n	8003ed2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e42:	4a69      	ldr	r2, [pc, #420]	@ (8003fe8 <I2C_Slave_STOPF+0x258>)
 8003e44:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fd fe96 	bl	8001b7c <HAL_DMA_Abort_IT>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d03d      	beq.n	8003ed2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e60:	4610      	mov	r0, r2
 8003e62:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e64:	e035      	b.n	8003ed2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	f043 0204 	orr.w	r2, r3, #4
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fd fee4 	bl	8001c6c <HAL_DMA_GetState>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d014      	beq.n	8003ed4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eae:	4a4e      	ldr	r2, [pc, #312]	@ (8003fe8 <I2C_Slave_STOPF+0x258>)
 8003eb0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fd fe60 	bl	8001b7c <HAL_DMA_Abort_IT>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4798      	blx	r3
 8003ed0:	e000      	b.n	8003ed4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ed2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d03e      	beq.n	8003f5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d112      	bne.n	8003f12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1c:	2b40      	cmp	r3, #64	@ 0x40
 8003f1e:	d112      	bne.n	8003f46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f54:	f043 0204 	orr.w	r2, r3, #4
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f8b7 	bl	80040d8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f6a:	e039      	b.n	8003fe0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f70:	d109      	bne.n	8003f86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2228      	movs	r2, #40	@ 0x28
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff f812 	bl	8002faa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b28      	cmp	r3, #40	@ 0x28
 8003f90:	d111      	bne.n	8003fb6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a15      	ldr	r2, [pc, #84]	@ (8003fec <I2C_Slave_STOPF+0x25c>)
 8003f96:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff f811 	bl	8002fd6 <HAL_I2C_ListenCpltCallback>
}
 8003fb4:	e014      	b.n	8003fe0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	2b22      	cmp	r3, #34	@ 0x22
 8003fbc:	d002      	beq.n	8003fc4 <I2C_Slave_STOPF+0x234>
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	2b22      	cmp	r3, #34	@ 0x22
 8003fc2:	d10d      	bne.n	8003fe0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fe ffe5 	bl	8002faa <HAL_I2C_SlaveRxCpltCallback>
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	080045dd 	.word	0x080045dd
 8003fec:	ffff0000 	.word	0xffff0000

08003ff0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d002      	beq.n	8004012 <I2C_Slave_AF+0x22>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b20      	cmp	r3, #32
 8004010:	d129      	bne.n	8004066 <I2C_Slave_AF+0x76>
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	2b28      	cmp	r3, #40	@ 0x28
 8004016:	d126      	bne.n	8004066 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a2e      	ldr	r2, [pc, #184]	@ (80040d4 <I2C_Slave_AF+0xe4>)
 800401c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800402c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004036:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004046:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fe ffb9 	bl	8002fd6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004064:	e031      	b.n	80040ca <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b21      	cmp	r3, #33	@ 0x21
 800406a:	d129      	bne.n	80040c0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a19      	ldr	r2, [pc, #100]	@ (80040d4 <I2C_Slave_AF+0xe4>)
 8004070:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2221      	movs	r2, #33	@ 0x21
 8004076:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004096:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040a0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fe f8b0 	bl	8002218 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fe ff6d 	bl	8002f98 <HAL_I2C_SlaveTxCpltCallback>
}
 80040be:	e004      	b.n	80040ca <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040c8:	615a      	str	r2, [r3, #20]
}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	ffff0000 	.word	0xffff0000

080040d8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80040f0:	7bbb      	ldrb	r3, [r7, #14]
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d002      	beq.n	80040fc <I2C_ITError+0x24>
 80040f6:	7bbb      	ldrb	r3, [r7, #14]
 80040f8:	2b40      	cmp	r3, #64	@ 0x40
 80040fa:	d10a      	bne.n	8004112 <I2C_ITError+0x3a>
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b22      	cmp	r3, #34	@ 0x22
 8004100:	d107      	bne.n	8004112 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004110:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004118:	2b28      	cmp	r3, #40	@ 0x28
 800411a:	d107      	bne.n	800412c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2228      	movs	r2, #40	@ 0x28
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800412a:	e015      	b.n	8004158 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004136:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800413a:	d00a      	beq.n	8004152 <I2C_ITError+0x7a>
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	2b60      	cmp	r3, #96	@ 0x60
 8004140:	d007      	beq.n	8004152 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004162:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004166:	d162      	bne.n	800422e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004176:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800417c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b01      	cmp	r3, #1
 8004184:	d020      	beq.n	80041c8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418a:	4a6a      	ldr	r2, [pc, #424]	@ (8004334 <I2C_ITError+0x25c>)
 800418c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004192:	4618      	mov	r0, r3
 8004194:	f7fd fcf2 	bl	8001b7c <HAL_DMA_Abort_IT>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8089 	beq.w	80042b2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0201 	bic.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041c2:	4610      	mov	r0, r2
 80041c4:	4798      	blx	r3
 80041c6:	e074      	b.n	80042b2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	4a59      	ldr	r2, [pc, #356]	@ (8004334 <I2C_ITError+0x25c>)
 80041ce:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fd fcd1 	bl	8001b7c <HAL_DMA_Abort_IT>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d068      	beq.n	80042b2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ea:	2b40      	cmp	r3, #64	@ 0x40
 80041ec:	d10b      	bne.n	8004206 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004228:	4610      	mov	r0, r2
 800422a:	4798      	blx	r3
 800422c:	e041      	b.n	80042b2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b60      	cmp	r3, #96	@ 0x60
 8004238:	d125      	bne.n	8004286 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004252:	2b40      	cmp	r3, #64	@ 0x40
 8004254:	d10b      	bne.n	800426e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0201 	bic.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fe fecd 	bl	800301e <HAL_I2C_AbortCpltCallback>
 8004284:	e015      	b.n	80042b2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b40      	cmp	r3, #64	@ 0x40
 8004292:	d10b      	bne.n	80042ac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7fe fead 	bl	800300c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10e      	bne.n	80042e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d104      	bne.n	80042e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042ee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b04      	cmp	r3, #4
 8004302:	d113      	bne.n	800432c <I2C_ITError+0x254>
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	2b28      	cmp	r3, #40	@ 0x28
 8004308:	d110      	bne.n	800432c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a0a      	ldr	r2, [pc, #40]	@ (8004338 <I2C_ITError+0x260>)
 800430e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fe fe55 	bl	8002fd6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	080045dd 	.word	0x080045dd
 8004338:	ffff0000 	.word	0xffff0000

0800433c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	460b      	mov	r3, r1
 800434a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004350:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b08      	cmp	r3, #8
 8004356:	d006      	beq.n	8004366 <I2C_MasterRequestWrite+0x2a>
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d003      	beq.n	8004366 <I2C_MasterRequestWrite+0x2a>
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004364:	d108      	bne.n	8004378 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	e00b      	b.n	8004390 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437c:	2b12      	cmp	r3, #18
 800437e:	d107      	bne.n	8004390 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800438e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f9c5 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00d      	beq.n	80043c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043b6:	d103      	bne.n	80043c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e035      	b.n	8004430 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043cc:	d108      	bne.n	80043e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ce:	897b      	ldrh	r3, [r7, #10]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043dc:	611a      	str	r2, [r3, #16]
 80043de:	e01b      	b.n	8004418 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043e0:	897b      	ldrh	r3, [r7, #10]
 80043e2:	11db      	asrs	r3, r3, #7
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f003 0306 	and.w	r3, r3, #6
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f063 030f 	orn	r3, r3, #15
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	490e      	ldr	r1, [pc, #56]	@ (8004438 <I2C_MasterRequestWrite+0xfc>)
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fa0e 	bl	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e010      	b.n	8004430 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800440e:	897b      	ldrh	r3, [r7, #10]
 8004410:	b2da      	uxtb	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	4907      	ldr	r1, [pc, #28]	@ (800443c <I2C_MasterRequestWrite+0x100>)
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f9fe 	bl	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	00010008 	.word	0x00010008
 800443c:	00010002 	.word	0x00010002

08004440 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	607a      	str	r2, [r7, #4]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	460b      	mov	r3, r1
 800444e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004464:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d006      	beq.n	800447a <I2C_MasterRequestRead+0x3a>
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d003      	beq.n	800447a <I2C_MasterRequestRead+0x3a>
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004478:	d108      	bne.n	800448c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	e00b      	b.n	80044a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004490:	2b11      	cmp	r3, #17
 8004492:	d107      	bne.n	80044a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f93b 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00d      	beq.n	80044d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ca:	d103      	bne.n	80044d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e079      	b.n	80045cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044e0:	d108      	bne.n	80044f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044e2:	897b      	ldrh	r3, [r7, #10]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	611a      	str	r2, [r3, #16]
 80044f2:	e05f      	b.n	80045b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044f4:	897b      	ldrh	r3, [r7, #10]
 80044f6:	11db      	asrs	r3, r3, #7
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	f003 0306 	and.w	r3, r3, #6
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f063 030f 	orn	r3, r3, #15
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4930      	ldr	r1, [pc, #192]	@ (80045d4 <I2C_MasterRequestRead+0x194>)
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f984 	bl	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e054      	b.n	80045cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004522:	897b      	ldrh	r3, [r7, #10]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4929      	ldr	r1, [pc, #164]	@ (80045d8 <I2C_MasterRequestRead+0x198>)
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f974 	bl	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e044      	b.n	80045cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004566:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f8d9 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00d      	beq.n	800459c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800458e:	d103      	bne.n	8004598 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004596:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e017      	b.n	80045cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800459c:	897b      	ldrh	r3, [r7, #10]
 800459e:	11db      	asrs	r3, r3, #7
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f003 0306 	and.w	r3, r3, #6
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f063 030e 	orn	r3, r3, #14
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4907      	ldr	r1, [pc, #28]	@ (80045d8 <I2C_MasterRequestRead+0x198>)
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f930 	bl	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	00010008 	.word	0x00010008
 80045d8:	00010002 	.word	0x00010002

080045dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004724 <I2C_DMAAbort+0x148>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	08db      	lsrs	r3, r3, #3
 80045fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004728 <I2C_DMAAbort+0x14c>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	0a1a      	lsrs	r2, r3, #8
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	00da      	lsls	r2, r3, #3
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	f043 0220 	orr.w	r2, r3, #32
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004622:	e00a      	b.n	800463a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3b01      	subs	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004638:	d0ea      	beq.n	8004610 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004646:	2200      	movs	r2, #0
 8004648:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004656:	2200      	movs	r2, #0
 8004658:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004668:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2200      	movs	r2, #0
 800466e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467c:	2200      	movs	r2, #0
 800467e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468c:	2200      	movs	r2, #0
 800468e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b60      	cmp	r3, #96	@ 0x60
 80046aa:	d10e      	bne.n	80046ca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2200      	movs	r2, #0
 80046c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046c2:	6978      	ldr	r0, [r7, #20]
 80046c4:	f7fe fcab 	bl	800301e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046c8:	e027      	b.n	800471a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046ca:	7cfb      	ldrb	r3, [r7, #19]
 80046cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046d0:	2b28      	cmp	r3, #40	@ 0x28
 80046d2:	d117      	bne.n	8004704 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2200      	movs	r2, #0
 80046f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2228      	movs	r2, #40	@ 0x28
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004702:	e007      	b.n	8004714 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004714:	6978      	ldr	r0, [r7, #20]
 8004716:	f7fe fc79 	bl	800300c <HAL_I2C_ErrorCallback>
}
 800471a:	bf00      	nop
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000004 	.word	0x20000004
 8004728:	14f8b589 	.word	0x14f8b589

0800472c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800473c:	e048      	b.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d044      	beq.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004746:	f7fd f8dd 	bl	8001904 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d139      	bne.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	0c1b      	lsrs	r3, r3, #16
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d10d      	bne.n	8004782 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	43da      	mvns	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4013      	ands	r3, r2
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	e00c      	b.n	800479c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	43da      	mvns	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4013      	ands	r3, r2
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf0c      	ite	eq
 8004794:	2301      	moveq	r3, #1
 8004796:	2300      	movne	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d116      	bne.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047bc:	f043 0220 	orr.w	r2, r3, #32
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e023      	b.n	8004818 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	0c1b      	lsrs	r3, r3, #16
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d10d      	bne.n	80047f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	43da      	mvns	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	e00c      	b.n	8004810 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	43da      	mvns	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4013      	ands	r3, r2
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	bf0c      	ite	eq
 8004808:	2301      	moveq	r3, #1
 800480a:	2300      	movne	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	429a      	cmp	r2, r3
 8004814:	d093      	beq.n	800473e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800482e:	e071      	b.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800483e:	d123      	bne.n	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800484e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004858:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004874:	f043 0204 	orr.w	r2, r3, #4
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e067      	b.n	8004958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d041      	beq.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004890:	f7fd f838 	bl	8001904 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d136      	bne.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10c      	bne.n	80048ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	43da      	mvns	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4013      	ands	r3, r2
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bf14      	ite	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	2300      	moveq	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	e00b      	b.n	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	43da      	mvns	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004900:	f043 0220 	orr.w	r2, r3, #32
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e021      	b.n	8004958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	0c1b      	lsrs	r3, r3, #16
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b01      	cmp	r3, #1
 800491c:	d10c      	bne.n	8004938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	43da      	mvns	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	4013      	ands	r3, r2
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	e00b      	b.n	8004950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	43da      	mvns	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4013      	ands	r3, r2
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	bf14      	ite	ne
 800494a:	2301      	movne	r3, #1
 800494c:	2300      	moveq	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	f47f af6d 	bne.w	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800496c:	e034      	b.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f915 	bl	8004b9e <I2C_IsAcknowledgeFailed>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e034      	b.n	80049e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004984:	d028      	beq.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004986:	f7fc ffbd 	bl	8001904 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	d302      	bcc.n	800499c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d11d      	bne.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a6:	2b80      	cmp	r3, #128	@ 0x80
 80049a8:	d016      	beq.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e007      	b.n	80049e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e2:	2b80      	cmp	r3, #128	@ 0x80
 80049e4:	d1c3      	bne.n	800496e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049fc:	e034      	b.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f8cd 	bl	8004b9e <I2C_IsAcknowledgeFailed>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e034      	b.n	8004a78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d028      	beq.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	f7fc ff75 	bl	8001904 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d11d      	bne.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d016      	beq.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e007      	b.n	8004a78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d1c3      	bne.n	80049fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a8c:	4b13      	ldr	r3, [pc, #76]	@ (8004adc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	08db      	lsrs	r3, r3, #3
 8004a92:	4a13      	ldr	r2, [pc, #76]	@ (8004ae0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004a94:	fba2 2303 	umull	r2, r3, r2, r3
 8004a98:	0a1a      	lsrs	r2, r3, #8
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d107      	bne.n	8004abe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	f043 0220 	orr.w	r2, r3, #32
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e008      	b.n	8004ad0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004acc:	d0e9      	beq.n	8004aa2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	20000004 	.word	0x20000004
 8004ae0:	14f8b589 	.word	0x14f8b589

08004ae4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004af0:	e049      	b.n	8004b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	d119      	bne.n	8004b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0210 	mvn.w	r2, #16
 8004b08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e030      	b.n	8004b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b34:	f7fc fee6 	bl	8001904 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d302      	bcc.n	8004b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d11d      	bne.n	8004b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b54:	2b40      	cmp	r3, #64	@ 0x40
 8004b56:	d016      	beq.n	8004b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e007      	b.n	8004b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b90:	2b40      	cmp	r3, #64	@ 0x40
 8004b92:	d1ae      	bne.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bb4:	d11b      	bne.n	8004bee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bbe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	f043 0204 	orr.w	r2, r3, #4
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr

08004bfa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c06:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004c0a:	d103      	bne.n	8004c14 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c12:	e007      	b.n	8004c24 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c18:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004c1c:	d102      	bne.n	8004c24 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2208      	movs	r2, #8
 8004c22:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr
	...

08004c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e272      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8087 	beq.w	8004d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c50:	4b92      	ldr	r3, [pc, #584]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d00c      	beq.n	8004c76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c5c:	4b8f      	ldr	r3, [pc, #572]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 030c 	and.w	r3, r3, #12
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d112      	bne.n	8004c8e <HAL_RCC_OscConfig+0x5e>
 8004c68:	4b8c      	ldr	r3, [pc, #560]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c74:	d10b      	bne.n	8004c8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c76:	4b89      	ldr	r3, [pc, #548]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d06c      	beq.n	8004d5c <HAL_RCC_OscConfig+0x12c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d168      	bne.n	8004d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e24c      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c96:	d106      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x76>
 8004c98:	4b80      	ldr	r3, [pc, #512]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a7f      	ldr	r2, [pc, #508]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	e02e      	b.n	8004d04 <HAL_RCC_OscConfig+0xd4>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x98>
 8004cae:	4b7b      	ldr	r3, [pc, #492]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a7a      	ldr	r2, [pc, #488]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4b78      	ldr	r3, [pc, #480]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a77      	ldr	r2, [pc, #476]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e01d      	b.n	8004d04 <HAL_RCC_OscConfig+0xd4>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCC_OscConfig+0xbc>
 8004cd2:	4b72      	ldr	r3, [pc, #456]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a71      	ldr	r2, [pc, #452]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	4b6f      	ldr	r3, [pc, #444]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a6e      	ldr	r2, [pc, #440]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e00b      	b.n	8004d04 <HAL_RCC_OscConfig+0xd4>
 8004cec:	4b6b      	ldr	r3, [pc, #428]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	4b68      	ldr	r3, [pc, #416]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a67      	ldr	r2, [pc, #412]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d013      	beq.n	8004d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7fc fdfa 	bl	8001904 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d14:	f7fc fdf6 	bl	8001904 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	@ 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e200      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d26:	4b5d      	ldr	r3, [pc, #372]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCC_OscConfig+0xe4>
 8004d32:	e014      	b.n	8004d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d34:	f7fc fde6 	bl	8001904 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d3c:	f7fc fde2 	bl	8001904 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	@ 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e1ec      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4e:	4b53      	ldr	r3, [pc, #332]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x10c>
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d063      	beq.n	8004e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d76:	4b49      	ldr	r3, [pc, #292]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d11c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x18c>
 8004d82:	4b46      	ldr	r3, [pc, #280]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d116      	bne.n	8004dbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8e:	4b43      	ldr	r3, [pc, #268]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_RCC_OscConfig+0x176>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d001      	beq.n	8004da6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e1c0      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da6:	4b3d      	ldr	r3, [pc, #244]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	4939      	ldr	r1, [pc, #228]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dba:	e03a      	b.n	8004e32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d020      	beq.n	8004e06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc4:	4b36      	ldr	r3, [pc, #216]	@ (8004ea0 <HAL_RCC_OscConfig+0x270>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dca:	f7fc fd9b 	bl	8001904 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd2:	f7fc fd97 	bl	8001904 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e1a1      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4927      	ldr	r1, [pc, #156]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]
 8004e04:	e015      	b.n	8004e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e06:	4b26      	ldr	r3, [pc, #152]	@ (8004ea0 <HAL_RCC_OscConfig+0x270>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fc fd7a 	bl	8001904 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e14:	f7fc fd76 	bl	8001904 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e180      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e26:	4b1d      	ldr	r3, [pc, #116]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d03a      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d019      	beq.n	8004e7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e46:	4b17      	ldr	r3, [pc, #92]	@ (8004ea4 <HAL_RCC_OscConfig+0x274>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4c:	f7fc fd5a 	bl	8001904 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e54:	f7fc fd56 	bl	8001904 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e160      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e66:	4b0d      	ldr	r3, [pc, #52]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e72:	2001      	movs	r0, #1
 8004e74:	f000 face 	bl	8005414 <RCC_Delay>
 8004e78:	e01c      	b.n	8004eb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea4 <HAL_RCC_OscConfig+0x274>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e80:	f7fc fd40 	bl	8001904 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e86:	e00f      	b.n	8004ea8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e88:	f7fc fd3c 	bl	8001904 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d908      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e146      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	42420000 	.word	0x42420000
 8004ea4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea8:	4b92      	ldr	r3, [pc, #584]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e9      	bne.n	8004e88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80a6 	beq.w	800500e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ec6:	4b8b      	ldr	r3, [pc, #556]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10d      	bne.n	8004eee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed2:	4b88      	ldr	r3, [pc, #544]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	4a87      	ldr	r2, [pc, #540]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004edc:	61d3      	str	r3, [r2, #28]
 8004ede:	4b85      	ldr	r3, [pc, #532]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eea:	2301      	movs	r3, #1
 8004eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eee:	4b82      	ldr	r3, [pc, #520]	@ (80050f8 <HAL_RCC_OscConfig+0x4c8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d118      	bne.n	8004f2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004efa:	4b7f      	ldr	r3, [pc, #508]	@ (80050f8 <HAL_RCC_OscConfig+0x4c8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a7e      	ldr	r2, [pc, #504]	@ (80050f8 <HAL_RCC_OscConfig+0x4c8>)
 8004f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f06:	f7fc fcfd 	bl	8001904 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f0e:	f7fc fcf9 	bl	8001904 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b64      	cmp	r3, #100	@ 0x64
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e103      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f20:	4b75      	ldr	r3, [pc, #468]	@ (80050f8 <HAL_RCC_OscConfig+0x4c8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d106      	bne.n	8004f42 <HAL_RCC_OscConfig+0x312>
 8004f34:	4b6f      	ldr	r3, [pc, #444]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	4a6e      	ldr	r2, [pc, #440]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	6213      	str	r3, [r2, #32]
 8004f40:	e02d      	b.n	8004f9e <HAL_RCC_OscConfig+0x36e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10c      	bne.n	8004f64 <HAL_RCC_OscConfig+0x334>
 8004f4a:	4b6a      	ldr	r3, [pc, #424]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	4a69      	ldr	r2, [pc, #420]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	6213      	str	r3, [r2, #32]
 8004f56:	4b67      	ldr	r3, [pc, #412]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	4a66      	ldr	r2, [pc, #408]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	f023 0304 	bic.w	r3, r3, #4
 8004f60:	6213      	str	r3, [r2, #32]
 8004f62:	e01c      	b.n	8004f9e <HAL_RCC_OscConfig+0x36e>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b05      	cmp	r3, #5
 8004f6a:	d10c      	bne.n	8004f86 <HAL_RCC_OscConfig+0x356>
 8004f6c:	4b61      	ldr	r3, [pc, #388]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	4a60      	ldr	r2, [pc, #384]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f72:	f043 0304 	orr.w	r3, r3, #4
 8004f76:	6213      	str	r3, [r2, #32]
 8004f78:	4b5e      	ldr	r3, [pc, #376]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	4a5d      	ldr	r2, [pc, #372]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	6213      	str	r3, [r2, #32]
 8004f84:	e00b      	b.n	8004f9e <HAL_RCC_OscConfig+0x36e>
 8004f86:	4b5b      	ldr	r3, [pc, #364]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	4a5a      	ldr	r2, [pc, #360]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	6213      	str	r3, [r2, #32]
 8004f92:	4b58      	ldr	r3, [pc, #352]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	4a57      	ldr	r2, [pc, #348]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f98:	f023 0304 	bic.w	r3, r3, #4
 8004f9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d015      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa6:	f7fc fcad 	bl	8001904 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fac:	e00a      	b.n	8004fc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fae:	f7fc fca9 	bl	8001904 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e0b1      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0ee      	beq.n	8004fae <HAL_RCC_OscConfig+0x37e>
 8004fd0:	e014      	b.n	8004ffc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd2:	f7fc fc97 	bl	8001904 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd8:	e00a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fda:	f7fc fc93 	bl	8001904 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e09b      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff0:	4b40      	ldr	r3, [pc, #256]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1ee      	bne.n	8004fda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d105      	bne.n	800500e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005002:	4b3c      	ldr	r3, [pc, #240]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	4a3b      	ldr	r2, [pc, #236]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8005008:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800500c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 8087 	beq.w	8005126 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005018:	4b36      	ldr	r3, [pc, #216]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 030c 	and.w	r3, r3, #12
 8005020:	2b08      	cmp	r3, #8
 8005022:	d061      	beq.n	80050e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d146      	bne.n	80050ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502c:	4b33      	ldr	r3, [pc, #204]	@ (80050fc <HAL_RCC_OscConfig+0x4cc>)
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005032:	f7fc fc67 	bl	8001904 <HAL_GetTick>
 8005036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005038:	e008      	b.n	800504c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800503a:	f7fc fc63 	bl	8001904 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e06d      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800504c:	4b29      	ldr	r3, [pc, #164]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1f0      	bne.n	800503a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005060:	d108      	bne.n	8005074 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005062:	4b24      	ldr	r3, [pc, #144]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	4921      	ldr	r1, [pc, #132]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8005070:	4313      	orrs	r3, r2
 8005072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005074:	4b1f      	ldr	r3, [pc, #124]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a19      	ldr	r1, [r3, #32]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	430b      	orrs	r3, r1
 8005086:	491b      	ldr	r1, [pc, #108]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8005088:	4313      	orrs	r3, r2
 800508a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800508c:	4b1b      	ldr	r3, [pc, #108]	@ (80050fc <HAL_RCC_OscConfig+0x4cc>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005092:	f7fc fc37 	bl	8001904 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800509a:	f7fc fc33 	bl	8001904 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e03d      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050ac:	4b11      	ldr	r3, [pc, #68]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x46a>
 80050b8:	e035      	b.n	8005126 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ba:	4b10      	ldr	r3, [pc, #64]	@ (80050fc <HAL_RCC_OscConfig+0x4cc>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c0:	f7fc fc20 	bl	8001904 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c8:	f7fc fc1c 	bl	8001904 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e026      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050da:	4b06      	ldr	r3, [pc, #24]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0x498>
 80050e6:	e01e      	b.n	8005126 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d107      	bne.n	8005100 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e019      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40007000 	.word	0x40007000
 80050fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <HAL_RCC_OscConfig+0x500>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	429a      	cmp	r2, r3
 8005112:	d106      	bne.n	8005122 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511e:	429a      	cmp	r2, r3
 8005120:	d001      	beq.n	8005126 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40021000 	.word	0x40021000

08005134 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0d0      	b.n	80052ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005148:	4b6a      	ldr	r3, [pc, #424]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d910      	bls.n	8005178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005156:	4b67      	ldr	r3, [pc, #412]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f023 0207 	bic.w	r2, r3, #7
 800515e:	4965      	ldr	r1, [pc, #404]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	4313      	orrs	r3, r2
 8005164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005166:	4b63      	ldr	r3, [pc, #396]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d001      	beq.n	8005178 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e0b8      	b.n	80052ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d020      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005190:	4b59      	ldr	r3, [pc, #356]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	4a58      	ldr	r2, [pc, #352]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005196:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800519a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051a8:	4b53      	ldr	r3, [pc, #332]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	4a52      	ldr	r2, [pc, #328]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80051b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b4:	4b50      	ldr	r3, [pc, #320]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	494d      	ldr	r1, [pc, #308]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d040      	beq.n	8005254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d107      	bne.n	80051ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051da:	4b47      	ldr	r3, [pc, #284]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d115      	bne.n	8005212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e07f      	b.n	80052ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d107      	bne.n	8005202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f2:	4b41      	ldr	r3, [pc, #260]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e073      	b.n	80052ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005202:	4b3d      	ldr	r3, [pc, #244]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e06b      	b.n	80052ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005212:	4b39      	ldr	r3, [pc, #228]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f023 0203 	bic.w	r2, r3, #3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	4936      	ldr	r1, [pc, #216]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005220:	4313      	orrs	r3, r2
 8005222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005224:	f7fc fb6e 	bl	8001904 <HAL_GetTick>
 8005228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522a:	e00a      	b.n	8005242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800522c:	f7fc fb6a 	bl	8001904 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523a:	4293      	cmp	r3, r2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e053      	b.n	80052ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005242:	4b2d      	ldr	r3, [pc, #180]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f003 020c 	and.w	r2, r3, #12
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	429a      	cmp	r2, r3
 8005252:	d1eb      	bne.n	800522c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005254:	4b27      	ldr	r3, [pc, #156]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d210      	bcs.n	8005284 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005262:	4b24      	ldr	r3, [pc, #144]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 0207 	bic.w	r2, r3, #7
 800526a:	4922      	ldr	r1, [pc, #136]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	4313      	orrs	r3, r2
 8005270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005272:	4b20      	ldr	r3, [pc, #128]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d001      	beq.n	8005284 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e032      	b.n	80052ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005290:	4b19      	ldr	r3, [pc, #100]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4916      	ldr	r1, [pc, #88]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d009      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052ae:	4b12      	ldr	r3, [pc, #72]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	490e      	ldr	r1, [pc, #56]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052c2:	f000 f821 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 80052c6:	4602      	mov	r2, r0
 80052c8:	4b0b      	ldr	r3, [pc, #44]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	490a      	ldr	r1, [pc, #40]	@ (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 80052d4:	5ccb      	ldrb	r3, [r1, r3]
 80052d6:	fa22 f303 	lsr.w	r3, r2, r3
 80052da:	4a09      	ldr	r2, [pc, #36]	@ (8005300 <HAL_RCC_ClockConfig+0x1cc>)
 80052dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052de:	4b09      	ldr	r3, [pc, #36]	@ (8005304 <HAL_RCC_ClockConfig+0x1d0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fc facc 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40022000 	.word	0x40022000
 80052f8:	40021000 	.word	0x40021000
 80052fc:	08009f98 	.word	0x08009f98
 8005300:	20000004 	.word	0x20000004
 8005304:	20000008 	.word	0x20000008

08005308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	2300      	movs	r3, #0
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	2300      	movs	r3, #0
 800531c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005322:	4b1e      	ldr	r3, [pc, #120]	@ (800539c <HAL_RCC_GetSysClockFreq+0x94>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 030c 	and.w	r3, r3, #12
 800532e:	2b04      	cmp	r3, #4
 8005330:	d002      	beq.n	8005338 <HAL_RCC_GetSysClockFreq+0x30>
 8005332:	2b08      	cmp	r3, #8
 8005334:	d003      	beq.n	800533e <HAL_RCC_GetSysClockFreq+0x36>
 8005336:	e027      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005338:	4b19      	ldr	r3, [pc, #100]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800533a:	613b      	str	r3, [r7, #16]
      break;
 800533c:	e027      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	0c9b      	lsrs	r3, r3, #18
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	4a17      	ldr	r2, [pc, #92]	@ (80053a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005348:	5cd3      	ldrb	r3, [r2, r3]
 800534a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d010      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005356:	4b11      	ldr	r3, [pc, #68]	@ (800539c <HAL_RCC_GetSysClockFreq+0x94>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	0c5b      	lsrs	r3, r3, #17
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	4a11      	ldr	r2, [pc, #68]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005362:	5cd3      	ldrb	r3, [r2, r3]
 8005364:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a0d      	ldr	r2, [pc, #52]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800536a:	fb03 f202 	mul.w	r2, r3, r2
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e004      	b.n	8005382 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a0c      	ldr	r2, [pc, #48]	@ (80053ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800537c:	fb02 f303 	mul.w	r3, r2, r3
 8005380:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	613b      	str	r3, [r7, #16]
      break;
 8005386:	e002      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005388:	4b05      	ldr	r3, [pc, #20]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800538a:	613b      	str	r3, [r7, #16]
      break;
 800538c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800538e:	693b      	ldr	r3, [r7, #16]
}
 8005390:	4618      	mov	r0, r3
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40021000 	.word	0x40021000
 80053a0:	007a1200 	.word	0x007a1200
 80053a4:	08009fb0 	.word	0x08009fb0
 80053a8:	08009fc0 	.word	0x08009fc0
 80053ac:	003d0900 	.word	0x003d0900

080053b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b4:	4b02      	ldr	r3, [pc, #8]	@ (80053c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80053b6:	681b      	ldr	r3, [r3, #0]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr
 80053c0:	20000004 	.word	0x20000004

080053c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053c8:	f7ff fff2 	bl	80053b0 <HAL_RCC_GetHCLKFreq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4b05      	ldr	r3, [pc, #20]	@ (80053e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	0a1b      	lsrs	r3, r3, #8
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	4903      	ldr	r1, [pc, #12]	@ (80053e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40021000 	.word	0x40021000
 80053e8:	08009fa8 	.word	0x08009fa8

080053ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053f0:	f7ff ffde 	bl	80053b0 <HAL_RCC_GetHCLKFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b05      	ldr	r3, [pc, #20]	@ (800540c <HAL_RCC_GetPCLK2Freq+0x20>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	0adb      	lsrs	r3, r3, #11
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	4903      	ldr	r1, [pc, #12]	@ (8005410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005408:	4618      	mov	r0, r3
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40021000 	.word	0x40021000
 8005410:	08009fa8 	.word	0x08009fa8

08005414 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800541c:	4b0a      	ldr	r3, [pc, #40]	@ (8005448 <RCC_Delay+0x34>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a0a      	ldr	r2, [pc, #40]	@ (800544c <RCC_Delay+0x38>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	0a5b      	lsrs	r3, r3, #9
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005430:	bf00      	nop
  }
  while (Delay --);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1e5a      	subs	r2, r3, #1
 8005436:	60fa      	str	r2, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f9      	bne.n	8005430 <RCC_Delay+0x1c>
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr
 8005448:	20000004 	.word	0x20000004
 800544c:	10624dd3 	.word	0x10624dd3

08005450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e042      	b.n	80054e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fc f97c 	bl	8001774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2224      	movs	r2, #36	@ 0x24
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f971 	bl	800577c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695a      	ldr	r2, [r3, #20]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08a      	sub	sp, #40	@ 0x28
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	4613      	mov	r3, r2
 80054fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b20      	cmp	r3, #32
 800550e:	d175      	bne.n	80055fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <HAL_UART_Transmit+0x2c>
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e06e      	b.n	80055fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2221      	movs	r2, #33	@ 0x21
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800552e:	f7fc f9e9 	bl	8001904 <HAL_GetTick>
 8005532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	88fa      	ldrh	r2, [r7, #6]
 8005538:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	88fa      	ldrh	r2, [r7, #6]
 800553e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005548:	d108      	bne.n	800555c <HAL_UART_Transmit+0x6c>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	e003      	b.n	8005564 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005560:	2300      	movs	r3, #0
 8005562:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005564:	e02e      	b.n	80055c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2200      	movs	r2, #0
 800556e:	2180      	movs	r1, #128	@ 0x80
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f848 	bl	8005606 <UART_WaitOnFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e03a      	b.n	80055fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10b      	bne.n	80055a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800559c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	3302      	adds	r3, #2
 80055a2:	61bb      	str	r3, [r7, #24]
 80055a4:	e007      	b.n	80055b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	781a      	ldrb	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	3301      	adds	r3, #1
 80055b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1cb      	bne.n	8005566 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	2140      	movs	r1, #64	@ 0x40
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f814 	bl	8005606 <UART_WaitOnFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e006      	b.n	80055fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	e000      	b.n	80055fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80055fc:	2302      	movs	r3, #2
  }
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	603b      	str	r3, [r7, #0]
 8005612:	4613      	mov	r3, r2
 8005614:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005616:	e03b      	b.n	8005690 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d037      	beq.n	8005690 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005620:	f7fc f970 	bl	8001904 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	6a3a      	ldr	r2, [r7, #32]
 800562c:	429a      	cmp	r2, r3
 800562e:	d302      	bcc.n	8005636 <UART_WaitOnFlagUntilTimeout+0x30>
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e03a      	b.n	80056b0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d023      	beq.n	8005690 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b80      	cmp	r3, #128	@ 0x80
 800564c:	d020      	beq.n	8005690 <UART_WaitOnFlagUntilTimeout+0x8a>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b40      	cmp	r3, #64	@ 0x40
 8005652:	d01d      	beq.n	8005690 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b08      	cmp	r3, #8
 8005660:	d116      	bne.n	8005690 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f81d 	bl	80056b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2208      	movs	r2, #8
 8005682:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e00f      	b.n	80056b0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	4013      	ands	r3, r2
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	429a      	cmp	r2, r3
 800569e:	bf0c      	ite	eq
 80056a0:	2301      	moveq	r3, #1
 80056a2:	2300      	movne	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d0b4      	beq.n	8005618 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b095      	sub	sp, #84	@ 0x54
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80056e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e5      	bne.n	80056c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3314      	adds	r3, #20
 80056fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	61fb      	str	r3, [r7, #28]
   return(result);
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3314      	adds	r3, #20
 8005712:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005714:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005716:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800571a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e5      	bne.n	80056f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572c:	2b01      	cmp	r3, #1
 800572e:	d119      	bne.n	8005764 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f023 0310 	bic.w	r3, r3, #16
 8005746:	647b      	str	r3, [r7, #68]	@ 0x44
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005750:	61ba      	str	r2, [r7, #24]
 8005752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	6979      	ldr	r1, [r7, #20]
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	613b      	str	r3, [r7, #16]
   return(result);
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e5      	bne.n	8005730 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005772:	bf00      	nop
 8005774:	3754      	adds	r7, #84	@ 0x54
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80057b6:	f023 030c 	bic.w	r3, r3, #12
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6812      	ldr	r2, [r2, #0]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	430b      	orrs	r3, r1
 80057c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a2c      	ldr	r2, [pc, #176]	@ (8005890 <UART_SetConfig+0x114>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d103      	bne.n	80057ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057e4:	f7ff fe02 	bl	80053ec <HAL_RCC_GetPCLK2Freq>
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	e002      	b.n	80057f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057ec:	f7ff fdea 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 80057f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	009a      	lsls	r2, r3, #2
 80057fc:	441a      	add	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	fbb2 f3f3 	udiv	r3, r2, r3
 8005808:	4a22      	ldr	r2, [pc, #136]	@ (8005894 <UART_SetConfig+0x118>)
 800580a:	fba2 2303 	umull	r2, r3, r2, r3
 800580e:	095b      	lsrs	r3, r3, #5
 8005810:	0119      	lsls	r1, r3, #4
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009a      	lsls	r2, r3, #2
 800581c:	441a      	add	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	fbb2 f2f3 	udiv	r2, r2, r3
 8005828:	4b1a      	ldr	r3, [pc, #104]	@ (8005894 <UART_SetConfig+0x118>)
 800582a:	fba3 0302 	umull	r0, r3, r3, r2
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	2064      	movs	r0, #100	@ 0x64
 8005832:	fb00 f303 	mul.w	r3, r0, r3
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	3332      	adds	r3, #50	@ 0x32
 800583c:	4a15      	ldr	r2, [pc, #84]	@ (8005894 <UART_SetConfig+0x118>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005848:	4419      	add	r1, r3
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009a      	lsls	r2, r3, #2
 8005854:	441a      	add	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005860:	4b0c      	ldr	r3, [pc, #48]	@ (8005894 <UART_SetConfig+0x118>)
 8005862:	fba3 0302 	umull	r0, r3, r3, r2
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	2064      	movs	r0, #100	@ 0x64
 800586a:	fb00 f303 	mul.w	r3, r0, r3
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	3332      	adds	r3, #50	@ 0x32
 8005874:	4a07      	ldr	r2, [pc, #28]	@ (8005894 <UART_SetConfig+0x118>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	f003 020f 	and.w	r2, r3, #15
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	440a      	add	r2, r1
 8005886:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40013800 	.word	0x40013800
 8005894:	51eb851f 	.word	0x51eb851f

08005898 <__cvt>:
 8005898:	2b00      	cmp	r3, #0
 800589a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800589e:	461d      	mov	r5, r3
 80058a0:	bfbb      	ittet	lt
 80058a2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80058a6:	461d      	movlt	r5, r3
 80058a8:	2300      	movge	r3, #0
 80058aa:	232d      	movlt	r3, #45	@ 0x2d
 80058ac:	b088      	sub	sp, #32
 80058ae:	4614      	mov	r4, r2
 80058b0:	bfb8      	it	lt
 80058b2:	4614      	movlt	r4, r2
 80058b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80058b6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80058b8:	7013      	strb	r3, [r2, #0]
 80058ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80058bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80058c0:	f023 0820 	bic.w	r8, r3, #32
 80058c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80058c8:	d005      	beq.n	80058d6 <__cvt+0x3e>
 80058ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80058ce:	d100      	bne.n	80058d2 <__cvt+0x3a>
 80058d0:	3601      	adds	r6, #1
 80058d2:	2302      	movs	r3, #2
 80058d4:	e000      	b.n	80058d8 <__cvt+0x40>
 80058d6:	2303      	movs	r3, #3
 80058d8:	aa07      	add	r2, sp, #28
 80058da:	9204      	str	r2, [sp, #16]
 80058dc:	aa06      	add	r2, sp, #24
 80058de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80058e2:	e9cd 3600 	strd	r3, r6, [sp]
 80058e6:	4622      	mov	r2, r4
 80058e8:	462b      	mov	r3, r5
 80058ea:	f001 f881 	bl	80069f0 <_dtoa_r>
 80058ee:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80058f2:	4607      	mov	r7, r0
 80058f4:	d119      	bne.n	800592a <__cvt+0x92>
 80058f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80058f8:	07db      	lsls	r3, r3, #31
 80058fa:	d50e      	bpl.n	800591a <__cvt+0x82>
 80058fc:	eb00 0906 	add.w	r9, r0, r6
 8005900:	2200      	movs	r2, #0
 8005902:	2300      	movs	r3, #0
 8005904:	4620      	mov	r0, r4
 8005906:	4629      	mov	r1, r5
 8005908:	f7fb f84e 	bl	80009a8 <__aeabi_dcmpeq>
 800590c:	b108      	cbz	r0, 8005912 <__cvt+0x7a>
 800590e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005912:	2230      	movs	r2, #48	@ 0x30
 8005914:	9b07      	ldr	r3, [sp, #28]
 8005916:	454b      	cmp	r3, r9
 8005918:	d31e      	bcc.n	8005958 <__cvt+0xc0>
 800591a:	4638      	mov	r0, r7
 800591c:	9b07      	ldr	r3, [sp, #28]
 800591e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005920:	1bdb      	subs	r3, r3, r7
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	b008      	add	sp, #32
 8005926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800592a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800592e:	eb00 0906 	add.w	r9, r0, r6
 8005932:	d1e5      	bne.n	8005900 <__cvt+0x68>
 8005934:	7803      	ldrb	r3, [r0, #0]
 8005936:	2b30      	cmp	r3, #48	@ 0x30
 8005938:	d10a      	bne.n	8005950 <__cvt+0xb8>
 800593a:	2200      	movs	r2, #0
 800593c:	2300      	movs	r3, #0
 800593e:	4620      	mov	r0, r4
 8005940:	4629      	mov	r1, r5
 8005942:	f7fb f831 	bl	80009a8 <__aeabi_dcmpeq>
 8005946:	b918      	cbnz	r0, 8005950 <__cvt+0xb8>
 8005948:	f1c6 0601 	rsb	r6, r6, #1
 800594c:	f8ca 6000 	str.w	r6, [sl]
 8005950:	f8da 3000 	ldr.w	r3, [sl]
 8005954:	4499      	add	r9, r3
 8005956:	e7d3      	b.n	8005900 <__cvt+0x68>
 8005958:	1c59      	adds	r1, r3, #1
 800595a:	9107      	str	r1, [sp, #28]
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	e7d9      	b.n	8005914 <__cvt+0x7c>

08005960 <__exponent>:
 8005960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005962:	2900      	cmp	r1, #0
 8005964:	bfb6      	itet	lt
 8005966:	232d      	movlt	r3, #45	@ 0x2d
 8005968:	232b      	movge	r3, #43	@ 0x2b
 800596a:	4249      	neglt	r1, r1
 800596c:	2909      	cmp	r1, #9
 800596e:	7002      	strb	r2, [r0, #0]
 8005970:	7043      	strb	r3, [r0, #1]
 8005972:	dd29      	ble.n	80059c8 <__exponent+0x68>
 8005974:	f10d 0307 	add.w	r3, sp, #7
 8005978:	461d      	mov	r5, r3
 800597a:	270a      	movs	r7, #10
 800597c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005980:	461a      	mov	r2, r3
 8005982:	fb07 1416 	mls	r4, r7, r6, r1
 8005986:	3430      	adds	r4, #48	@ 0x30
 8005988:	f802 4c01 	strb.w	r4, [r2, #-1]
 800598c:	460c      	mov	r4, r1
 800598e:	2c63      	cmp	r4, #99	@ 0x63
 8005990:	4631      	mov	r1, r6
 8005992:	f103 33ff 	add.w	r3, r3, #4294967295
 8005996:	dcf1      	bgt.n	800597c <__exponent+0x1c>
 8005998:	3130      	adds	r1, #48	@ 0x30
 800599a:	1e94      	subs	r4, r2, #2
 800599c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80059a0:	4623      	mov	r3, r4
 80059a2:	1c41      	adds	r1, r0, #1
 80059a4:	42ab      	cmp	r3, r5
 80059a6:	d30a      	bcc.n	80059be <__exponent+0x5e>
 80059a8:	f10d 0309 	add.w	r3, sp, #9
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	42ac      	cmp	r4, r5
 80059b0:	bf88      	it	hi
 80059b2:	2300      	movhi	r3, #0
 80059b4:	3302      	adds	r3, #2
 80059b6:	4403      	add	r3, r0
 80059b8:	1a18      	subs	r0, r3, r0
 80059ba:	b003      	add	sp, #12
 80059bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059be:	f813 6b01 	ldrb.w	r6, [r3], #1
 80059c2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80059c6:	e7ed      	b.n	80059a4 <__exponent+0x44>
 80059c8:	2330      	movs	r3, #48	@ 0x30
 80059ca:	3130      	adds	r1, #48	@ 0x30
 80059cc:	7083      	strb	r3, [r0, #2]
 80059ce:	70c1      	strb	r1, [r0, #3]
 80059d0:	1d03      	adds	r3, r0, #4
 80059d2:	e7f1      	b.n	80059b8 <__exponent+0x58>

080059d4 <_printf_float>:
 80059d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d8:	b091      	sub	sp, #68	@ 0x44
 80059da:	460c      	mov	r4, r1
 80059dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80059e0:	4616      	mov	r6, r2
 80059e2:	461f      	mov	r7, r3
 80059e4:	4605      	mov	r5, r0
 80059e6:	f000 fef1 	bl	80067cc <_localeconv_r>
 80059ea:	6803      	ldr	r3, [r0, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	9308      	str	r3, [sp, #32]
 80059f0:	f7fa fbae 	bl	8000150 <strlen>
 80059f4:	2300      	movs	r3, #0
 80059f6:	930e      	str	r3, [sp, #56]	@ 0x38
 80059f8:	f8d8 3000 	ldr.w	r3, [r8]
 80059fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80059fe:	3307      	adds	r3, #7
 8005a00:	f023 0307 	bic.w	r3, r3, #7
 8005a04:	f103 0208 	add.w	r2, r3, #8
 8005a08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005a0c:	f8d4 b000 	ldr.w	fp, [r4]
 8005a10:	f8c8 2000 	str.w	r2, [r8]
 8005a14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005a1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a1e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005a22:	f04f 32ff 	mov.w	r2, #4294967295
 8005a26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a2a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005a2e:	4b9c      	ldr	r3, [pc, #624]	@ (8005ca0 <_printf_float+0x2cc>)
 8005a30:	f7fa ffec 	bl	8000a0c <__aeabi_dcmpun>
 8005a34:	bb70      	cbnz	r0, 8005a94 <_printf_float+0xc0>
 8005a36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3e:	4b98      	ldr	r3, [pc, #608]	@ (8005ca0 <_printf_float+0x2cc>)
 8005a40:	f7fa ffc6 	bl	80009d0 <__aeabi_dcmple>
 8005a44:	bb30      	cbnz	r0, 8005a94 <_printf_float+0xc0>
 8005a46:	2200      	movs	r2, #0
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	f7fa ffb5 	bl	80009bc <__aeabi_dcmplt>
 8005a52:	b110      	cbz	r0, 8005a5a <_printf_float+0x86>
 8005a54:	232d      	movs	r3, #45	@ 0x2d
 8005a56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a5a:	4a92      	ldr	r2, [pc, #584]	@ (8005ca4 <_printf_float+0x2d0>)
 8005a5c:	4b92      	ldr	r3, [pc, #584]	@ (8005ca8 <_printf_float+0x2d4>)
 8005a5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005a62:	bf94      	ite	ls
 8005a64:	4690      	movls	r8, r2
 8005a66:	4698      	movhi	r8, r3
 8005a68:	2303      	movs	r3, #3
 8005a6a:	f04f 0900 	mov.w	r9, #0
 8005a6e:	6123      	str	r3, [r4, #16]
 8005a70:	f02b 0304 	bic.w	r3, fp, #4
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	4633      	mov	r3, r6
 8005a78:	4621      	mov	r1, r4
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	9700      	str	r7, [sp, #0]
 8005a7e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005a80:	f000 f9d4 	bl	8005e2c <_printf_common>
 8005a84:	3001      	adds	r0, #1
 8005a86:	f040 8090 	bne.w	8005baa <_printf_float+0x1d6>
 8005a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8e:	b011      	add	sp, #68	@ 0x44
 8005a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a94:	4642      	mov	r2, r8
 8005a96:	464b      	mov	r3, r9
 8005a98:	4640      	mov	r0, r8
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	f7fa ffb6 	bl	8000a0c <__aeabi_dcmpun>
 8005aa0:	b148      	cbz	r0, 8005ab6 <_printf_float+0xe2>
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bfb8      	it	lt
 8005aa8:	232d      	movlt	r3, #45	@ 0x2d
 8005aaa:	4a80      	ldr	r2, [pc, #512]	@ (8005cac <_printf_float+0x2d8>)
 8005aac:	bfb8      	it	lt
 8005aae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005ab2:	4b7f      	ldr	r3, [pc, #508]	@ (8005cb0 <_printf_float+0x2dc>)
 8005ab4:	e7d3      	b.n	8005a5e <_printf_float+0x8a>
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	d13f      	bne.n	8005b40 <_printf_float+0x16c>
 8005ac0:	2306      	movs	r3, #6
 8005ac2:	6063      	str	r3, [r4, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005aca:	6023      	str	r3, [r4, #0]
 8005acc:	9206      	str	r2, [sp, #24]
 8005ace:	aa0e      	add	r2, sp, #56	@ 0x38
 8005ad0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005ad4:	aa0d      	add	r2, sp, #52	@ 0x34
 8005ad6:	9203      	str	r2, [sp, #12]
 8005ad8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005adc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005ae0:	6863      	ldr	r3, [r4, #4]
 8005ae2:	4642      	mov	r2, r8
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	464b      	mov	r3, r9
 8005aea:	910a      	str	r1, [sp, #40]	@ 0x28
 8005aec:	f7ff fed4 	bl	8005898 <__cvt>
 8005af0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005af2:	4680      	mov	r8, r0
 8005af4:	2947      	cmp	r1, #71	@ 0x47
 8005af6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005af8:	d128      	bne.n	8005b4c <_printf_float+0x178>
 8005afa:	1cc8      	adds	r0, r1, #3
 8005afc:	db02      	blt.n	8005b04 <_printf_float+0x130>
 8005afe:	6863      	ldr	r3, [r4, #4]
 8005b00:	4299      	cmp	r1, r3
 8005b02:	dd40      	ble.n	8005b86 <_printf_float+0x1b2>
 8005b04:	f1aa 0a02 	sub.w	sl, sl, #2
 8005b08:	fa5f fa8a 	uxtb.w	sl, sl
 8005b0c:	4652      	mov	r2, sl
 8005b0e:	3901      	subs	r1, #1
 8005b10:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005b14:	910d      	str	r1, [sp, #52]	@ 0x34
 8005b16:	f7ff ff23 	bl	8005960 <__exponent>
 8005b1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b1c:	4681      	mov	r9, r0
 8005b1e:	1813      	adds	r3, r2, r0
 8005b20:	2a01      	cmp	r2, #1
 8005b22:	6123      	str	r3, [r4, #16]
 8005b24:	dc02      	bgt.n	8005b2c <_printf_float+0x158>
 8005b26:	6822      	ldr	r2, [r4, #0]
 8005b28:	07d2      	lsls	r2, r2, #31
 8005b2a:	d501      	bpl.n	8005b30 <_printf_float+0x15c>
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	6123      	str	r3, [r4, #16]
 8005b30:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d09e      	beq.n	8005a76 <_printf_float+0xa2>
 8005b38:	232d      	movs	r3, #45	@ 0x2d
 8005b3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b3e:	e79a      	b.n	8005a76 <_printf_float+0xa2>
 8005b40:	2947      	cmp	r1, #71	@ 0x47
 8005b42:	d1bf      	bne.n	8005ac4 <_printf_float+0xf0>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1bd      	bne.n	8005ac4 <_printf_float+0xf0>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e7ba      	b.n	8005ac2 <_printf_float+0xee>
 8005b4c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b50:	d9dc      	bls.n	8005b0c <_printf_float+0x138>
 8005b52:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005b56:	d118      	bne.n	8005b8a <_printf_float+0x1b6>
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	6863      	ldr	r3, [r4, #4]
 8005b5c:	dd0b      	ble.n	8005b76 <_printf_float+0x1a2>
 8005b5e:	6121      	str	r1, [r4, #16]
 8005b60:	b913      	cbnz	r3, 8005b68 <_printf_float+0x194>
 8005b62:	6822      	ldr	r2, [r4, #0]
 8005b64:	07d0      	lsls	r0, r2, #31
 8005b66:	d502      	bpl.n	8005b6e <_printf_float+0x19a>
 8005b68:	3301      	adds	r3, #1
 8005b6a:	440b      	add	r3, r1
 8005b6c:	6123      	str	r3, [r4, #16]
 8005b6e:	f04f 0900 	mov.w	r9, #0
 8005b72:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005b74:	e7dc      	b.n	8005b30 <_printf_float+0x15c>
 8005b76:	b913      	cbnz	r3, 8005b7e <_printf_float+0x1aa>
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	07d2      	lsls	r2, r2, #31
 8005b7c:	d501      	bpl.n	8005b82 <_printf_float+0x1ae>
 8005b7e:	3302      	adds	r3, #2
 8005b80:	e7f4      	b.n	8005b6c <_printf_float+0x198>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e7f2      	b.n	8005b6c <_printf_float+0x198>
 8005b86:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005b8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b8c:	4299      	cmp	r1, r3
 8005b8e:	db05      	blt.n	8005b9c <_printf_float+0x1c8>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	6121      	str	r1, [r4, #16]
 8005b94:	07d8      	lsls	r0, r3, #31
 8005b96:	d5ea      	bpl.n	8005b6e <_printf_float+0x19a>
 8005b98:	1c4b      	adds	r3, r1, #1
 8005b9a:	e7e7      	b.n	8005b6c <_printf_float+0x198>
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	bfcc      	ite	gt
 8005ba0:	2201      	movgt	r2, #1
 8005ba2:	f1c1 0202 	rsble	r2, r1, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	e7e0      	b.n	8005b6c <_printf_float+0x198>
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	055a      	lsls	r2, r3, #21
 8005bae:	d407      	bmi.n	8005bc0 <_printf_float+0x1ec>
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	4642      	mov	r2, r8
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b8      	blx	r7
 8005bba:	3001      	adds	r0, #1
 8005bbc:	d12b      	bne.n	8005c16 <_printf_float+0x242>
 8005bbe:	e764      	b.n	8005a8a <_printf_float+0xb6>
 8005bc0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005bc4:	f240 80dc 	bls.w	8005d80 <_printf_float+0x3ac>
 8005bc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f7fa feea 	bl	80009a8 <__aeabi_dcmpeq>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d033      	beq.n	8005c40 <_printf_float+0x26c>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4628      	mov	r0, r5
 8005bde:	4a35      	ldr	r2, [pc, #212]	@ (8005cb4 <_printf_float+0x2e0>)
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f af51 	beq.w	8005a8a <_printf_float+0xb6>
 8005be8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005bec:	4543      	cmp	r3, r8
 8005bee:	db02      	blt.n	8005bf6 <_printf_float+0x222>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	07d8      	lsls	r0, r3, #31
 8005bf4:	d50f      	bpl.n	8005c16 <_printf_float+0x242>
 8005bf6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	47b8      	blx	r7
 8005c00:	3001      	adds	r0, #1
 8005c02:	f43f af42 	beq.w	8005a8a <_printf_float+0xb6>
 8005c06:	f04f 0900 	mov.w	r9, #0
 8005c0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c0e:	f104 0a1a 	add.w	sl, r4, #26
 8005c12:	45c8      	cmp	r8, r9
 8005c14:	dc09      	bgt.n	8005c2a <_printf_float+0x256>
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	079b      	lsls	r3, r3, #30
 8005c1a:	f100 8102 	bmi.w	8005e22 <_printf_float+0x44e>
 8005c1e:	68e0      	ldr	r0, [r4, #12]
 8005c20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c22:	4298      	cmp	r0, r3
 8005c24:	bfb8      	it	lt
 8005c26:	4618      	movlt	r0, r3
 8005c28:	e731      	b.n	8005a8e <_printf_float+0xba>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	4631      	mov	r1, r6
 8005c30:	4628      	mov	r0, r5
 8005c32:	47b8      	blx	r7
 8005c34:	3001      	adds	r0, #1
 8005c36:	f43f af28 	beq.w	8005a8a <_printf_float+0xb6>
 8005c3a:	f109 0901 	add.w	r9, r9, #1
 8005c3e:	e7e8      	b.n	8005c12 <_printf_float+0x23e>
 8005c40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	dc38      	bgt.n	8005cb8 <_printf_float+0x2e4>
 8005c46:	2301      	movs	r3, #1
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	4a19      	ldr	r2, [pc, #100]	@ (8005cb4 <_printf_float+0x2e0>)
 8005c4e:	47b8      	blx	r7
 8005c50:	3001      	adds	r0, #1
 8005c52:	f43f af1a 	beq.w	8005a8a <_printf_float+0xb6>
 8005c56:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005c5a:	ea59 0303 	orrs.w	r3, r9, r3
 8005c5e:	d102      	bne.n	8005c66 <_printf_float+0x292>
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	07d9      	lsls	r1, r3, #31
 8005c64:	d5d7      	bpl.n	8005c16 <_printf_float+0x242>
 8005c66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b8      	blx	r7
 8005c70:	3001      	adds	r0, #1
 8005c72:	f43f af0a 	beq.w	8005a8a <_printf_float+0xb6>
 8005c76:	f04f 0a00 	mov.w	sl, #0
 8005c7a:	f104 0b1a 	add.w	fp, r4, #26
 8005c7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c80:	425b      	negs	r3, r3
 8005c82:	4553      	cmp	r3, sl
 8005c84:	dc01      	bgt.n	8005c8a <_printf_float+0x2b6>
 8005c86:	464b      	mov	r3, r9
 8005c88:	e793      	b.n	8005bb2 <_printf_float+0x1de>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	465a      	mov	r2, fp
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4628      	mov	r0, r5
 8005c92:	47b8      	blx	r7
 8005c94:	3001      	adds	r0, #1
 8005c96:	f43f aef8 	beq.w	8005a8a <_printf_float+0xb6>
 8005c9a:	f10a 0a01 	add.w	sl, sl, #1
 8005c9e:	e7ee      	b.n	8005c7e <_printf_float+0x2aa>
 8005ca0:	7fefffff 	.word	0x7fefffff
 8005ca4:	08009fc2 	.word	0x08009fc2
 8005ca8:	08009fc6 	.word	0x08009fc6
 8005cac:	08009fca 	.word	0x08009fca
 8005cb0:	08009fce 	.word	0x08009fce
 8005cb4:	08009fd2 	.word	0x08009fd2
 8005cb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005cba:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005cbe:	4553      	cmp	r3, sl
 8005cc0:	bfa8      	it	ge
 8005cc2:	4653      	movge	r3, sl
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	4699      	mov	r9, r3
 8005cc8:	dc36      	bgt.n	8005d38 <_printf_float+0x364>
 8005cca:	f04f 0b00 	mov.w	fp, #0
 8005cce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cd2:	f104 021a 	add.w	r2, r4, #26
 8005cd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005cd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cda:	eba3 0309 	sub.w	r3, r3, r9
 8005cde:	455b      	cmp	r3, fp
 8005ce0:	dc31      	bgt.n	8005d46 <_printf_float+0x372>
 8005ce2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ce4:	459a      	cmp	sl, r3
 8005ce6:	dc3a      	bgt.n	8005d5e <_printf_float+0x38a>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	07da      	lsls	r2, r3, #31
 8005cec:	d437      	bmi.n	8005d5e <_printf_float+0x38a>
 8005cee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cf0:	ebaa 0903 	sub.w	r9, sl, r3
 8005cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cf6:	ebaa 0303 	sub.w	r3, sl, r3
 8005cfa:	4599      	cmp	r9, r3
 8005cfc:	bfa8      	it	ge
 8005cfe:	4699      	movge	r9, r3
 8005d00:	f1b9 0f00 	cmp.w	r9, #0
 8005d04:	dc33      	bgt.n	8005d6e <_printf_float+0x39a>
 8005d06:	f04f 0800 	mov.w	r8, #0
 8005d0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d0e:	f104 0b1a 	add.w	fp, r4, #26
 8005d12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d14:	ebaa 0303 	sub.w	r3, sl, r3
 8005d18:	eba3 0309 	sub.w	r3, r3, r9
 8005d1c:	4543      	cmp	r3, r8
 8005d1e:	f77f af7a 	ble.w	8005c16 <_printf_float+0x242>
 8005d22:	2301      	movs	r3, #1
 8005d24:	465a      	mov	r2, fp
 8005d26:	4631      	mov	r1, r6
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f43f aeac 	beq.w	8005a8a <_printf_float+0xb6>
 8005d32:	f108 0801 	add.w	r8, r8, #1
 8005d36:	e7ec      	b.n	8005d12 <_printf_float+0x33e>
 8005d38:	4642      	mov	r2, r8
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	47b8      	blx	r7
 8005d40:	3001      	adds	r0, #1
 8005d42:	d1c2      	bne.n	8005cca <_printf_float+0x2f6>
 8005d44:	e6a1      	b.n	8005a8a <_printf_float+0xb6>
 8005d46:	2301      	movs	r3, #1
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	920a      	str	r2, [sp, #40]	@ 0x28
 8005d4e:	47b8      	blx	r7
 8005d50:	3001      	adds	r0, #1
 8005d52:	f43f ae9a 	beq.w	8005a8a <_printf_float+0xb6>
 8005d56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d58:	f10b 0b01 	add.w	fp, fp, #1
 8005d5c:	e7bb      	b.n	8005cd6 <_printf_float+0x302>
 8005d5e:	4631      	mov	r1, r6
 8005d60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d64:	4628      	mov	r0, r5
 8005d66:	47b8      	blx	r7
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d1c0      	bne.n	8005cee <_printf_float+0x31a>
 8005d6c:	e68d      	b.n	8005a8a <_printf_float+0xb6>
 8005d6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d70:	464b      	mov	r3, r9
 8005d72:	4631      	mov	r1, r6
 8005d74:	4628      	mov	r0, r5
 8005d76:	4442      	add	r2, r8
 8005d78:	47b8      	blx	r7
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	d1c3      	bne.n	8005d06 <_printf_float+0x332>
 8005d7e:	e684      	b.n	8005a8a <_printf_float+0xb6>
 8005d80:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005d84:	f1ba 0f01 	cmp.w	sl, #1
 8005d88:	dc01      	bgt.n	8005d8e <_printf_float+0x3ba>
 8005d8a:	07db      	lsls	r3, r3, #31
 8005d8c:	d536      	bpl.n	8005dfc <_printf_float+0x428>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	4642      	mov	r2, r8
 8005d92:	4631      	mov	r1, r6
 8005d94:	4628      	mov	r0, r5
 8005d96:	47b8      	blx	r7
 8005d98:	3001      	adds	r0, #1
 8005d9a:	f43f ae76 	beq.w	8005a8a <_printf_float+0xb6>
 8005d9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005da2:	4631      	mov	r1, r6
 8005da4:	4628      	mov	r0, r5
 8005da6:	47b8      	blx	r7
 8005da8:	3001      	adds	r0, #1
 8005daa:	f43f ae6e 	beq.w	8005a8a <_printf_float+0xb6>
 8005dae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005db2:	2200      	movs	r2, #0
 8005db4:	2300      	movs	r3, #0
 8005db6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dba:	f7fa fdf5 	bl	80009a8 <__aeabi_dcmpeq>
 8005dbe:	b9c0      	cbnz	r0, 8005df2 <_printf_float+0x41e>
 8005dc0:	4653      	mov	r3, sl
 8005dc2:	f108 0201 	add.w	r2, r8, #1
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b8      	blx	r7
 8005dcc:	3001      	adds	r0, #1
 8005dce:	d10c      	bne.n	8005dea <_printf_float+0x416>
 8005dd0:	e65b      	b.n	8005a8a <_printf_float+0xb6>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	465a      	mov	r2, fp
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	4628      	mov	r0, r5
 8005dda:	47b8      	blx	r7
 8005ddc:	3001      	adds	r0, #1
 8005dde:	f43f ae54 	beq.w	8005a8a <_printf_float+0xb6>
 8005de2:	f108 0801 	add.w	r8, r8, #1
 8005de6:	45d0      	cmp	r8, sl
 8005de8:	dbf3      	blt.n	8005dd2 <_printf_float+0x3fe>
 8005dea:	464b      	mov	r3, r9
 8005dec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005df0:	e6e0      	b.n	8005bb4 <_printf_float+0x1e0>
 8005df2:	f04f 0800 	mov.w	r8, #0
 8005df6:	f104 0b1a 	add.w	fp, r4, #26
 8005dfa:	e7f4      	b.n	8005de6 <_printf_float+0x412>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4642      	mov	r2, r8
 8005e00:	e7e1      	b.n	8005dc6 <_printf_float+0x3f2>
 8005e02:	2301      	movs	r3, #1
 8005e04:	464a      	mov	r2, r9
 8005e06:	4631      	mov	r1, r6
 8005e08:	4628      	mov	r0, r5
 8005e0a:	47b8      	blx	r7
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	f43f ae3c 	beq.w	8005a8a <_printf_float+0xb6>
 8005e12:	f108 0801 	add.w	r8, r8, #1
 8005e16:	68e3      	ldr	r3, [r4, #12]
 8005e18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005e1a:	1a5b      	subs	r3, r3, r1
 8005e1c:	4543      	cmp	r3, r8
 8005e1e:	dcf0      	bgt.n	8005e02 <_printf_float+0x42e>
 8005e20:	e6fd      	b.n	8005c1e <_printf_float+0x24a>
 8005e22:	f04f 0800 	mov.w	r8, #0
 8005e26:	f104 0919 	add.w	r9, r4, #25
 8005e2a:	e7f4      	b.n	8005e16 <_printf_float+0x442>

08005e2c <_printf_common>:
 8005e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e30:	4616      	mov	r6, r2
 8005e32:	4698      	mov	r8, r3
 8005e34:	688a      	ldr	r2, [r1, #8]
 8005e36:	690b      	ldr	r3, [r1, #16]
 8005e38:	4607      	mov	r7, r0
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	bfb8      	it	lt
 8005e3e:	4613      	movlt	r3, r2
 8005e40:	6033      	str	r3, [r6, #0]
 8005e42:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e46:	460c      	mov	r4, r1
 8005e48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e4c:	b10a      	cbz	r2, 8005e52 <_printf_common+0x26>
 8005e4e:	3301      	adds	r3, #1
 8005e50:	6033      	str	r3, [r6, #0]
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	0699      	lsls	r1, r3, #26
 8005e56:	bf42      	ittt	mi
 8005e58:	6833      	ldrmi	r3, [r6, #0]
 8005e5a:	3302      	addmi	r3, #2
 8005e5c:	6033      	strmi	r3, [r6, #0]
 8005e5e:	6825      	ldr	r5, [r4, #0]
 8005e60:	f015 0506 	ands.w	r5, r5, #6
 8005e64:	d106      	bne.n	8005e74 <_printf_common+0x48>
 8005e66:	f104 0a19 	add.w	sl, r4, #25
 8005e6a:	68e3      	ldr	r3, [r4, #12]
 8005e6c:	6832      	ldr	r2, [r6, #0]
 8005e6e:	1a9b      	subs	r3, r3, r2
 8005e70:	42ab      	cmp	r3, r5
 8005e72:	dc2b      	bgt.n	8005ecc <_printf_common+0xa0>
 8005e74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e78:	6822      	ldr	r2, [r4, #0]
 8005e7a:	3b00      	subs	r3, #0
 8005e7c:	bf18      	it	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	0692      	lsls	r2, r2, #26
 8005e82:	d430      	bmi.n	8005ee6 <_printf_common+0xba>
 8005e84:	4641      	mov	r1, r8
 8005e86:	4638      	mov	r0, r7
 8005e88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e8c:	47c8      	blx	r9
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d023      	beq.n	8005eda <_printf_common+0xae>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	6922      	ldr	r2, [r4, #16]
 8005e96:	f003 0306 	and.w	r3, r3, #6
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	bf14      	ite	ne
 8005e9e:	2500      	movne	r5, #0
 8005ea0:	6833      	ldreq	r3, [r6, #0]
 8005ea2:	f04f 0600 	mov.w	r6, #0
 8005ea6:	bf08      	it	eq
 8005ea8:	68e5      	ldreq	r5, [r4, #12]
 8005eaa:	f104 041a 	add.w	r4, r4, #26
 8005eae:	bf08      	it	eq
 8005eb0:	1aed      	subeq	r5, r5, r3
 8005eb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005eb6:	bf08      	it	eq
 8005eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	bfc4      	itt	gt
 8005ec0:	1a9b      	subgt	r3, r3, r2
 8005ec2:	18ed      	addgt	r5, r5, r3
 8005ec4:	42b5      	cmp	r5, r6
 8005ec6:	d11a      	bne.n	8005efe <_printf_common+0xd2>
 8005ec8:	2000      	movs	r0, #0
 8005eca:	e008      	b.n	8005ede <_printf_common+0xb2>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4652      	mov	r2, sl
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	47c8      	blx	r9
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	d103      	bne.n	8005ee2 <_printf_common+0xb6>
 8005eda:	f04f 30ff 	mov.w	r0, #4294967295
 8005ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee2:	3501      	adds	r5, #1
 8005ee4:	e7c1      	b.n	8005e6a <_printf_common+0x3e>
 8005ee6:	2030      	movs	r0, #48	@ 0x30
 8005ee8:	18e1      	adds	r1, r4, r3
 8005eea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ef4:	4422      	add	r2, r4
 8005ef6:	3302      	adds	r3, #2
 8005ef8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005efc:	e7c2      	b.n	8005e84 <_printf_common+0x58>
 8005efe:	2301      	movs	r3, #1
 8005f00:	4622      	mov	r2, r4
 8005f02:	4641      	mov	r1, r8
 8005f04:	4638      	mov	r0, r7
 8005f06:	47c8      	blx	r9
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d0e6      	beq.n	8005eda <_printf_common+0xae>
 8005f0c:	3601      	adds	r6, #1
 8005f0e:	e7d9      	b.n	8005ec4 <_printf_common+0x98>

08005f10 <_printf_i>:
 8005f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f14:	7e0f      	ldrb	r7, [r1, #24]
 8005f16:	4691      	mov	r9, r2
 8005f18:	2f78      	cmp	r7, #120	@ 0x78
 8005f1a:	4680      	mov	r8, r0
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	469a      	mov	sl, r3
 8005f20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f26:	d807      	bhi.n	8005f38 <_printf_i+0x28>
 8005f28:	2f62      	cmp	r7, #98	@ 0x62
 8005f2a:	d80a      	bhi.n	8005f42 <_printf_i+0x32>
 8005f2c:	2f00      	cmp	r7, #0
 8005f2e:	f000 80d3 	beq.w	80060d8 <_printf_i+0x1c8>
 8005f32:	2f58      	cmp	r7, #88	@ 0x58
 8005f34:	f000 80ba 	beq.w	80060ac <_printf_i+0x19c>
 8005f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f40:	e03a      	b.n	8005fb8 <_printf_i+0xa8>
 8005f42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f46:	2b15      	cmp	r3, #21
 8005f48:	d8f6      	bhi.n	8005f38 <_printf_i+0x28>
 8005f4a:	a101      	add	r1, pc, #4	@ (adr r1, 8005f50 <_printf_i+0x40>)
 8005f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f50:	08005fa9 	.word	0x08005fa9
 8005f54:	08005fbd 	.word	0x08005fbd
 8005f58:	08005f39 	.word	0x08005f39
 8005f5c:	08005f39 	.word	0x08005f39
 8005f60:	08005f39 	.word	0x08005f39
 8005f64:	08005f39 	.word	0x08005f39
 8005f68:	08005fbd 	.word	0x08005fbd
 8005f6c:	08005f39 	.word	0x08005f39
 8005f70:	08005f39 	.word	0x08005f39
 8005f74:	08005f39 	.word	0x08005f39
 8005f78:	08005f39 	.word	0x08005f39
 8005f7c:	080060bf 	.word	0x080060bf
 8005f80:	08005fe7 	.word	0x08005fe7
 8005f84:	08006079 	.word	0x08006079
 8005f88:	08005f39 	.word	0x08005f39
 8005f8c:	08005f39 	.word	0x08005f39
 8005f90:	080060e1 	.word	0x080060e1
 8005f94:	08005f39 	.word	0x08005f39
 8005f98:	08005fe7 	.word	0x08005fe7
 8005f9c:	08005f39 	.word	0x08005f39
 8005fa0:	08005f39 	.word	0x08005f39
 8005fa4:	08006081 	.word	0x08006081
 8005fa8:	6833      	ldr	r3, [r6, #0]
 8005faa:	1d1a      	adds	r2, r3, #4
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6032      	str	r2, [r6, #0]
 8005fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e09e      	b.n	80060fa <_printf_i+0x1ea>
 8005fbc:	6833      	ldr	r3, [r6, #0]
 8005fbe:	6820      	ldr	r0, [r4, #0]
 8005fc0:	1d19      	adds	r1, r3, #4
 8005fc2:	6031      	str	r1, [r6, #0]
 8005fc4:	0606      	lsls	r6, r0, #24
 8005fc6:	d501      	bpl.n	8005fcc <_printf_i+0xbc>
 8005fc8:	681d      	ldr	r5, [r3, #0]
 8005fca:	e003      	b.n	8005fd4 <_printf_i+0xc4>
 8005fcc:	0645      	lsls	r5, r0, #25
 8005fce:	d5fb      	bpl.n	8005fc8 <_printf_i+0xb8>
 8005fd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fd4:	2d00      	cmp	r5, #0
 8005fd6:	da03      	bge.n	8005fe0 <_printf_i+0xd0>
 8005fd8:	232d      	movs	r3, #45	@ 0x2d
 8005fda:	426d      	negs	r5, r5
 8005fdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fe0:	230a      	movs	r3, #10
 8005fe2:	4859      	ldr	r0, [pc, #356]	@ (8006148 <_printf_i+0x238>)
 8005fe4:	e011      	b.n	800600a <_printf_i+0xfa>
 8005fe6:	6821      	ldr	r1, [r4, #0]
 8005fe8:	6833      	ldr	r3, [r6, #0]
 8005fea:	0608      	lsls	r0, r1, #24
 8005fec:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ff0:	d402      	bmi.n	8005ff8 <_printf_i+0xe8>
 8005ff2:	0649      	lsls	r1, r1, #25
 8005ff4:	bf48      	it	mi
 8005ff6:	b2ad      	uxthmi	r5, r5
 8005ff8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ffa:	6033      	str	r3, [r6, #0]
 8005ffc:	bf14      	ite	ne
 8005ffe:	230a      	movne	r3, #10
 8006000:	2308      	moveq	r3, #8
 8006002:	4851      	ldr	r0, [pc, #324]	@ (8006148 <_printf_i+0x238>)
 8006004:	2100      	movs	r1, #0
 8006006:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800600a:	6866      	ldr	r6, [r4, #4]
 800600c:	2e00      	cmp	r6, #0
 800600e:	bfa8      	it	ge
 8006010:	6821      	ldrge	r1, [r4, #0]
 8006012:	60a6      	str	r6, [r4, #8]
 8006014:	bfa4      	itt	ge
 8006016:	f021 0104 	bicge.w	r1, r1, #4
 800601a:	6021      	strge	r1, [r4, #0]
 800601c:	b90d      	cbnz	r5, 8006022 <_printf_i+0x112>
 800601e:	2e00      	cmp	r6, #0
 8006020:	d04b      	beq.n	80060ba <_printf_i+0x1aa>
 8006022:	4616      	mov	r6, r2
 8006024:	fbb5 f1f3 	udiv	r1, r5, r3
 8006028:	fb03 5711 	mls	r7, r3, r1, r5
 800602c:	5dc7      	ldrb	r7, [r0, r7]
 800602e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006032:	462f      	mov	r7, r5
 8006034:	42bb      	cmp	r3, r7
 8006036:	460d      	mov	r5, r1
 8006038:	d9f4      	bls.n	8006024 <_printf_i+0x114>
 800603a:	2b08      	cmp	r3, #8
 800603c:	d10b      	bne.n	8006056 <_printf_i+0x146>
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	07df      	lsls	r7, r3, #31
 8006042:	d508      	bpl.n	8006056 <_printf_i+0x146>
 8006044:	6923      	ldr	r3, [r4, #16]
 8006046:	6861      	ldr	r1, [r4, #4]
 8006048:	4299      	cmp	r1, r3
 800604a:	bfde      	ittt	le
 800604c:	2330      	movle	r3, #48	@ 0x30
 800604e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006052:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006056:	1b92      	subs	r2, r2, r6
 8006058:	6122      	str	r2, [r4, #16]
 800605a:	464b      	mov	r3, r9
 800605c:	4621      	mov	r1, r4
 800605e:	4640      	mov	r0, r8
 8006060:	f8cd a000 	str.w	sl, [sp]
 8006064:	aa03      	add	r2, sp, #12
 8006066:	f7ff fee1 	bl	8005e2c <_printf_common>
 800606a:	3001      	adds	r0, #1
 800606c:	d14a      	bne.n	8006104 <_printf_i+0x1f4>
 800606e:	f04f 30ff 	mov.w	r0, #4294967295
 8006072:	b004      	add	sp, #16
 8006074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	f043 0320 	orr.w	r3, r3, #32
 800607e:	6023      	str	r3, [r4, #0]
 8006080:	2778      	movs	r7, #120	@ 0x78
 8006082:	4832      	ldr	r0, [pc, #200]	@ (800614c <_printf_i+0x23c>)
 8006084:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	6831      	ldr	r1, [r6, #0]
 800608c:	061f      	lsls	r7, r3, #24
 800608e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006092:	d402      	bmi.n	800609a <_printf_i+0x18a>
 8006094:	065f      	lsls	r7, r3, #25
 8006096:	bf48      	it	mi
 8006098:	b2ad      	uxthmi	r5, r5
 800609a:	6031      	str	r1, [r6, #0]
 800609c:	07d9      	lsls	r1, r3, #31
 800609e:	bf44      	itt	mi
 80060a0:	f043 0320 	orrmi.w	r3, r3, #32
 80060a4:	6023      	strmi	r3, [r4, #0]
 80060a6:	b11d      	cbz	r5, 80060b0 <_printf_i+0x1a0>
 80060a8:	2310      	movs	r3, #16
 80060aa:	e7ab      	b.n	8006004 <_printf_i+0xf4>
 80060ac:	4826      	ldr	r0, [pc, #152]	@ (8006148 <_printf_i+0x238>)
 80060ae:	e7e9      	b.n	8006084 <_printf_i+0x174>
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	f023 0320 	bic.w	r3, r3, #32
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	e7f6      	b.n	80060a8 <_printf_i+0x198>
 80060ba:	4616      	mov	r6, r2
 80060bc:	e7bd      	b.n	800603a <_printf_i+0x12a>
 80060be:	6833      	ldr	r3, [r6, #0]
 80060c0:	6825      	ldr	r5, [r4, #0]
 80060c2:	1d18      	adds	r0, r3, #4
 80060c4:	6961      	ldr	r1, [r4, #20]
 80060c6:	6030      	str	r0, [r6, #0]
 80060c8:	062e      	lsls	r6, r5, #24
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	d501      	bpl.n	80060d2 <_printf_i+0x1c2>
 80060ce:	6019      	str	r1, [r3, #0]
 80060d0:	e002      	b.n	80060d8 <_printf_i+0x1c8>
 80060d2:	0668      	lsls	r0, r5, #25
 80060d4:	d5fb      	bpl.n	80060ce <_printf_i+0x1be>
 80060d6:	8019      	strh	r1, [r3, #0]
 80060d8:	2300      	movs	r3, #0
 80060da:	4616      	mov	r6, r2
 80060dc:	6123      	str	r3, [r4, #16]
 80060de:	e7bc      	b.n	800605a <_printf_i+0x14a>
 80060e0:	6833      	ldr	r3, [r6, #0]
 80060e2:	2100      	movs	r1, #0
 80060e4:	1d1a      	adds	r2, r3, #4
 80060e6:	6032      	str	r2, [r6, #0]
 80060e8:	681e      	ldr	r6, [r3, #0]
 80060ea:	6862      	ldr	r2, [r4, #4]
 80060ec:	4630      	mov	r0, r6
 80060ee:	f000 fbe4 	bl	80068ba <memchr>
 80060f2:	b108      	cbz	r0, 80060f8 <_printf_i+0x1e8>
 80060f4:	1b80      	subs	r0, r0, r6
 80060f6:	6060      	str	r0, [r4, #4]
 80060f8:	6863      	ldr	r3, [r4, #4]
 80060fa:	6123      	str	r3, [r4, #16]
 80060fc:	2300      	movs	r3, #0
 80060fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006102:	e7aa      	b.n	800605a <_printf_i+0x14a>
 8006104:	4632      	mov	r2, r6
 8006106:	4649      	mov	r1, r9
 8006108:	4640      	mov	r0, r8
 800610a:	6923      	ldr	r3, [r4, #16]
 800610c:	47d0      	blx	sl
 800610e:	3001      	adds	r0, #1
 8006110:	d0ad      	beq.n	800606e <_printf_i+0x15e>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	079b      	lsls	r3, r3, #30
 8006116:	d413      	bmi.n	8006140 <_printf_i+0x230>
 8006118:	68e0      	ldr	r0, [r4, #12]
 800611a:	9b03      	ldr	r3, [sp, #12]
 800611c:	4298      	cmp	r0, r3
 800611e:	bfb8      	it	lt
 8006120:	4618      	movlt	r0, r3
 8006122:	e7a6      	b.n	8006072 <_printf_i+0x162>
 8006124:	2301      	movs	r3, #1
 8006126:	4632      	mov	r2, r6
 8006128:	4649      	mov	r1, r9
 800612a:	4640      	mov	r0, r8
 800612c:	47d0      	blx	sl
 800612e:	3001      	adds	r0, #1
 8006130:	d09d      	beq.n	800606e <_printf_i+0x15e>
 8006132:	3501      	adds	r5, #1
 8006134:	68e3      	ldr	r3, [r4, #12]
 8006136:	9903      	ldr	r1, [sp, #12]
 8006138:	1a5b      	subs	r3, r3, r1
 800613a:	42ab      	cmp	r3, r5
 800613c:	dcf2      	bgt.n	8006124 <_printf_i+0x214>
 800613e:	e7eb      	b.n	8006118 <_printf_i+0x208>
 8006140:	2500      	movs	r5, #0
 8006142:	f104 0619 	add.w	r6, r4, #25
 8006146:	e7f5      	b.n	8006134 <_printf_i+0x224>
 8006148:	08009fd4 	.word	0x08009fd4
 800614c:	08009fe5 	.word	0x08009fe5

08006150 <_scanf_float>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	b087      	sub	sp, #28
 8006156:	9303      	str	r3, [sp, #12]
 8006158:	688b      	ldr	r3, [r1, #8]
 800615a:	4617      	mov	r7, r2
 800615c:	1e5a      	subs	r2, r3, #1
 800615e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006162:	bf82      	ittt	hi
 8006164:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006168:	eb03 0b05 	addhi.w	fp, r3, r5
 800616c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006170:	460a      	mov	r2, r1
 8006172:	f04f 0500 	mov.w	r5, #0
 8006176:	bf88      	it	hi
 8006178:	608b      	strhi	r3, [r1, #8]
 800617a:	680b      	ldr	r3, [r1, #0]
 800617c:	4680      	mov	r8, r0
 800617e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006182:	f842 3b1c 	str.w	r3, [r2], #28
 8006186:	460c      	mov	r4, r1
 8006188:	bf98      	it	ls
 800618a:	f04f 0b00 	movls.w	fp, #0
 800618e:	4616      	mov	r6, r2
 8006190:	46aa      	mov	sl, r5
 8006192:	46a9      	mov	r9, r5
 8006194:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006198:	9201      	str	r2, [sp, #4]
 800619a:	9502      	str	r5, [sp, #8]
 800619c:	68a2      	ldr	r2, [r4, #8]
 800619e:	b152      	cbz	r2, 80061b6 <_scanf_float+0x66>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b4e      	cmp	r3, #78	@ 0x4e
 80061a6:	d865      	bhi.n	8006274 <_scanf_float+0x124>
 80061a8:	2b40      	cmp	r3, #64	@ 0x40
 80061aa:	d83d      	bhi.n	8006228 <_scanf_float+0xd8>
 80061ac:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80061b0:	b2c8      	uxtb	r0, r1
 80061b2:	280e      	cmp	r0, #14
 80061b4:	d93b      	bls.n	800622e <_scanf_float+0xde>
 80061b6:	f1b9 0f00 	cmp.w	r9, #0
 80061ba:	d003      	beq.n	80061c4 <_scanf_float+0x74>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061c2:	6023      	str	r3, [r4, #0]
 80061c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061c8:	f1ba 0f01 	cmp.w	sl, #1
 80061cc:	f200 8118 	bhi.w	8006400 <_scanf_float+0x2b0>
 80061d0:	9b01      	ldr	r3, [sp, #4]
 80061d2:	429e      	cmp	r6, r3
 80061d4:	f200 8109 	bhi.w	80063ea <_scanf_float+0x29a>
 80061d8:	2001      	movs	r0, #1
 80061da:	b007      	add	sp, #28
 80061dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80061e4:	2a0d      	cmp	r2, #13
 80061e6:	d8e6      	bhi.n	80061b6 <_scanf_float+0x66>
 80061e8:	a101      	add	r1, pc, #4	@ (adr r1, 80061f0 <_scanf_float+0xa0>)
 80061ea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061ee:	bf00      	nop
 80061f0:	08006337 	.word	0x08006337
 80061f4:	080061b7 	.word	0x080061b7
 80061f8:	080061b7 	.word	0x080061b7
 80061fc:	080061b7 	.word	0x080061b7
 8006200:	08006397 	.word	0x08006397
 8006204:	0800636f 	.word	0x0800636f
 8006208:	080061b7 	.word	0x080061b7
 800620c:	080061b7 	.word	0x080061b7
 8006210:	08006345 	.word	0x08006345
 8006214:	080061b7 	.word	0x080061b7
 8006218:	080061b7 	.word	0x080061b7
 800621c:	080061b7 	.word	0x080061b7
 8006220:	080061b7 	.word	0x080061b7
 8006224:	080062fd 	.word	0x080062fd
 8006228:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800622c:	e7da      	b.n	80061e4 <_scanf_float+0x94>
 800622e:	290e      	cmp	r1, #14
 8006230:	d8c1      	bhi.n	80061b6 <_scanf_float+0x66>
 8006232:	a001      	add	r0, pc, #4	@ (adr r0, 8006238 <_scanf_float+0xe8>)
 8006234:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006238:	080062ed 	.word	0x080062ed
 800623c:	080061b7 	.word	0x080061b7
 8006240:	080062ed 	.word	0x080062ed
 8006244:	08006383 	.word	0x08006383
 8006248:	080061b7 	.word	0x080061b7
 800624c:	08006295 	.word	0x08006295
 8006250:	080062d3 	.word	0x080062d3
 8006254:	080062d3 	.word	0x080062d3
 8006258:	080062d3 	.word	0x080062d3
 800625c:	080062d3 	.word	0x080062d3
 8006260:	080062d3 	.word	0x080062d3
 8006264:	080062d3 	.word	0x080062d3
 8006268:	080062d3 	.word	0x080062d3
 800626c:	080062d3 	.word	0x080062d3
 8006270:	080062d3 	.word	0x080062d3
 8006274:	2b6e      	cmp	r3, #110	@ 0x6e
 8006276:	d809      	bhi.n	800628c <_scanf_float+0x13c>
 8006278:	2b60      	cmp	r3, #96	@ 0x60
 800627a:	d8b1      	bhi.n	80061e0 <_scanf_float+0x90>
 800627c:	2b54      	cmp	r3, #84	@ 0x54
 800627e:	d07b      	beq.n	8006378 <_scanf_float+0x228>
 8006280:	2b59      	cmp	r3, #89	@ 0x59
 8006282:	d198      	bne.n	80061b6 <_scanf_float+0x66>
 8006284:	2d07      	cmp	r5, #7
 8006286:	d196      	bne.n	80061b6 <_scanf_float+0x66>
 8006288:	2508      	movs	r5, #8
 800628a:	e02c      	b.n	80062e6 <_scanf_float+0x196>
 800628c:	2b74      	cmp	r3, #116	@ 0x74
 800628e:	d073      	beq.n	8006378 <_scanf_float+0x228>
 8006290:	2b79      	cmp	r3, #121	@ 0x79
 8006292:	e7f6      	b.n	8006282 <_scanf_float+0x132>
 8006294:	6821      	ldr	r1, [r4, #0]
 8006296:	05c8      	lsls	r0, r1, #23
 8006298:	d51b      	bpl.n	80062d2 <_scanf_float+0x182>
 800629a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800629e:	6021      	str	r1, [r4, #0]
 80062a0:	f109 0901 	add.w	r9, r9, #1
 80062a4:	f1bb 0f00 	cmp.w	fp, #0
 80062a8:	d003      	beq.n	80062b2 <_scanf_float+0x162>
 80062aa:	3201      	adds	r2, #1
 80062ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062b0:	60a2      	str	r2, [r4, #8]
 80062b2:	68a3      	ldr	r3, [r4, #8]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	60a3      	str	r3, [r4, #8]
 80062b8:	6923      	ldr	r3, [r4, #16]
 80062ba:	3301      	adds	r3, #1
 80062bc:	6123      	str	r3, [r4, #16]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	607b      	str	r3, [r7, #4]
 80062c6:	f340 8087 	ble.w	80063d8 <_scanf_float+0x288>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	3301      	adds	r3, #1
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	e764      	b.n	800619c <_scanf_float+0x4c>
 80062d2:	eb1a 0105 	adds.w	r1, sl, r5
 80062d6:	f47f af6e 	bne.w	80061b6 <_scanf_float+0x66>
 80062da:	460d      	mov	r5, r1
 80062dc:	468a      	mov	sl, r1
 80062de:	6822      	ldr	r2, [r4, #0]
 80062e0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80062e4:	6022      	str	r2, [r4, #0]
 80062e6:	f806 3b01 	strb.w	r3, [r6], #1
 80062ea:	e7e2      	b.n	80062b2 <_scanf_float+0x162>
 80062ec:	6822      	ldr	r2, [r4, #0]
 80062ee:	0610      	lsls	r0, r2, #24
 80062f0:	f57f af61 	bpl.w	80061b6 <_scanf_float+0x66>
 80062f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062f8:	6022      	str	r2, [r4, #0]
 80062fa:	e7f4      	b.n	80062e6 <_scanf_float+0x196>
 80062fc:	f1ba 0f00 	cmp.w	sl, #0
 8006300:	d10e      	bne.n	8006320 <_scanf_float+0x1d0>
 8006302:	f1b9 0f00 	cmp.w	r9, #0
 8006306:	d10e      	bne.n	8006326 <_scanf_float+0x1d6>
 8006308:	6822      	ldr	r2, [r4, #0]
 800630a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800630e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006312:	d108      	bne.n	8006326 <_scanf_float+0x1d6>
 8006314:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006318:	f04f 0a01 	mov.w	sl, #1
 800631c:	6022      	str	r2, [r4, #0]
 800631e:	e7e2      	b.n	80062e6 <_scanf_float+0x196>
 8006320:	f1ba 0f02 	cmp.w	sl, #2
 8006324:	d055      	beq.n	80063d2 <_scanf_float+0x282>
 8006326:	2d01      	cmp	r5, #1
 8006328:	d002      	beq.n	8006330 <_scanf_float+0x1e0>
 800632a:	2d04      	cmp	r5, #4
 800632c:	f47f af43 	bne.w	80061b6 <_scanf_float+0x66>
 8006330:	3501      	adds	r5, #1
 8006332:	b2ed      	uxtb	r5, r5
 8006334:	e7d7      	b.n	80062e6 <_scanf_float+0x196>
 8006336:	f1ba 0f01 	cmp.w	sl, #1
 800633a:	f47f af3c 	bne.w	80061b6 <_scanf_float+0x66>
 800633e:	f04f 0a02 	mov.w	sl, #2
 8006342:	e7d0      	b.n	80062e6 <_scanf_float+0x196>
 8006344:	b97d      	cbnz	r5, 8006366 <_scanf_float+0x216>
 8006346:	f1b9 0f00 	cmp.w	r9, #0
 800634a:	f47f af37 	bne.w	80061bc <_scanf_float+0x6c>
 800634e:	6822      	ldr	r2, [r4, #0]
 8006350:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006354:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006358:	f040 8103 	bne.w	8006562 <_scanf_float+0x412>
 800635c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006360:	2501      	movs	r5, #1
 8006362:	6022      	str	r2, [r4, #0]
 8006364:	e7bf      	b.n	80062e6 <_scanf_float+0x196>
 8006366:	2d03      	cmp	r5, #3
 8006368:	d0e2      	beq.n	8006330 <_scanf_float+0x1e0>
 800636a:	2d05      	cmp	r5, #5
 800636c:	e7de      	b.n	800632c <_scanf_float+0x1dc>
 800636e:	2d02      	cmp	r5, #2
 8006370:	f47f af21 	bne.w	80061b6 <_scanf_float+0x66>
 8006374:	2503      	movs	r5, #3
 8006376:	e7b6      	b.n	80062e6 <_scanf_float+0x196>
 8006378:	2d06      	cmp	r5, #6
 800637a:	f47f af1c 	bne.w	80061b6 <_scanf_float+0x66>
 800637e:	2507      	movs	r5, #7
 8006380:	e7b1      	b.n	80062e6 <_scanf_float+0x196>
 8006382:	6822      	ldr	r2, [r4, #0]
 8006384:	0591      	lsls	r1, r2, #22
 8006386:	f57f af16 	bpl.w	80061b6 <_scanf_float+0x66>
 800638a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800638e:	6022      	str	r2, [r4, #0]
 8006390:	f8cd 9008 	str.w	r9, [sp, #8]
 8006394:	e7a7      	b.n	80062e6 <_scanf_float+0x196>
 8006396:	6822      	ldr	r2, [r4, #0]
 8006398:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800639c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80063a0:	d006      	beq.n	80063b0 <_scanf_float+0x260>
 80063a2:	0550      	lsls	r0, r2, #21
 80063a4:	f57f af07 	bpl.w	80061b6 <_scanf_float+0x66>
 80063a8:	f1b9 0f00 	cmp.w	r9, #0
 80063ac:	f000 80d9 	beq.w	8006562 <_scanf_float+0x412>
 80063b0:	0591      	lsls	r1, r2, #22
 80063b2:	bf58      	it	pl
 80063b4:	9902      	ldrpl	r1, [sp, #8]
 80063b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80063ba:	bf58      	it	pl
 80063bc:	eba9 0101 	subpl.w	r1, r9, r1
 80063c0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80063c4:	f04f 0900 	mov.w	r9, #0
 80063c8:	bf58      	it	pl
 80063ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80063ce:	6022      	str	r2, [r4, #0]
 80063d0:	e789      	b.n	80062e6 <_scanf_float+0x196>
 80063d2:	f04f 0a03 	mov.w	sl, #3
 80063d6:	e786      	b.n	80062e6 <_scanf_float+0x196>
 80063d8:	4639      	mov	r1, r7
 80063da:	4640      	mov	r0, r8
 80063dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80063e0:	4798      	blx	r3
 80063e2:	2800      	cmp	r0, #0
 80063e4:	f43f aeda 	beq.w	800619c <_scanf_float+0x4c>
 80063e8:	e6e5      	b.n	80061b6 <_scanf_float+0x66>
 80063ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063ee:	463a      	mov	r2, r7
 80063f0:	4640      	mov	r0, r8
 80063f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063f6:	4798      	blx	r3
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	6123      	str	r3, [r4, #16]
 80063fe:	e6e7      	b.n	80061d0 <_scanf_float+0x80>
 8006400:	1e6b      	subs	r3, r5, #1
 8006402:	2b06      	cmp	r3, #6
 8006404:	d824      	bhi.n	8006450 <_scanf_float+0x300>
 8006406:	2d02      	cmp	r5, #2
 8006408:	d836      	bhi.n	8006478 <_scanf_float+0x328>
 800640a:	9b01      	ldr	r3, [sp, #4]
 800640c:	429e      	cmp	r6, r3
 800640e:	f67f aee3 	bls.w	80061d8 <_scanf_float+0x88>
 8006412:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006416:	463a      	mov	r2, r7
 8006418:	4640      	mov	r0, r8
 800641a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800641e:	4798      	blx	r3
 8006420:	6923      	ldr	r3, [r4, #16]
 8006422:	3b01      	subs	r3, #1
 8006424:	6123      	str	r3, [r4, #16]
 8006426:	e7f0      	b.n	800640a <_scanf_float+0x2ba>
 8006428:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800642c:	463a      	mov	r2, r7
 800642e:	4640      	mov	r0, r8
 8006430:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006434:	4798      	blx	r3
 8006436:	6923      	ldr	r3, [r4, #16]
 8006438:	3b01      	subs	r3, #1
 800643a:	6123      	str	r3, [r4, #16]
 800643c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006440:	fa5f fa8a 	uxtb.w	sl, sl
 8006444:	f1ba 0f02 	cmp.w	sl, #2
 8006448:	d1ee      	bne.n	8006428 <_scanf_float+0x2d8>
 800644a:	3d03      	subs	r5, #3
 800644c:	b2ed      	uxtb	r5, r5
 800644e:	1b76      	subs	r6, r6, r5
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	05da      	lsls	r2, r3, #23
 8006454:	d530      	bpl.n	80064b8 <_scanf_float+0x368>
 8006456:	055b      	lsls	r3, r3, #21
 8006458:	d511      	bpl.n	800647e <_scanf_float+0x32e>
 800645a:	9b01      	ldr	r3, [sp, #4]
 800645c:	429e      	cmp	r6, r3
 800645e:	f67f aebb 	bls.w	80061d8 <_scanf_float+0x88>
 8006462:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006466:	463a      	mov	r2, r7
 8006468:	4640      	mov	r0, r8
 800646a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800646e:	4798      	blx	r3
 8006470:	6923      	ldr	r3, [r4, #16]
 8006472:	3b01      	subs	r3, #1
 8006474:	6123      	str	r3, [r4, #16]
 8006476:	e7f0      	b.n	800645a <_scanf_float+0x30a>
 8006478:	46aa      	mov	sl, r5
 800647a:	46b3      	mov	fp, r6
 800647c:	e7de      	b.n	800643c <_scanf_float+0x2ec>
 800647e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006482:	6923      	ldr	r3, [r4, #16]
 8006484:	2965      	cmp	r1, #101	@ 0x65
 8006486:	f103 33ff 	add.w	r3, r3, #4294967295
 800648a:	f106 35ff 	add.w	r5, r6, #4294967295
 800648e:	6123      	str	r3, [r4, #16]
 8006490:	d00c      	beq.n	80064ac <_scanf_float+0x35c>
 8006492:	2945      	cmp	r1, #69	@ 0x45
 8006494:	d00a      	beq.n	80064ac <_scanf_float+0x35c>
 8006496:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800649a:	463a      	mov	r2, r7
 800649c:	4640      	mov	r0, r8
 800649e:	4798      	blx	r3
 80064a0:	6923      	ldr	r3, [r4, #16]
 80064a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	1eb5      	subs	r5, r6, #2
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	463a      	mov	r2, r7
 80064ae:	4640      	mov	r0, r8
 80064b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80064b4:	4798      	blx	r3
 80064b6:	462e      	mov	r6, r5
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	f012 0210 	ands.w	r2, r2, #16
 80064be:	d001      	beq.n	80064c4 <_scanf_float+0x374>
 80064c0:	2000      	movs	r0, #0
 80064c2:	e68a      	b.n	80061da <_scanf_float+0x8a>
 80064c4:	7032      	strb	r2, [r6, #0]
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80064cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d0:	d11c      	bne.n	800650c <_scanf_float+0x3bc>
 80064d2:	9b02      	ldr	r3, [sp, #8]
 80064d4:	454b      	cmp	r3, r9
 80064d6:	eba3 0209 	sub.w	r2, r3, r9
 80064da:	d123      	bne.n	8006524 <_scanf_float+0x3d4>
 80064dc:	2200      	movs	r2, #0
 80064de:	4640      	mov	r0, r8
 80064e0:	9901      	ldr	r1, [sp, #4]
 80064e2:	f002 fbed 	bl	8008cc0 <_strtod_r>
 80064e6:	9b03      	ldr	r3, [sp, #12]
 80064e8:	6825      	ldr	r5, [r4, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f015 0f02 	tst.w	r5, #2
 80064f0:	4606      	mov	r6, r0
 80064f2:	460f      	mov	r7, r1
 80064f4:	f103 0204 	add.w	r2, r3, #4
 80064f8:	d01f      	beq.n	800653a <_scanf_float+0x3ea>
 80064fa:	9903      	ldr	r1, [sp, #12]
 80064fc:	600a      	str	r2, [r1, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	e9c3 6700 	strd	r6, r7, [r3]
 8006504:	68e3      	ldr	r3, [r4, #12]
 8006506:	3301      	adds	r3, #1
 8006508:	60e3      	str	r3, [r4, #12]
 800650a:	e7d9      	b.n	80064c0 <_scanf_float+0x370>
 800650c:	9b04      	ldr	r3, [sp, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0e4      	beq.n	80064dc <_scanf_float+0x38c>
 8006512:	9905      	ldr	r1, [sp, #20]
 8006514:	230a      	movs	r3, #10
 8006516:	4640      	mov	r0, r8
 8006518:	3101      	adds	r1, #1
 800651a:	f002 fc51 	bl	8008dc0 <_strtol_r>
 800651e:	9b04      	ldr	r3, [sp, #16]
 8006520:	9e05      	ldr	r6, [sp, #20]
 8006522:	1ac2      	subs	r2, r0, r3
 8006524:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006528:	429e      	cmp	r6, r3
 800652a:	bf28      	it	cs
 800652c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006530:	4630      	mov	r0, r6
 8006532:	490d      	ldr	r1, [pc, #52]	@ (8006568 <_scanf_float+0x418>)
 8006534:	f000 f8de 	bl	80066f4 <siprintf>
 8006538:	e7d0      	b.n	80064dc <_scanf_float+0x38c>
 800653a:	076d      	lsls	r5, r5, #29
 800653c:	d4dd      	bmi.n	80064fa <_scanf_float+0x3aa>
 800653e:	9d03      	ldr	r5, [sp, #12]
 8006540:	602a      	str	r2, [r5, #0]
 8006542:	681d      	ldr	r5, [r3, #0]
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	f7fa fa60 	bl	8000a0c <__aeabi_dcmpun>
 800654c:	b120      	cbz	r0, 8006558 <_scanf_float+0x408>
 800654e:	4807      	ldr	r0, [pc, #28]	@ (800656c <_scanf_float+0x41c>)
 8006550:	f000 f9c2 	bl	80068d8 <nanf>
 8006554:	6028      	str	r0, [r5, #0]
 8006556:	e7d5      	b.n	8006504 <_scanf_float+0x3b4>
 8006558:	4630      	mov	r0, r6
 800655a:	4639      	mov	r1, r7
 800655c:	f7fa fab4 	bl	8000ac8 <__aeabi_d2f>
 8006560:	e7f8      	b.n	8006554 <_scanf_float+0x404>
 8006562:	f04f 0900 	mov.w	r9, #0
 8006566:	e62d      	b.n	80061c4 <_scanf_float+0x74>
 8006568:	08009ff6 	.word	0x08009ff6
 800656c:	0800a38d 	.word	0x0800a38d

08006570 <std>:
 8006570:	2300      	movs	r3, #0
 8006572:	b510      	push	{r4, lr}
 8006574:	4604      	mov	r4, r0
 8006576:	e9c0 3300 	strd	r3, r3, [r0]
 800657a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800657e:	6083      	str	r3, [r0, #8]
 8006580:	8181      	strh	r1, [r0, #12]
 8006582:	6643      	str	r3, [r0, #100]	@ 0x64
 8006584:	81c2      	strh	r2, [r0, #14]
 8006586:	6183      	str	r3, [r0, #24]
 8006588:	4619      	mov	r1, r3
 800658a:	2208      	movs	r2, #8
 800658c:	305c      	adds	r0, #92	@ 0x5c
 800658e:	f000 f914 	bl	80067ba <memset>
 8006592:	4b0d      	ldr	r3, [pc, #52]	@ (80065c8 <std+0x58>)
 8006594:	6224      	str	r4, [r4, #32]
 8006596:	6263      	str	r3, [r4, #36]	@ 0x24
 8006598:	4b0c      	ldr	r3, [pc, #48]	@ (80065cc <std+0x5c>)
 800659a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800659c:	4b0c      	ldr	r3, [pc, #48]	@ (80065d0 <std+0x60>)
 800659e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065a0:	4b0c      	ldr	r3, [pc, #48]	@ (80065d4 <std+0x64>)
 80065a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80065a4:	4b0c      	ldr	r3, [pc, #48]	@ (80065d8 <std+0x68>)
 80065a6:	429c      	cmp	r4, r3
 80065a8:	d006      	beq.n	80065b8 <std+0x48>
 80065aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065ae:	4294      	cmp	r4, r2
 80065b0:	d002      	beq.n	80065b8 <std+0x48>
 80065b2:	33d0      	adds	r3, #208	@ 0xd0
 80065b4:	429c      	cmp	r4, r3
 80065b6:	d105      	bne.n	80065c4 <std+0x54>
 80065b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065c0:	f000 b978 	b.w	80068b4 <__retarget_lock_init_recursive>
 80065c4:	bd10      	pop	{r4, pc}
 80065c6:	bf00      	nop
 80065c8:	08006735 	.word	0x08006735
 80065cc:	08006757 	.word	0x08006757
 80065d0:	0800678f 	.word	0x0800678f
 80065d4:	080067b3 	.word	0x080067b3
 80065d8:	200002a4 	.word	0x200002a4

080065dc <stdio_exit_handler>:
 80065dc:	4a02      	ldr	r2, [pc, #8]	@ (80065e8 <stdio_exit_handler+0xc>)
 80065de:	4903      	ldr	r1, [pc, #12]	@ (80065ec <stdio_exit_handler+0x10>)
 80065e0:	4803      	ldr	r0, [pc, #12]	@ (80065f0 <stdio_exit_handler+0x14>)
 80065e2:	f000 b869 	b.w	80066b8 <_fwalk_sglue>
 80065e6:	bf00      	nop
 80065e8:	20000010 	.word	0x20000010
 80065ec:	08009175 	.word	0x08009175
 80065f0:	20000020 	.word	0x20000020

080065f4 <cleanup_stdio>:
 80065f4:	6841      	ldr	r1, [r0, #4]
 80065f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006628 <cleanup_stdio+0x34>)
 80065f8:	b510      	push	{r4, lr}
 80065fa:	4299      	cmp	r1, r3
 80065fc:	4604      	mov	r4, r0
 80065fe:	d001      	beq.n	8006604 <cleanup_stdio+0x10>
 8006600:	f002 fdb8 	bl	8009174 <_fflush_r>
 8006604:	68a1      	ldr	r1, [r4, #8]
 8006606:	4b09      	ldr	r3, [pc, #36]	@ (800662c <cleanup_stdio+0x38>)
 8006608:	4299      	cmp	r1, r3
 800660a:	d002      	beq.n	8006612 <cleanup_stdio+0x1e>
 800660c:	4620      	mov	r0, r4
 800660e:	f002 fdb1 	bl	8009174 <_fflush_r>
 8006612:	68e1      	ldr	r1, [r4, #12]
 8006614:	4b06      	ldr	r3, [pc, #24]	@ (8006630 <cleanup_stdio+0x3c>)
 8006616:	4299      	cmp	r1, r3
 8006618:	d004      	beq.n	8006624 <cleanup_stdio+0x30>
 800661a:	4620      	mov	r0, r4
 800661c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006620:	f002 bda8 	b.w	8009174 <_fflush_r>
 8006624:	bd10      	pop	{r4, pc}
 8006626:	bf00      	nop
 8006628:	200002a4 	.word	0x200002a4
 800662c:	2000030c 	.word	0x2000030c
 8006630:	20000374 	.word	0x20000374

08006634 <global_stdio_init.part.0>:
 8006634:	b510      	push	{r4, lr}
 8006636:	4b0b      	ldr	r3, [pc, #44]	@ (8006664 <global_stdio_init.part.0+0x30>)
 8006638:	4c0b      	ldr	r4, [pc, #44]	@ (8006668 <global_stdio_init.part.0+0x34>)
 800663a:	4a0c      	ldr	r2, [pc, #48]	@ (800666c <global_stdio_init.part.0+0x38>)
 800663c:	4620      	mov	r0, r4
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	2104      	movs	r1, #4
 8006642:	2200      	movs	r2, #0
 8006644:	f7ff ff94 	bl	8006570 <std>
 8006648:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800664c:	2201      	movs	r2, #1
 800664e:	2109      	movs	r1, #9
 8006650:	f7ff ff8e 	bl	8006570 <std>
 8006654:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006658:	2202      	movs	r2, #2
 800665a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800665e:	2112      	movs	r1, #18
 8006660:	f7ff bf86 	b.w	8006570 <std>
 8006664:	200003dc 	.word	0x200003dc
 8006668:	200002a4 	.word	0x200002a4
 800666c:	080065dd 	.word	0x080065dd

08006670 <__sfp_lock_acquire>:
 8006670:	4801      	ldr	r0, [pc, #4]	@ (8006678 <__sfp_lock_acquire+0x8>)
 8006672:	f000 b920 	b.w	80068b6 <__retarget_lock_acquire_recursive>
 8006676:	bf00      	nop
 8006678:	200003e5 	.word	0x200003e5

0800667c <__sfp_lock_release>:
 800667c:	4801      	ldr	r0, [pc, #4]	@ (8006684 <__sfp_lock_release+0x8>)
 800667e:	f000 b91b 	b.w	80068b8 <__retarget_lock_release_recursive>
 8006682:	bf00      	nop
 8006684:	200003e5 	.word	0x200003e5

08006688 <__sinit>:
 8006688:	b510      	push	{r4, lr}
 800668a:	4604      	mov	r4, r0
 800668c:	f7ff fff0 	bl	8006670 <__sfp_lock_acquire>
 8006690:	6a23      	ldr	r3, [r4, #32]
 8006692:	b11b      	cbz	r3, 800669c <__sinit+0x14>
 8006694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006698:	f7ff bff0 	b.w	800667c <__sfp_lock_release>
 800669c:	4b04      	ldr	r3, [pc, #16]	@ (80066b0 <__sinit+0x28>)
 800669e:	6223      	str	r3, [r4, #32]
 80066a0:	4b04      	ldr	r3, [pc, #16]	@ (80066b4 <__sinit+0x2c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1f5      	bne.n	8006694 <__sinit+0xc>
 80066a8:	f7ff ffc4 	bl	8006634 <global_stdio_init.part.0>
 80066ac:	e7f2      	b.n	8006694 <__sinit+0xc>
 80066ae:	bf00      	nop
 80066b0:	080065f5 	.word	0x080065f5
 80066b4:	200003dc 	.word	0x200003dc

080066b8 <_fwalk_sglue>:
 80066b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066bc:	4607      	mov	r7, r0
 80066be:	4688      	mov	r8, r1
 80066c0:	4614      	mov	r4, r2
 80066c2:	2600      	movs	r6, #0
 80066c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066c8:	f1b9 0901 	subs.w	r9, r9, #1
 80066cc:	d505      	bpl.n	80066da <_fwalk_sglue+0x22>
 80066ce:	6824      	ldr	r4, [r4, #0]
 80066d0:	2c00      	cmp	r4, #0
 80066d2:	d1f7      	bne.n	80066c4 <_fwalk_sglue+0xc>
 80066d4:	4630      	mov	r0, r6
 80066d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066da:	89ab      	ldrh	r3, [r5, #12]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d907      	bls.n	80066f0 <_fwalk_sglue+0x38>
 80066e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066e4:	3301      	adds	r3, #1
 80066e6:	d003      	beq.n	80066f0 <_fwalk_sglue+0x38>
 80066e8:	4629      	mov	r1, r5
 80066ea:	4638      	mov	r0, r7
 80066ec:	47c0      	blx	r8
 80066ee:	4306      	orrs	r6, r0
 80066f0:	3568      	adds	r5, #104	@ 0x68
 80066f2:	e7e9      	b.n	80066c8 <_fwalk_sglue+0x10>

080066f4 <siprintf>:
 80066f4:	b40e      	push	{r1, r2, r3}
 80066f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80066fa:	b500      	push	{lr}
 80066fc:	b09c      	sub	sp, #112	@ 0x70
 80066fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8006700:	9002      	str	r0, [sp, #8]
 8006702:	9006      	str	r0, [sp, #24]
 8006704:	9107      	str	r1, [sp, #28]
 8006706:	9104      	str	r1, [sp, #16]
 8006708:	4808      	ldr	r0, [pc, #32]	@ (800672c <siprintf+0x38>)
 800670a:	4909      	ldr	r1, [pc, #36]	@ (8006730 <siprintf+0x3c>)
 800670c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006710:	9105      	str	r1, [sp, #20]
 8006712:	6800      	ldr	r0, [r0, #0]
 8006714:	a902      	add	r1, sp, #8
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	f002 fbb0 	bl	8008e7c <_svfiprintf_r>
 800671c:	2200      	movs	r2, #0
 800671e:	9b02      	ldr	r3, [sp, #8]
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	b01c      	add	sp, #112	@ 0x70
 8006724:	f85d eb04 	ldr.w	lr, [sp], #4
 8006728:	b003      	add	sp, #12
 800672a:	4770      	bx	lr
 800672c:	2000001c 	.word	0x2000001c
 8006730:	ffff0208 	.word	0xffff0208

08006734 <__sread>:
 8006734:	b510      	push	{r4, lr}
 8006736:	460c      	mov	r4, r1
 8006738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800673c:	f000 f86c 	bl	8006818 <_read_r>
 8006740:	2800      	cmp	r0, #0
 8006742:	bfab      	itete	ge
 8006744:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006746:	89a3      	ldrhlt	r3, [r4, #12]
 8006748:	181b      	addge	r3, r3, r0
 800674a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800674e:	bfac      	ite	ge
 8006750:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006752:	81a3      	strhlt	r3, [r4, #12]
 8006754:	bd10      	pop	{r4, pc}

08006756 <__swrite>:
 8006756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675a:	461f      	mov	r7, r3
 800675c:	898b      	ldrh	r3, [r1, #12]
 800675e:	4605      	mov	r5, r0
 8006760:	05db      	lsls	r3, r3, #23
 8006762:	460c      	mov	r4, r1
 8006764:	4616      	mov	r6, r2
 8006766:	d505      	bpl.n	8006774 <__swrite+0x1e>
 8006768:	2302      	movs	r3, #2
 800676a:	2200      	movs	r2, #0
 800676c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006770:	f000 f840 	bl	80067f4 <_lseek_r>
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	4632      	mov	r2, r6
 8006778:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800677c:	81a3      	strh	r3, [r4, #12]
 800677e:	4628      	mov	r0, r5
 8006780:	463b      	mov	r3, r7
 8006782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800678a:	f000 b857 	b.w	800683c <_write_r>

0800678e <__sseek>:
 800678e:	b510      	push	{r4, lr}
 8006790:	460c      	mov	r4, r1
 8006792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006796:	f000 f82d 	bl	80067f4 <_lseek_r>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	bf15      	itete	ne
 80067a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80067a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80067a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80067aa:	81a3      	strheq	r3, [r4, #12]
 80067ac:	bf18      	it	ne
 80067ae:	81a3      	strhne	r3, [r4, #12]
 80067b0:	bd10      	pop	{r4, pc}

080067b2 <__sclose>:
 80067b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b6:	f000 b80d 	b.w	80067d4 <_close_r>

080067ba <memset>:
 80067ba:	4603      	mov	r3, r0
 80067bc:	4402      	add	r2, r0
 80067be:	4293      	cmp	r3, r2
 80067c0:	d100      	bne.n	80067c4 <memset+0xa>
 80067c2:	4770      	bx	lr
 80067c4:	f803 1b01 	strb.w	r1, [r3], #1
 80067c8:	e7f9      	b.n	80067be <memset+0x4>
	...

080067cc <_localeconv_r>:
 80067cc:	4800      	ldr	r0, [pc, #0]	@ (80067d0 <_localeconv_r+0x4>)
 80067ce:	4770      	bx	lr
 80067d0:	2000015c 	.word	0x2000015c

080067d4 <_close_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	2300      	movs	r3, #0
 80067d8:	4d05      	ldr	r5, [pc, #20]	@ (80067f0 <_close_r+0x1c>)
 80067da:	4604      	mov	r4, r0
 80067dc:	4608      	mov	r0, r1
 80067de:	602b      	str	r3, [r5, #0]
 80067e0:	f7fa ff31 	bl	8001646 <_close>
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	d102      	bne.n	80067ee <_close_r+0x1a>
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	b103      	cbz	r3, 80067ee <_close_r+0x1a>
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	bd38      	pop	{r3, r4, r5, pc}
 80067f0:	200003e0 	.word	0x200003e0

080067f4 <_lseek_r>:
 80067f4:	b538      	push	{r3, r4, r5, lr}
 80067f6:	4604      	mov	r4, r0
 80067f8:	4608      	mov	r0, r1
 80067fa:	4611      	mov	r1, r2
 80067fc:	2200      	movs	r2, #0
 80067fe:	4d05      	ldr	r5, [pc, #20]	@ (8006814 <_lseek_r+0x20>)
 8006800:	602a      	str	r2, [r5, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	f7fa ff43 	bl	800168e <_lseek>
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d102      	bne.n	8006812 <_lseek_r+0x1e>
 800680c:	682b      	ldr	r3, [r5, #0]
 800680e:	b103      	cbz	r3, 8006812 <_lseek_r+0x1e>
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	bd38      	pop	{r3, r4, r5, pc}
 8006814:	200003e0 	.word	0x200003e0

08006818 <_read_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	4604      	mov	r4, r0
 800681c:	4608      	mov	r0, r1
 800681e:	4611      	mov	r1, r2
 8006820:	2200      	movs	r2, #0
 8006822:	4d05      	ldr	r5, [pc, #20]	@ (8006838 <_read_r+0x20>)
 8006824:	602a      	str	r2, [r5, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	f7fa fed4 	bl	80015d4 <_read>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d102      	bne.n	8006836 <_read_r+0x1e>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	b103      	cbz	r3, 8006836 <_read_r+0x1e>
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	bd38      	pop	{r3, r4, r5, pc}
 8006838:	200003e0 	.word	0x200003e0

0800683c <_write_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4604      	mov	r4, r0
 8006840:	4608      	mov	r0, r1
 8006842:	4611      	mov	r1, r2
 8006844:	2200      	movs	r2, #0
 8006846:	4d05      	ldr	r5, [pc, #20]	@ (800685c <_write_r+0x20>)
 8006848:	602a      	str	r2, [r5, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	f7fa fedf 	bl	800160e <_write>
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	d102      	bne.n	800685a <_write_r+0x1e>
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	b103      	cbz	r3, 800685a <_write_r+0x1e>
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	bd38      	pop	{r3, r4, r5, pc}
 800685c:	200003e0 	.word	0x200003e0

08006860 <__errno>:
 8006860:	4b01      	ldr	r3, [pc, #4]	@ (8006868 <__errno+0x8>)
 8006862:	6818      	ldr	r0, [r3, #0]
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	2000001c 	.word	0x2000001c

0800686c <__libc_init_array>:
 800686c:	b570      	push	{r4, r5, r6, lr}
 800686e:	2600      	movs	r6, #0
 8006870:	4d0c      	ldr	r5, [pc, #48]	@ (80068a4 <__libc_init_array+0x38>)
 8006872:	4c0d      	ldr	r4, [pc, #52]	@ (80068a8 <__libc_init_array+0x3c>)
 8006874:	1b64      	subs	r4, r4, r5
 8006876:	10a4      	asrs	r4, r4, #2
 8006878:	42a6      	cmp	r6, r4
 800687a:	d109      	bne.n	8006890 <__libc_init_array+0x24>
 800687c:	f003 fb66 	bl	8009f4c <_init>
 8006880:	2600      	movs	r6, #0
 8006882:	4d0a      	ldr	r5, [pc, #40]	@ (80068ac <__libc_init_array+0x40>)
 8006884:	4c0a      	ldr	r4, [pc, #40]	@ (80068b0 <__libc_init_array+0x44>)
 8006886:	1b64      	subs	r4, r4, r5
 8006888:	10a4      	asrs	r4, r4, #2
 800688a:	42a6      	cmp	r6, r4
 800688c:	d105      	bne.n	800689a <__libc_init_array+0x2e>
 800688e:	bd70      	pop	{r4, r5, r6, pc}
 8006890:	f855 3b04 	ldr.w	r3, [r5], #4
 8006894:	4798      	blx	r3
 8006896:	3601      	adds	r6, #1
 8006898:	e7ee      	b.n	8006878 <__libc_init_array+0xc>
 800689a:	f855 3b04 	ldr.w	r3, [r5], #4
 800689e:	4798      	blx	r3
 80068a0:	3601      	adds	r6, #1
 80068a2:	e7f2      	b.n	800688a <__libc_init_array+0x1e>
 80068a4:	0800a3f8 	.word	0x0800a3f8
 80068a8:	0800a3f8 	.word	0x0800a3f8
 80068ac:	0800a3f8 	.word	0x0800a3f8
 80068b0:	0800a3fc 	.word	0x0800a3fc

080068b4 <__retarget_lock_init_recursive>:
 80068b4:	4770      	bx	lr

080068b6 <__retarget_lock_acquire_recursive>:
 80068b6:	4770      	bx	lr

080068b8 <__retarget_lock_release_recursive>:
 80068b8:	4770      	bx	lr

080068ba <memchr>:
 80068ba:	4603      	mov	r3, r0
 80068bc:	b510      	push	{r4, lr}
 80068be:	b2c9      	uxtb	r1, r1
 80068c0:	4402      	add	r2, r0
 80068c2:	4293      	cmp	r3, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	d101      	bne.n	80068cc <memchr+0x12>
 80068c8:	2000      	movs	r0, #0
 80068ca:	e003      	b.n	80068d4 <memchr+0x1a>
 80068cc:	7804      	ldrb	r4, [r0, #0]
 80068ce:	3301      	adds	r3, #1
 80068d0:	428c      	cmp	r4, r1
 80068d2:	d1f6      	bne.n	80068c2 <memchr+0x8>
 80068d4:	bd10      	pop	{r4, pc}
	...

080068d8 <nanf>:
 80068d8:	4800      	ldr	r0, [pc, #0]	@ (80068dc <nanf+0x4>)
 80068da:	4770      	bx	lr
 80068dc:	7fc00000 	.word	0x7fc00000

080068e0 <quorem>:
 80068e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	6903      	ldr	r3, [r0, #16]
 80068e6:	690c      	ldr	r4, [r1, #16]
 80068e8:	4607      	mov	r7, r0
 80068ea:	42a3      	cmp	r3, r4
 80068ec:	db7e      	blt.n	80069ec <quorem+0x10c>
 80068ee:	3c01      	subs	r4, #1
 80068f0:	00a3      	lsls	r3, r4, #2
 80068f2:	f100 0514 	add.w	r5, r0, #20
 80068f6:	f101 0814 	add.w	r8, r1, #20
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006906:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800690a:	3301      	adds	r3, #1
 800690c:	429a      	cmp	r2, r3
 800690e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006912:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006916:	d32e      	bcc.n	8006976 <quorem+0x96>
 8006918:	f04f 0a00 	mov.w	sl, #0
 800691c:	46c4      	mov	ip, r8
 800691e:	46ae      	mov	lr, r5
 8006920:	46d3      	mov	fp, sl
 8006922:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006926:	b298      	uxth	r0, r3
 8006928:	fb06 a000 	mla	r0, r6, r0, sl
 800692c:	0c1b      	lsrs	r3, r3, #16
 800692e:	0c02      	lsrs	r2, r0, #16
 8006930:	fb06 2303 	mla	r3, r6, r3, r2
 8006934:	f8de 2000 	ldr.w	r2, [lr]
 8006938:	b280      	uxth	r0, r0
 800693a:	b292      	uxth	r2, r2
 800693c:	1a12      	subs	r2, r2, r0
 800693e:	445a      	add	r2, fp
 8006940:	f8de 0000 	ldr.w	r0, [lr]
 8006944:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006948:	b29b      	uxth	r3, r3
 800694a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800694e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006952:	b292      	uxth	r2, r2
 8006954:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006958:	45e1      	cmp	r9, ip
 800695a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800695e:	f84e 2b04 	str.w	r2, [lr], #4
 8006962:	d2de      	bcs.n	8006922 <quorem+0x42>
 8006964:	9b00      	ldr	r3, [sp, #0]
 8006966:	58eb      	ldr	r3, [r5, r3]
 8006968:	b92b      	cbnz	r3, 8006976 <quorem+0x96>
 800696a:	9b01      	ldr	r3, [sp, #4]
 800696c:	3b04      	subs	r3, #4
 800696e:	429d      	cmp	r5, r3
 8006970:	461a      	mov	r2, r3
 8006972:	d32f      	bcc.n	80069d4 <quorem+0xf4>
 8006974:	613c      	str	r4, [r7, #16]
 8006976:	4638      	mov	r0, r7
 8006978:	f001 f9c2 	bl	8007d00 <__mcmp>
 800697c:	2800      	cmp	r0, #0
 800697e:	db25      	blt.n	80069cc <quorem+0xec>
 8006980:	4629      	mov	r1, r5
 8006982:	2000      	movs	r0, #0
 8006984:	f858 2b04 	ldr.w	r2, [r8], #4
 8006988:	f8d1 c000 	ldr.w	ip, [r1]
 800698c:	fa1f fe82 	uxth.w	lr, r2
 8006990:	fa1f f38c 	uxth.w	r3, ip
 8006994:	eba3 030e 	sub.w	r3, r3, lr
 8006998:	4403      	add	r3, r0
 800699a:	0c12      	lsrs	r2, r2, #16
 800699c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80069a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069aa:	45c1      	cmp	r9, r8
 80069ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069b0:	f841 3b04 	str.w	r3, [r1], #4
 80069b4:	d2e6      	bcs.n	8006984 <quorem+0xa4>
 80069b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069be:	b922      	cbnz	r2, 80069ca <quorem+0xea>
 80069c0:	3b04      	subs	r3, #4
 80069c2:	429d      	cmp	r5, r3
 80069c4:	461a      	mov	r2, r3
 80069c6:	d30b      	bcc.n	80069e0 <quorem+0x100>
 80069c8:	613c      	str	r4, [r7, #16]
 80069ca:	3601      	adds	r6, #1
 80069cc:	4630      	mov	r0, r6
 80069ce:	b003      	add	sp, #12
 80069d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	3b04      	subs	r3, #4
 80069d8:	2a00      	cmp	r2, #0
 80069da:	d1cb      	bne.n	8006974 <quorem+0x94>
 80069dc:	3c01      	subs	r4, #1
 80069de:	e7c6      	b.n	800696e <quorem+0x8e>
 80069e0:	6812      	ldr	r2, [r2, #0]
 80069e2:	3b04      	subs	r3, #4
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	d1ef      	bne.n	80069c8 <quorem+0xe8>
 80069e8:	3c01      	subs	r4, #1
 80069ea:	e7ea      	b.n	80069c2 <quorem+0xe2>
 80069ec:	2000      	movs	r0, #0
 80069ee:	e7ee      	b.n	80069ce <quorem+0xee>

080069f0 <_dtoa_r>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	4614      	mov	r4, r2
 80069f6:	461d      	mov	r5, r3
 80069f8:	69c7      	ldr	r7, [r0, #28]
 80069fa:	b097      	sub	sp, #92	@ 0x5c
 80069fc:	4683      	mov	fp, r0
 80069fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006a02:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006a04:	b97f      	cbnz	r7, 8006a26 <_dtoa_r+0x36>
 8006a06:	2010      	movs	r0, #16
 8006a08:	f000 fe02 	bl	8007610 <malloc>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006a12:	b920      	cbnz	r0, 8006a1e <_dtoa_r+0x2e>
 8006a14:	21ef      	movs	r1, #239	@ 0xef
 8006a16:	4ba8      	ldr	r3, [pc, #672]	@ (8006cb8 <_dtoa_r+0x2c8>)
 8006a18:	48a8      	ldr	r0, [pc, #672]	@ (8006cbc <_dtoa_r+0x2cc>)
 8006a1a:	f002 fc23 	bl	8009264 <__assert_func>
 8006a1e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a22:	6007      	str	r7, [r0, #0]
 8006a24:	60c7      	str	r7, [r0, #12]
 8006a26:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a2a:	6819      	ldr	r1, [r3, #0]
 8006a2c:	b159      	cbz	r1, 8006a46 <_dtoa_r+0x56>
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	2301      	movs	r3, #1
 8006a32:	4093      	lsls	r3, r2
 8006a34:	604a      	str	r2, [r1, #4]
 8006a36:	608b      	str	r3, [r1, #8]
 8006a38:	4658      	mov	r0, fp
 8006a3a:	f000 fedf 	bl	80077fc <_Bfree>
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	1e2b      	subs	r3, r5, #0
 8006a48:	bfaf      	iteee	ge
 8006a4a:	2300      	movge	r3, #0
 8006a4c:	2201      	movlt	r2, #1
 8006a4e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a52:	9303      	strlt	r3, [sp, #12]
 8006a54:	bfa8      	it	ge
 8006a56:	6033      	strge	r3, [r6, #0]
 8006a58:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a5c:	4b98      	ldr	r3, [pc, #608]	@ (8006cc0 <_dtoa_r+0x2d0>)
 8006a5e:	bfb8      	it	lt
 8006a60:	6032      	strlt	r2, [r6, #0]
 8006a62:	ea33 0308 	bics.w	r3, r3, r8
 8006a66:	d112      	bne.n	8006a8e <_dtoa_r+0x9e>
 8006a68:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a6c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a74:	4323      	orrs	r3, r4
 8006a76:	f000 8550 	beq.w	800751a <_dtoa_r+0xb2a>
 8006a7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006a7c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006cc4 <_dtoa_r+0x2d4>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 8552 	beq.w	800752a <_dtoa_r+0xb3a>
 8006a86:	f10a 0303 	add.w	r3, sl, #3
 8006a8a:	f000 bd4c 	b.w	8007526 <_dtoa_r+0xb36>
 8006a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a92:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006a96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f7f9 ff83 	bl	80009a8 <__aeabi_dcmpeq>
 8006aa2:	4607      	mov	r7, r0
 8006aa4:	b158      	cbz	r0, 8006abe <_dtoa_r+0xce>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006aae:	b113      	cbz	r3, 8006ab6 <_dtoa_r+0xc6>
 8006ab0:	4b85      	ldr	r3, [pc, #532]	@ (8006cc8 <_dtoa_r+0x2d8>)
 8006ab2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006ccc <_dtoa_r+0x2dc>
 8006aba:	f000 bd36 	b.w	800752a <_dtoa_r+0xb3a>
 8006abe:	ab14      	add	r3, sp, #80	@ 0x50
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	ab15      	add	r3, sp, #84	@ 0x54
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	4658      	mov	r0, fp
 8006ac8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006acc:	f001 fa30 	bl	8007f30 <__d2b>
 8006ad0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006ad4:	4681      	mov	r9, r0
 8006ad6:	2e00      	cmp	r6, #0
 8006ad8:	d077      	beq.n	8006bca <_dtoa_r+0x1da>
 8006ada:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ade:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ae0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ae8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006aec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006af0:	9712      	str	r7, [sp, #72]	@ 0x48
 8006af2:	4619      	mov	r1, r3
 8006af4:	2200      	movs	r2, #0
 8006af6:	4b76      	ldr	r3, [pc, #472]	@ (8006cd0 <_dtoa_r+0x2e0>)
 8006af8:	f7f9 fb36 	bl	8000168 <__aeabi_dsub>
 8006afc:	a368      	add	r3, pc, #416	@ (adr r3, 8006ca0 <_dtoa_r+0x2b0>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f7f9 fce9 	bl	80004d8 <__aeabi_dmul>
 8006b06:	a368      	add	r3, pc, #416	@ (adr r3, 8006ca8 <_dtoa_r+0x2b8>)
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f7f9 fb2e 	bl	800016c <__adddf3>
 8006b10:	4604      	mov	r4, r0
 8006b12:	4630      	mov	r0, r6
 8006b14:	460d      	mov	r5, r1
 8006b16:	f7f9 fc75 	bl	8000404 <__aeabi_i2d>
 8006b1a:	a365      	add	r3, pc, #404	@ (adr r3, 8006cb0 <_dtoa_r+0x2c0>)
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f7f9 fcda 	bl	80004d8 <__aeabi_dmul>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4620      	mov	r0, r4
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f7f9 fb1e 	bl	800016c <__adddf3>
 8006b30:	4604      	mov	r4, r0
 8006b32:	460d      	mov	r5, r1
 8006b34:	f7f9 ff80 	bl	8000a38 <__aeabi_d2iz>
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4607      	mov	r7, r0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4620      	mov	r0, r4
 8006b40:	4629      	mov	r1, r5
 8006b42:	f7f9 ff3b 	bl	80009bc <__aeabi_dcmplt>
 8006b46:	b140      	cbz	r0, 8006b5a <_dtoa_r+0x16a>
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f7f9 fc5b 	bl	8000404 <__aeabi_i2d>
 8006b4e:	4622      	mov	r2, r4
 8006b50:	462b      	mov	r3, r5
 8006b52:	f7f9 ff29 	bl	80009a8 <__aeabi_dcmpeq>
 8006b56:	b900      	cbnz	r0, 8006b5a <_dtoa_r+0x16a>
 8006b58:	3f01      	subs	r7, #1
 8006b5a:	2f16      	cmp	r7, #22
 8006b5c:	d853      	bhi.n	8006c06 <_dtoa_r+0x216>
 8006b5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b62:	4b5c      	ldr	r3, [pc, #368]	@ (8006cd4 <_dtoa_r+0x2e4>)
 8006b64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 ff26 	bl	80009bc <__aeabi_dcmplt>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d04a      	beq.n	8006c0a <_dtoa_r+0x21a>
 8006b74:	2300      	movs	r3, #0
 8006b76:	3f01      	subs	r7, #1
 8006b78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006b7c:	1b9b      	subs	r3, r3, r6
 8006b7e:	1e5a      	subs	r2, r3, #1
 8006b80:	bf46      	itte	mi
 8006b82:	f1c3 0801 	rsbmi	r8, r3, #1
 8006b86:	2300      	movmi	r3, #0
 8006b88:	f04f 0800 	movpl.w	r8, #0
 8006b8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b8e:	bf48      	it	mi
 8006b90:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006b92:	2f00      	cmp	r7, #0
 8006b94:	db3b      	blt.n	8006c0e <_dtoa_r+0x21e>
 8006b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b98:	970e      	str	r7, [sp, #56]	@ 0x38
 8006b9a:	443b      	add	r3, r7
 8006b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ba2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ba4:	2b09      	cmp	r3, #9
 8006ba6:	d866      	bhi.n	8006c76 <_dtoa_r+0x286>
 8006ba8:	2b05      	cmp	r3, #5
 8006baa:	bfc4      	itt	gt
 8006bac:	3b04      	subgt	r3, #4
 8006bae:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006bb0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bb2:	bfc8      	it	gt
 8006bb4:	2400      	movgt	r4, #0
 8006bb6:	f1a3 0302 	sub.w	r3, r3, #2
 8006bba:	bfd8      	it	le
 8006bbc:	2401      	movle	r4, #1
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d864      	bhi.n	8006c8c <_dtoa_r+0x29c>
 8006bc2:	e8df f003 	tbb	[pc, r3]
 8006bc6:	382b      	.short	0x382b
 8006bc8:	5636      	.short	0x5636
 8006bca:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006bce:	441e      	add	r6, r3
 8006bd0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	bfc1      	itttt	gt
 8006bd8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006bdc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006be0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006be4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006be8:	bfd6      	itet	le
 8006bea:	f1c3 0320 	rsble	r3, r3, #32
 8006bee:	ea48 0003 	orrgt.w	r0, r8, r3
 8006bf2:	fa04 f003 	lslle.w	r0, r4, r3
 8006bf6:	f7f9 fbf5 	bl	80003e4 <__aeabi_ui2d>
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c00:	3e01      	subs	r6, #1
 8006c02:	9212      	str	r2, [sp, #72]	@ 0x48
 8006c04:	e775      	b.n	8006af2 <_dtoa_r+0x102>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e7b6      	b.n	8006b78 <_dtoa_r+0x188>
 8006c0a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006c0c:	e7b5      	b.n	8006b7a <_dtoa_r+0x18a>
 8006c0e:	427b      	negs	r3, r7
 8006c10:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c12:	2300      	movs	r3, #0
 8006c14:	eba8 0807 	sub.w	r8, r8, r7
 8006c18:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c1a:	e7c2      	b.n	8006ba2 <_dtoa_r+0x1b2>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	dc35      	bgt.n	8006c92 <_dtoa_r+0x2a2>
 8006c26:	2301      	movs	r3, #1
 8006c28:	461a      	mov	r2, r3
 8006c2a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006c2e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006c30:	e00b      	b.n	8006c4a <_dtoa_r+0x25a>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e7f3      	b.n	8006c1e <_dtoa_r+0x22e>
 8006c36:	2300      	movs	r3, #0
 8006c38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c3c:	18fb      	adds	r3, r7, r3
 8006c3e:	9308      	str	r3, [sp, #32]
 8006c40:	3301      	adds	r3, #1
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	9307      	str	r3, [sp, #28]
 8006c46:	bfb8      	it	lt
 8006c48:	2301      	movlt	r3, #1
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	2204      	movs	r2, #4
 8006c4e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006c52:	f102 0514 	add.w	r5, r2, #20
 8006c56:	429d      	cmp	r5, r3
 8006c58:	d91f      	bls.n	8006c9a <_dtoa_r+0x2aa>
 8006c5a:	6041      	str	r1, [r0, #4]
 8006c5c:	4658      	mov	r0, fp
 8006c5e:	f000 fd8d 	bl	800777c <_Balloc>
 8006c62:	4682      	mov	sl, r0
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d139      	bne.n	8006cdc <_dtoa_r+0x2ec>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd8 <_dtoa_r+0x2e8>)
 8006c70:	e6d2      	b.n	8006a18 <_dtoa_r+0x28>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e7e0      	b.n	8006c38 <_dtoa_r+0x248>
 8006c76:	2401      	movs	r4, #1
 8006c78:	2300      	movs	r3, #0
 8006c7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c7c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c82:	2200      	movs	r2, #0
 8006c84:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006c88:	2312      	movs	r3, #18
 8006c8a:	e7d0      	b.n	8006c2e <_dtoa_r+0x23e>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c90:	e7f5      	b.n	8006c7e <_dtoa_r+0x28e>
 8006c92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006c98:	e7d7      	b.n	8006c4a <_dtoa_r+0x25a>
 8006c9a:	3101      	adds	r1, #1
 8006c9c:	0052      	lsls	r2, r2, #1
 8006c9e:	e7d8      	b.n	8006c52 <_dtoa_r+0x262>
 8006ca0:	636f4361 	.word	0x636f4361
 8006ca4:	3fd287a7 	.word	0x3fd287a7
 8006ca8:	8b60c8b3 	.word	0x8b60c8b3
 8006cac:	3fc68a28 	.word	0x3fc68a28
 8006cb0:	509f79fb 	.word	0x509f79fb
 8006cb4:	3fd34413 	.word	0x3fd34413
 8006cb8:	0800a008 	.word	0x0800a008
 8006cbc:	0800a01f 	.word	0x0800a01f
 8006cc0:	7ff00000 	.word	0x7ff00000
 8006cc4:	0800a004 	.word	0x0800a004
 8006cc8:	08009fd3 	.word	0x08009fd3
 8006ccc:	08009fd2 	.word	0x08009fd2
 8006cd0:	3ff80000 	.word	0x3ff80000
 8006cd4:	0800a118 	.word	0x0800a118
 8006cd8:	0800a077 	.word	0x0800a077
 8006cdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ce0:	6018      	str	r0, [r3, #0]
 8006ce2:	9b07      	ldr	r3, [sp, #28]
 8006ce4:	2b0e      	cmp	r3, #14
 8006ce6:	f200 80a4 	bhi.w	8006e32 <_dtoa_r+0x442>
 8006cea:	2c00      	cmp	r4, #0
 8006cec:	f000 80a1 	beq.w	8006e32 <_dtoa_r+0x442>
 8006cf0:	2f00      	cmp	r7, #0
 8006cf2:	dd33      	ble.n	8006d5c <_dtoa_r+0x36c>
 8006cf4:	4b86      	ldr	r3, [pc, #536]	@ (8006f10 <_dtoa_r+0x520>)
 8006cf6:	f007 020f 	and.w	r2, r7, #15
 8006cfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cfe:	05f8      	lsls	r0, r7, #23
 8006d00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d0c:	d516      	bpl.n	8006d3c <_dtoa_r+0x34c>
 8006d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d12:	4b80      	ldr	r3, [pc, #512]	@ (8006f14 <_dtoa_r+0x524>)
 8006d14:	2603      	movs	r6, #3
 8006d16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d1a:	f7f9 fd07 	bl	800072c <__aeabi_ddiv>
 8006d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d22:	f004 040f 	and.w	r4, r4, #15
 8006d26:	4d7b      	ldr	r5, [pc, #492]	@ (8006f14 <_dtoa_r+0x524>)
 8006d28:	b954      	cbnz	r4, 8006d40 <_dtoa_r+0x350>
 8006d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d32:	f7f9 fcfb 	bl	800072c <__aeabi_ddiv>
 8006d36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d3a:	e028      	b.n	8006d8e <_dtoa_r+0x39e>
 8006d3c:	2602      	movs	r6, #2
 8006d3e:	e7f2      	b.n	8006d26 <_dtoa_r+0x336>
 8006d40:	07e1      	lsls	r1, r4, #31
 8006d42:	d508      	bpl.n	8006d56 <_dtoa_r+0x366>
 8006d44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d4c:	f7f9 fbc4 	bl	80004d8 <__aeabi_dmul>
 8006d50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d54:	3601      	adds	r6, #1
 8006d56:	1064      	asrs	r4, r4, #1
 8006d58:	3508      	adds	r5, #8
 8006d5a:	e7e5      	b.n	8006d28 <_dtoa_r+0x338>
 8006d5c:	f000 80d2 	beq.w	8006f04 <_dtoa_r+0x514>
 8006d60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d64:	427c      	negs	r4, r7
 8006d66:	4b6a      	ldr	r3, [pc, #424]	@ (8006f10 <_dtoa_r+0x520>)
 8006d68:	f004 020f 	and.w	r2, r4, #15
 8006d6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	f7f9 fbb0 	bl	80004d8 <__aeabi_dmul>
 8006d78:	2602      	movs	r6, #2
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d80:	4d64      	ldr	r5, [pc, #400]	@ (8006f14 <_dtoa_r+0x524>)
 8006d82:	1124      	asrs	r4, r4, #4
 8006d84:	2c00      	cmp	r4, #0
 8006d86:	f040 80b2 	bne.w	8006eee <_dtoa_r+0x4fe>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1d3      	bne.n	8006d36 <_dtoa_r+0x346>
 8006d8e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 80b7 	beq.w	8006f08 <_dtoa_r+0x518>
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4b5d      	ldr	r3, [pc, #372]	@ (8006f18 <_dtoa_r+0x528>)
 8006da2:	f7f9 fe0b 	bl	80009bc <__aeabi_dcmplt>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f000 80ae 	beq.w	8006f08 <_dtoa_r+0x518>
 8006dac:	9b07      	ldr	r3, [sp, #28]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 80aa 	beq.w	8006f08 <_dtoa_r+0x518>
 8006db4:	9b08      	ldr	r3, [sp, #32]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	dd37      	ble.n	8006e2a <_dtoa_r+0x43a>
 8006dba:	1e7b      	subs	r3, r7, #1
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	9304      	str	r3, [sp, #16]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4b55      	ldr	r3, [pc, #340]	@ (8006f1c <_dtoa_r+0x52c>)
 8006dc6:	f7f9 fb87 	bl	80004d8 <__aeabi_dmul>
 8006dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dce:	9c08      	ldr	r4, [sp, #32]
 8006dd0:	3601      	adds	r6, #1
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7f9 fb16 	bl	8000404 <__aeabi_i2d>
 8006dd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ddc:	f7f9 fb7c 	bl	80004d8 <__aeabi_dmul>
 8006de0:	2200      	movs	r2, #0
 8006de2:	4b4f      	ldr	r3, [pc, #316]	@ (8006f20 <_dtoa_r+0x530>)
 8006de4:	f7f9 f9c2 	bl	800016c <__adddf3>
 8006de8:	4605      	mov	r5, r0
 8006dea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006dee:	2c00      	cmp	r4, #0
 8006df0:	f040 809a 	bne.w	8006f28 <_dtoa_r+0x538>
 8006df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8006f24 <_dtoa_r+0x534>)
 8006dfc:	f7f9 f9b4 	bl	8000168 <__aeabi_dsub>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e08:	462a      	mov	r2, r5
 8006e0a:	4633      	mov	r3, r6
 8006e0c:	f7f9 fdf4 	bl	80009f8 <__aeabi_dcmpgt>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	f040 828e 	bne.w	8007332 <_dtoa_r+0x942>
 8006e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e1a:	462a      	mov	r2, r5
 8006e1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e20:	f7f9 fdcc 	bl	80009bc <__aeabi_dcmplt>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	f040 8127 	bne.w	8007078 <_dtoa_r+0x688>
 8006e2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006e32:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f2c0 8163 	blt.w	8007100 <_dtoa_r+0x710>
 8006e3a:	2f0e      	cmp	r7, #14
 8006e3c:	f300 8160 	bgt.w	8007100 <_dtoa_r+0x710>
 8006e40:	4b33      	ldr	r3, [pc, #204]	@ (8006f10 <_dtoa_r+0x520>)
 8006e42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	da03      	bge.n	8006e5c <_dtoa_r+0x46c>
 8006e54:	9b07      	ldr	r3, [sp, #28]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f340 8100 	ble.w	800705c <_dtoa_r+0x66c>
 8006e5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e60:	4656      	mov	r6, sl
 8006e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e66:	4620      	mov	r0, r4
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f7f9 fc5f 	bl	800072c <__aeabi_ddiv>
 8006e6e:	f7f9 fde3 	bl	8000a38 <__aeabi_d2iz>
 8006e72:	4680      	mov	r8, r0
 8006e74:	f7f9 fac6 	bl	8000404 <__aeabi_i2d>
 8006e78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e7c:	f7f9 fb2c 	bl	80004d8 <__aeabi_dmul>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4620      	mov	r0, r4
 8006e86:	4629      	mov	r1, r5
 8006e88:	f7f9 f96e 	bl	8000168 <__aeabi_dsub>
 8006e8c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e90:	9d07      	ldr	r5, [sp, #28]
 8006e92:	f806 4b01 	strb.w	r4, [r6], #1
 8006e96:	eba6 040a 	sub.w	r4, r6, sl
 8006e9a:	42a5      	cmp	r5, r4
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	f040 8116 	bne.w	80070d0 <_dtoa_r+0x6e0>
 8006ea4:	f7f9 f962 	bl	800016c <__adddf3>
 8006ea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eac:	4604      	mov	r4, r0
 8006eae:	460d      	mov	r5, r1
 8006eb0:	f7f9 fda2 	bl	80009f8 <__aeabi_dcmpgt>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	f040 80f8 	bne.w	80070aa <_dtoa_r+0x6ba>
 8006eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	f7f9 fd71 	bl	80009a8 <__aeabi_dcmpeq>
 8006ec6:	b118      	cbz	r0, 8006ed0 <_dtoa_r+0x4e0>
 8006ec8:	f018 0f01 	tst.w	r8, #1
 8006ecc:	f040 80ed 	bne.w	80070aa <_dtoa_r+0x6ba>
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	4658      	mov	r0, fp
 8006ed4:	f000 fc92 	bl	80077fc <_Bfree>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	7033      	strb	r3, [r6, #0]
 8006edc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006ede:	3701      	adds	r7, #1
 8006ee0:	601f      	str	r7, [r3, #0]
 8006ee2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 8320 	beq.w	800752a <_dtoa_r+0xb3a>
 8006eea:	601e      	str	r6, [r3, #0]
 8006eec:	e31d      	b.n	800752a <_dtoa_r+0xb3a>
 8006eee:	07e2      	lsls	r2, r4, #31
 8006ef0:	d505      	bpl.n	8006efe <_dtoa_r+0x50e>
 8006ef2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ef6:	f7f9 faef 	bl	80004d8 <__aeabi_dmul>
 8006efa:	2301      	movs	r3, #1
 8006efc:	3601      	adds	r6, #1
 8006efe:	1064      	asrs	r4, r4, #1
 8006f00:	3508      	adds	r5, #8
 8006f02:	e73f      	b.n	8006d84 <_dtoa_r+0x394>
 8006f04:	2602      	movs	r6, #2
 8006f06:	e742      	b.n	8006d8e <_dtoa_r+0x39e>
 8006f08:	9c07      	ldr	r4, [sp, #28]
 8006f0a:	9704      	str	r7, [sp, #16]
 8006f0c:	e761      	b.n	8006dd2 <_dtoa_r+0x3e2>
 8006f0e:	bf00      	nop
 8006f10:	0800a118 	.word	0x0800a118
 8006f14:	0800a0f0 	.word	0x0800a0f0
 8006f18:	3ff00000 	.word	0x3ff00000
 8006f1c:	40240000 	.word	0x40240000
 8006f20:	401c0000 	.word	0x401c0000
 8006f24:	40140000 	.word	0x40140000
 8006f28:	4b70      	ldr	r3, [pc, #448]	@ (80070ec <_dtoa_r+0x6fc>)
 8006f2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f34:	4454      	add	r4, sl
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d045      	beq.n	8006fc6 <_dtoa_r+0x5d6>
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	496c      	ldr	r1, [pc, #432]	@ (80070f0 <_dtoa_r+0x700>)
 8006f3e:	f7f9 fbf5 	bl	800072c <__aeabi_ddiv>
 8006f42:	4633      	mov	r3, r6
 8006f44:	462a      	mov	r2, r5
 8006f46:	f7f9 f90f 	bl	8000168 <__aeabi_dsub>
 8006f4a:	4656      	mov	r6, sl
 8006f4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f54:	f7f9 fd70 	bl	8000a38 <__aeabi_d2iz>
 8006f58:	4605      	mov	r5, r0
 8006f5a:	f7f9 fa53 	bl	8000404 <__aeabi_i2d>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f66:	f7f9 f8ff 	bl	8000168 <__aeabi_dsub>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	3530      	adds	r5, #48	@ 0x30
 8006f70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f78:	f806 5b01 	strb.w	r5, [r6], #1
 8006f7c:	f7f9 fd1e 	bl	80009bc <__aeabi_dcmplt>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d163      	bne.n	800704c <_dtoa_r+0x65c>
 8006f84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f88:	2000      	movs	r0, #0
 8006f8a:	495a      	ldr	r1, [pc, #360]	@ (80070f4 <_dtoa_r+0x704>)
 8006f8c:	f7f9 f8ec 	bl	8000168 <__aeabi_dsub>
 8006f90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f94:	f7f9 fd12 	bl	80009bc <__aeabi_dcmplt>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	f040 8087 	bne.w	80070ac <_dtoa_r+0x6bc>
 8006f9e:	42a6      	cmp	r6, r4
 8006fa0:	f43f af43 	beq.w	8006e2a <_dtoa_r+0x43a>
 8006fa4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006fa8:	2200      	movs	r2, #0
 8006faa:	4b53      	ldr	r3, [pc, #332]	@ (80070f8 <_dtoa_r+0x708>)
 8006fac:	f7f9 fa94 	bl	80004d8 <__aeabi_dmul>
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fba:	4b4f      	ldr	r3, [pc, #316]	@ (80070f8 <_dtoa_r+0x708>)
 8006fbc:	f7f9 fa8c 	bl	80004d8 <__aeabi_dmul>
 8006fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc4:	e7c4      	b.n	8006f50 <_dtoa_r+0x560>
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f7f9 fa85 	bl	80004d8 <__aeabi_dmul>
 8006fce:	4656      	mov	r6, sl
 8006fd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fd4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fda:	f7f9 fd2d 	bl	8000a38 <__aeabi_d2iz>
 8006fde:	4605      	mov	r5, r0
 8006fe0:	f7f9 fa10 	bl	8000404 <__aeabi_i2d>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fec:	f7f9 f8bc 	bl	8000168 <__aeabi_dsub>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	3530      	adds	r5, #48	@ 0x30
 8006ff6:	f806 5b01 	strb.w	r5, [r6], #1
 8006ffa:	42a6      	cmp	r6, r4
 8006ffc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	d124      	bne.n	8007050 <_dtoa_r+0x660>
 8007006:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800700a:	4b39      	ldr	r3, [pc, #228]	@ (80070f0 <_dtoa_r+0x700>)
 800700c:	f7f9 f8ae 	bl	800016c <__adddf3>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007018:	f7f9 fcee 	bl	80009f8 <__aeabi_dcmpgt>
 800701c:	2800      	cmp	r0, #0
 800701e:	d145      	bne.n	80070ac <_dtoa_r+0x6bc>
 8007020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007024:	2000      	movs	r0, #0
 8007026:	4932      	ldr	r1, [pc, #200]	@ (80070f0 <_dtoa_r+0x700>)
 8007028:	f7f9 f89e 	bl	8000168 <__aeabi_dsub>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007034:	f7f9 fcc2 	bl	80009bc <__aeabi_dcmplt>
 8007038:	2800      	cmp	r0, #0
 800703a:	f43f aef6 	beq.w	8006e2a <_dtoa_r+0x43a>
 800703e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007040:	1e73      	subs	r3, r6, #1
 8007042:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007044:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007048:	2b30      	cmp	r3, #48	@ 0x30
 800704a:	d0f8      	beq.n	800703e <_dtoa_r+0x64e>
 800704c:	9f04      	ldr	r7, [sp, #16]
 800704e:	e73f      	b.n	8006ed0 <_dtoa_r+0x4e0>
 8007050:	4b29      	ldr	r3, [pc, #164]	@ (80070f8 <_dtoa_r+0x708>)
 8007052:	f7f9 fa41 	bl	80004d8 <__aeabi_dmul>
 8007056:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800705a:	e7bc      	b.n	8006fd6 <_dtoa_r+0x5e6>
 800705c:	d10c      	bne.n	8007078 <_dtoa_r+0x688>
 800705e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007062:	2200      	movs	r2, #0
 8007064:	4b25      	ldr	r3, [pc, #148]	@ (80070fc <_dtoa_r+0x70c>)
 8007066:	f7f9 fa37 	bl	80004d8 <__aeabi_dmul>
 800706a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800706e:	f7f9 fcb9 	bl	80009e4 <__aeabi_dcmpge>
 8007072:	2800      	cmp	r0, #0
 8007074:	f000 815b 	beq.w	800732e <_dtoa_r+0x93e>
 8007078:	2400      	movs	r4, #0
 800707a:	4625      	mov	r5, r4
 800707c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800707e:	4656      	mov	r6, sl
 8007080:	43db      	mvns	r3, r3
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	2700      	movs	r7, #0
 8007086:	4621      	mov	r1, r4
 8007088:	4658      	mov	r0, fp
 800708a:	f000 fbb7 	bl	80077fc <_Bfree>
 800708e:	2d00      	cmp	r5, #0
 8007090:	d0dc      	beq.n	800704c <_dtoa_r+0x65c>
 8007092:	b12f      	cbz	r7, 80070a0 <_dtoa_r+0x6b0>
 8007094:	42af      	cmp	r7, r5
 8007096:	d003      	beq.n	80070a0 <_dtoa_r+0x6b0>
 8007098:	4639      	mov	r1, r7
 800709a:	4658      	mov	r0, fp
 800709c:	f000 fbae 	bl	80077fc <_Bfree>
 80070a0:	4629      	mov	r1, r5
 80070a2:	4658      	mov	r0, fp
 80070a4:	f000 fbaa 	bl	80077fc <_Bfree>
 80070a8:	e7d0      	b.n	800704c <_dtoa_r+0x65c>
 80070aa:	9704      	str	r7, [sp, #16]
 80070ac:	4633      	mov	r3, r6
 80070ae:	461e      	mov	r6, r3
 80070b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070b4:	2a39      	cmp	r2, #57	@ 0x39
 80070b6:	d107      	bne.n	80070c8 <_dtoa_r+0x6d8>
 80070b8:	459a      	cmp	sl, r3
 80070ba:	d1f8      	bne.n	80070ae <_dtoa_r+0x6be>
 80070bc:	9a04      	ldr	r2, [sp, #16]
 80070be:	3201      	adds	r2, #1
 80070c0:	9204      	str	r2, [sp, #16]
 80070c2:	2230      	movs	r2, #48	@ 0x30
 80070c4:	f88a 2000 	strb.w	r2, [sl]
 80070c8:	781a      	ldrb	r2, [r3, #0]
 80070ca:	3201      	adds	r2, #1
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	e7bd      	b.n	800704c <_dtoa_r+0x65c>
 80070d0:	2200      	movs	r2, #0
 80070d2:	4b09      	ldr	r3, [pc, #36]	@ (80070f8 <_dtoa_r+0x708>)
 80070d4:	f7f9 fa00 	bl	80004d8 <__aeabi_dmul>
 80070d8:	2200      	movs	r2, #0
 80070da:	2300      	movs	r3, #0
 80070dc:	4604      	mov	r4, r0
 80070de:	460d      	mov	r5, r1
 80070e0:	f7f9 fc62 	bl	80009a8 <__aeabi_dcmpeq>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	f43f aebc 	beq.w	8006e62 <_dtoa_r+0x472>
 80070ea:	e6f1      	b.n	8006ed0 <_dtoa_r+0x4e0>
 80070ec:	0800a118 	.word	0x0800a118
 80070f0:	3fe00000 	.word	0x3fe00000
 80070f4:	3ff00000 	.word	0x3ff00000
 80070f8:	40240000 	.word	0x40240000
 80070fc:	40140000 	.word	0x40140000
 8007100:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007102:	2a00      	cmp	r2, #0
 8007104:	f000 80db 	beq.w	80072be <_dtoa_r+0x8ce>
 8007108:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800710a:	2a01      	cmp	r2, #1
 800710c:	f300 80bf 	bgt.w	800728e <_dtoa_r+0x89e>
 8007110:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007112:	2a00      	cmp	r2, #0
 8007114:	f000 80b7 	beq.w	8007286 <_dtoa_r+0x896>
 8007118:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800711c:	4646      	mov	r6, r8
 800711e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007120:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007122:	2101      	movs	r1, #1
 8007124:	441a      	add	r2, r3
 8007126:	4658      	mov	r0, fp
 8007128:	4498      	add	r8, r3
 800712a:	9209      	str	r2, [sp, #36]	@ 0x24
 800712c:	f000 fc64 	bl	80079f8 <__i2b>
 8007130:	4605      	mov	r5, r0
 8007132:	b15e      	cbz	r6, 800714c <_dtoa_r+0x75c>
 8007134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007136:	2b00      	cmp	r3, #0
 8007138:	dd08      	ble.n	800714c <_dtoa_r+0x75c>
 800713a:	42b3      	cmp	r3, r6
 800713c:	bfa8      	it	ge
 800713e:	4633      	movge	r3, r6
 8007140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007142:	eba8 0803 	sub.w	r8, r8, r3
 8007146:	1af6      	subs	r6, r6, r3
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	9309      	str	r3, [sp, #36]	@ 0x24
 800714c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800714e:	b1f3      	cbz	r3, 800718e <_dtoa_r+0x79e>
 8007150:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 80b7 	beq.w	80072c6 <_dtoa_r+0x8d6>
 8007158:	b18c      	cbz	r4, 800717e <_dtoa_r+0x78e>
 800715a:	4629      	mov	r1, r5
 800715c:	4622      	mov	r2, r4
 800715e:	4658      	mov	r0, fp
 8007160:	f000 fd08 	bl	8007b74 <__pow5mult>
 8007164:	464a      	mov	r2, r9
 8007166:	4601      	mov	r1, r0
 8007168:	4605      	mov	r5, r0
 800716a:	4658      	mov	r0, fp
 800716c:	f000 fc5a 	bl	8007a24 <__multiply>
 8007170:	4649      	mov	r1, r9
 8007172:	9004      	str	r0, [sp, #16]
 8007174:	4658      	mov	r0, fp
 8007176:	f000 fb41 	bl	80077fc <_Bfree>
 800717a:	9b04      	ldr	r3, [sp, #16]
 800717c:	4699      	mov	r9, r3
 800717e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007180:	1b1a      	subs	r2, r3, r4
 8007182:	d004      	beq.n	800718e <_dtoa_r+0x79e>
 8007184:	4649      	mov	r1, r9
 8007186:	4658      	mov	r0, fp
 8007188:	f000 fcf4 	bl	8007b74 <__pow5mult>
 800718c:	4681      	mov	r9, r0
 800718e:	2101      	movs	r1, #1
 8007190:	4658      	mov	r0, fp
 8007192:	f000 fc31 	bl	80079f8 <__i2b>
 8007196:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007198:	4604      	mov	r4, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 81c9 	beq.w	8007532 <_dtoa_r+0xb42>
 80071a0:	461a      	mov	r2, r3
 80071a2:	4601      	mov	r1, r0
 80071a4:	4658      	mov	r0, fp
 80071a6:	f000 fce5 	bl	8007b74 <__pow5mult>
 80071aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071ac:	4604      	mov	r4, r0
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	f300 808f 	bgt.w	80072d2 <_dtoa_r+0x8e2>
 80071b4:	9b02      	ldr	r3, [sp, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f040 8087 	bne.w	80072ca <_dtoa_r+0x8da>
 80071bc:	9b03      	ldr	r3, [sp, #12]
 80071be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f040 8083 	bne.w	80072ce <_dtoa_r+0x8de>
 80071c8:	9b03      	ldr	r3, [sp, #12]
 80071ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071ce:	0d1b      	lsrs	r3, r3, #20
 80071d0:	051b      	lsls	r3, r3, #20
 80071d2:	b12b      	cbz	r3, 80071e0 <_dtoa_r+0x7f0>
 80071d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d6:	f108 0801 	add.w	r8, r8, #1
 80071da:	3301      	adds	r3, #1
 80071dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071de:	2301      	movs	r3, #1
 80071e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80071e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 81aa 	beq.w	800753e <_dtoa_r+0xb4e>
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071f0:	6918      	ldr	r0, [r3, #16]
 80071f2:	f000 fbb5 	bl	8007960 <__hi0bits>
 80071f6:	f1c0 0020 	rsb	r0, r0, #32
 80071fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fc:	4418      	add	r0, r3
 80071fe:	f010 001f 	ands.w	r0, r0, #31
 8007202:	d071      	beq.n	80072e8 <_dtoa_r+0x8f8>
 8007204:	f1c0 0320 	rsb	r3, r0, #32
 8007208:	2b04      	cmp	r3, #4
 800720a:	dd65      	ble.n	80072d8 <_dtoa_r+0x8e8>
 800720c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800720e:	f1c0 001c 	rsb	r0, r0, #28
 8007212:	4403      	add	r3, r0
 8007214:	4480      	add	r8, r0
 8007216:	4406      	add	r6, r0
 8007218:	9309      	str	r3, [sp, #36]	@ 0x24
 800721a:	f1b8 0f00 	cmp.w	r8, #0
 800721e:	dd05      	ble.n	800722c <_dtoa_r+0x83c>
 8007220:	4649      	mov	r1, r9
 8007222:	4642      	mov	r2, r8
 8007224:	4658      	mov	r0, fp
 8007226:	f000 fcff 	bl	8007c28 <__lshift>
 800722a:	4681      	mov	r9, r0
 800722c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722e:	2b00      	cmp	r3, #0
 8007230:	dd05      	ble.n	800723e <_dtoa_r+0x84e>
 8007232:	4621      	mov	r1, r4
 8007234:	461a      	mov	r2, r3
 8007236:	4658      	mov	r0, fp
 8007238:	f000 fcf6 	bl	8007c28 <__lshift>
 800723c:	4604      	mov	r4, r0
 800723e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d053      	beq.n	80072ec <_dtoa_r+0x8fc>
 8007244:	4621      	mov	r1, r4
 8007246:	4648      	mov	r0, r9
 8007248:	f000 fd5a 	bl	8007d00 <__mcmp>
 800724c:	2800      	cmp	r0, #0
 800724e:	da4d      	bge.n	80072ec <_dtoa_r+0x8fc>
 8007250:	1e7b      	subs	r3, r7, #1
 8007252:	4649      	mov	r1, r9
 8007254:	9304      	str	r3, [sp, #16]
 8007256:	220a      	movs	r2, #10
 8007258:	2300      	movs	r3, #0
 800725a:	4658      	mov	r0, fp
 800725c:	f000 faf0 	bl	8007840 <__multadd>
 8007260:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007262:	4681      	mov	r9, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 816c 	beq.w	8007542 <_dtoa_r+0xb52>
 800726a:	2300      	movs	r3, #0
 800726c:	4629      	mov	r1, r5
 800726e:	220a      	movs	r2, #10
 8007270:	4658      	mov	r0, fp
 8007272:	f000 fae5 	bl	8007840 <__multadd>
 8007276:	9b08      	ldr	r3, [sp, #32]
 8007278:	4605      	mov	r5, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	dc61      	bgt.n	8007342 <_dtoa_r+0x952>
 800727e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007280:	2b02      	cmp	r3, #2
 8007282:	dc3b      	bgt.n	80072fc <_dtoa_r+0x90c>
 8007284:	e05d      	b.n	8007342 <_dtoa_r+0x952>
 8007286:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007288:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800728c:	e746      	b.n	800711c <_dtoa_r+0x72c>
 800728e:	9b07      	ldr	r3, [sp, #28]
 8007290:	1e5c      	subs	r4, r3, #1
 8007292:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007294:	42a3      	cmp	r3, r4
 8007296:	bfbf      	itttt	lt
 8007298:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800729a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800729c:	1ae3      	sublt	r3, r4, r3
 800729e:	18d2      	addlt	r2, r2, r3
 80072a0:	bfa8      	it	ge
 80072a2:	1b1c      	subge	r4, r3, r4
 80072a4:	9b07      	ldr	r3, [sp, #28]
 80072a6:	bfbe      	ittt	lt
 80072a8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80072aa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80072ac:	2400      	movlt	r4, #0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bfb5      	itete	lt
 80072b2:	eba8 0603 	sublt.w	r6, r8, r3
 80072b6:	4646      	movge	r6, r8
 80072b8:	2300      	movlt	r3, #0
 80072ba:	9b07      	ldrge	r3, [sp, #28]
 80072bc:	e730      	b.n	8007120 <_dtoa_r+0x730>
 80072be:	4646      	mov	r6, r8
 80072c0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072c2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80072c4:	e735      	b.n	8007132 <_dtoa_r+0x742>
 80072c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072c8:	e75c      	b.n	8007184 <_dtoa_r+0x794>
 80072ca:	2300      	movs	r3, #0
 80072cc:	e788      	b.n	80071e0 <_dtoa_r+0x7f0>
 80072ce:	9b02      	ldr	r3, [sp, #8]
 80072d0:	e786      	b.n	80071e0 <_dtoa_r+0x7f0>
 80072d2:	2300      	movs	r3, #0
 80072d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80072d6:	e788      	b.n	80071ea <_dtoa_r+0x7fa>
 80072d8:	d09f      	beq.n	800721a <_dtoa_r+0x82a>
 80072da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072dc:	331c      	adds	r3, #28
 80072de:	441a      	add	r2, r3
 80072e0:	4498      	add	r8, r3
 80072e2:	441e      	add	r6, r3
 80072e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80072e6:	e798      	b.n	800721a <_dtoa_r+0x82a>
 80072e8:	4603      	mov	r3, r0
 80072ea:	e7f6      	b.n	80072da <_dtoa_r+0x8ea>
 80072ec:	9b07      	ldr	r3, [sp, #28]
 80072ee:	9704      	str	r7, [sp, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	dc20      	bgt.n	8007336 <_dtoa_r+0x946>
 80072f4:	9308      	str	r3, [sp, #32]
 80072f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	dd1e      	ble.n	800733a <_dtoa_r+0x94a>
 80072fc:	9b08      	ldr	r3, [sp, #32]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f47f aebc 	bne.w	800707c <_dtoa_r+0x68c>
 8007304:	4621      	mov	r1, r4
 8007306:	2205      	movs	r2, #5
 8007308:	4658      	mov	r0, fp
 800730a:	f000 fa99 	bl	8007840 <__multadd>
 800730e:	4601      	mov	r1, r0
 8007310:	4604      	mov	r4, r0
 8007312:	4648      	mov	r0, r9
 8007314:	f000 fcf4 	bl	8007d00 <__mcmp>
 8007318:	2800      	cmp	r0, #0
 800731a:	f77f aeaf 	ble.w	800707c <_dtoa_r+0x68c>
 800731e:	2331      	movs	r3, #49	@ 0x31
 8007320:	4656      	mov	r6, sl
 8007322:	f806 3b01 	strb.w	r3, [r6], #1
 8007326:	9b04      	ldr	r3, [sp, #16]
 8007328:	3301      	adds	r3, #1
 800732a:	9304      	str	r3, [sp, #16]
 800732c:	e6aa      	b.n	8007084 <_dtoa_r+0x694>
 800732e:	9c07      	ldr	r4, [sp, #28]
 8007330:	9704      	str	r7, [sp, #16]
 8007332:	4625      	mov	r5, r4
 8007334:	e7f3      	b.n	800731e <_dtoa_r+0x92e>
 8007336:	9b07      	ldr	r3, [sp, #28]
 8007338:	9308      	str	r3, [sp, #32]
 800733a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 8104 	beq.w	800754a <_dtoa_r+0xb5a>
 8007342:	2e00      	cmp	r6, #0
 8007344:	dd05      	ble.n	8007352 <_dtoa_r+0x962>
 8007346:	4629      	mov	r1, r5
 8007348:	4632      	mov	r2, r6
 800734a:	4658      	mov	r0, fp
 800734c:	f000 fc6c 	bl	8007c28 <__lshift>
 8007350:	4605      	mov	r5, r0
 8007352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007354:	2b00      	cmp	r3, #0
 8007356:	d05a      	beq.n	800740e <_dtoa_r+0xa1e>
 8007358:	4658      	mov	r0, fp
 800735a:	6869      	ldr	r1, [r5, #4]
 800735c:	f000 fa0e 	bl	800777c <_Balloc>
 8007360:	4606      	mov	r6, r0
 8007362:	b928      	cbnz	r0, 8007370 <_dtoa_r+0x980>
 8007364:	4602      	mov	r2, r0
 8007366:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800736a:	4b83      	ldr	r3, [pc, #524]	@ (8007578 <_dtoa_r+0xb88>)
 800736c:	f7ff bb54 	b.w	8006a18 <_dtoa_r+0x28>
 8007370:	692a      	ldr	r2, [r5, #16]
 8007372:	f105 010c 	add.w	r1, r5, #12
 8007376:	3202      	adds	r2, #2
 8007378:	0092      	lsls	r2, r2, #2
 800737a:	300c      	adds	r0, #12
 800737c:	f001 ff5e 	bl	800923c <memcpy>
 8007380:	2201      	movs	r2, #1
 8007382:	4631      	mov	r1, r6
 8007384:	4658      	mov	r0, fp
 8007386:	f000 fc4f 	bl	8007c28 <__lshift>
 800738a:	462f      	mov	r7, r5
 800738c:	4605      	mov	r5, r0
 800738e:	f10a 0301 	add.w	r3, sl, #1
 8007392:	9307      	str	r3, [sp, #28]
 8007394:	9b08      	ldr	r3, [sp, #32]
 8007396:	4453      	add	r3, sl
 8007398:	930b      	str	r3, [sp, #44]	@ 0x2c
 800739a:	9b02      	ldr	r3, [sp, #8]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80073a2:	9b07      	ldr	r3, [sp, #28]
 80073a4:	4621      	mov	r1, r4
 80073a6:	3b01      	subs	r3, #1
 80073a8:	4648      	mov	r0, r9
 80073aa:	9302      	str	r3, [sp, #8]
 80073ac:	f7ff fa98 	bl	80068e0 <quorem>
 80073b0:	4639      	mov	r1, r7
 80073b2:	9008      	str	r0, [sp, #32]
 80073b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80073b8:	4648      	mov	r0, r9
 80073ba:	f000 fca1 	bl	8007d00 <__mcmp>
 80073be:	462a      	mov	r2, r5
 80073c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80073c2:	4621      	mov	r1, r4
 80073c4:	4658      	mov	r0, fp
 80073c6:	f000 fcb7 	bl	8007d38 <__mdiff>
 80073ca:	68c2      	ldr	r2, [r0, #12]
 80073cc:	4606      	mov	r6, r0
 80073ce:	bb02      	cbnz	r2, 8007412 <_dtoa_r+0xa22>
 80073d0:	4601      	mov	r1, r0
 80073d2:	4648      	mov	r0, r9
 80073d4:	f000 fc94 	bl	8007d00 <__mcmp>
 80073d8:	4602      	mov	r2, r0
 80073da:	4631      	mov	r1, r6
 80073dc:	4658      	mov	r0, fp
 80073de:	920c      	str	r2, [sp, #48]	@ 0x30
 80073e0:	f000 fa0c 	bl	80077fc <_Bfree>
 80073e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80073e8:	9e07      	ldr	r6, [sp, #28]
 80073ea:	ea43 0102 	orr.w	r1, r3, r2
 80073ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073f0:	4319      	orrs	r1, r3
 80073f2:	d110      	bne.n	8007416 <_dtoa_r+0xa26>
 80073f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80073f8:	d029      	beq.n	800744e <_dtoa_r+0xa5e>
 80073fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dd02      	ble.n	8007406 <_dtoa_r+0xa16>
 8007400:	9b08      	ldr	r3, [sp, #32]
 8007402:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007406:	9b02      	ldr	r3, [sp, #8]
 8007408:	f883 8000 	strb.w	r8, [r3]
 800740c:	e63b      	b.n	8007086 <_dtoa_r+0x696>
 800740e:	4628      	mov	r0, r5
 8007410:	e7bb      	b.n	800738a <_dtoa_r+0x99a>
 8007412:	2201      	movs	r2, #1
 8007414:	e7e1      	b.n	80073da <_dtoa_r+0x9ea>
 8007416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007418:	2b00      	cmp	r3, #0
 800741a:	db04      	blt.n	8007426 <_dtoa_r+0xa36>
 800741c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800741e:	430b      	orrs	r3, r1
 8007420:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007422:	430b      	orrs	r3, r1
 8007424:	d120      	bne.n	8007468 <_dtoa_r+0xa78>
 8007426:	2a00      	cmp	r2, #0
 8007428:	dded      	ble.n	8007406 <_dtoa_r+0xa16>
 800742a:	4649      	mov	r1, r9
 800742c:	2201      	movs	r2, #1
 800742e:	4658      	mov	r0, fp
 8007430:	f000 fbfa 	bl	8007c28 <__lshift>
 8007434:	4621      	mov	r1, r4
 8007436:	4681      	mov	r9, r0
 8007438:	f000 fc62 	bl	8007d00 <__mcmp>
 800743c:	2800      	cmp	r0, #0
 800743e:	dc03      	bgt.n	8007448 <_dtoa_r+0xa58>
 8007440:	d1e1      	bne.n	8007406 <_dtoa_r+0xa16>
 8007442:	f018 0f01 	tst.w	r8, #1
 8007446:	d0de      	beq.n	8007406 <_dtoa_r+0xa16>
 8007448:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800744c:	d1d8      	bne.n	8007400 <_dtoa_r+0xa10>
 800744e:	2339      	movs	r3, #57	@ 0x39
 8007450:	9a02      	ldr	r2, [sp, #8]
 8007452:	7013      	strb	r3, [r2, #0]
 8007454:	4633      	mov	r3, r6
 8007456:	461e      	mov	r6, r3
 8007458:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800745c:	3b01      	subs	r3, #1
 800745e:	2a39      	cmp	r2, #57	@ 0x39
 8007460:	d052      	beq.n	8007508 <_dtoa_r+0xb18>
 8007462:	3201      	adds	r2, #1
 8007464:	701a      	strb	r2, [r3, #0]
 8007466:	e60e      	b.n	8007086 <_dtoa_r+0x696>
 8007468:	2a00      	cmp	r2, #0
 800746a:	dd07      	ble.n	800747c <_dtoa_r+0xa8c>
 800746c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007470:	d0ed      	beq.n	800744e <_dtoa_r+0xa5e>
 8007472:	9a02      	ldr	r2, [sp, #8]
 8007474:	f108 0301 	add.w	r3, r8, #1
 8007478:	7013      	strb	r3, [r2, #0]
 800747a:	e604      	b.n	8007086 <_dtoa_r+0x696>
 800747c:	9b07      	ldr	r3, [sp, #28]
 800747e:	9a07      	ldr	r2, [sp, #28]
 8007480:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007484:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007486:	4293      	cmp	r3, r2
 8007488:	d028      	beq.n	80074dc <_dtoa_r+0xaec>
 800748a:	4649      	mov	r1, r9
 800748c:	2300      	movs	r3, #0
 800748e:	220a      	movs	r2, #10
 8007490:	4658      	mov	r0, fp
 8007492:	f000 f9d5 	bl	8007840 <__multadd>
 8007496:	42af      	cmp	r7, r5
 8007498:	4681      	mov	r9, r0
 800749a:	f04f 0300 	mov.w	r3, #0
 800749e:	f04f 020a 	mov.w	r2, #10
 80074a2:	4639      	mov	r1, r7
 80074a4:	4658      	mov	r0, fp
 80074a6:	d107      	bne.n	80074b8 <_dtoa_r+0xac8>
 80074a8:	f000 f9ca 	bl	8007840 <__multadd>
 80074ac:	4607      	mov	r7, r0
 80074ae:	4605      	mov	r5, r0
 80074b0:	9b07      	ldr	r3, [sp, #28]
 80074b2:	3301      	adds	r3, #1
 80074b4:	9307      	str	r3, [sp, #28]
 80074b6:	e774      	b.n	80073a2 <_dtoa_r+0x9b2>
 80074b8:	f000 f9c2 	bl	8007840 <__multadd>
 80074bc:	4629      	mov	r1, r5
 80074be:	4607      	mov	r7, r0
 80074c0:	2300      	movs	r3, #0
 80074c2:	220a      	movs	r2, #10
 80074c4:	4658      	mov	r0, fp
 80074c6:	f000 f9bb 	bl	8007840 <__multadd>
 80074ca:	4605      	mov	r5, r0
 80074cc:	e7f0      	b.n	80074b0 <_dtoa_r+0xac0>
 80074ce:	9b08      	ldr	r3, [sp, #32]
 80074d0:	2700      	movs	r7, #0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bfcc      	ite	gt
 80074d6:	461e      	movgt	r6, r3
 80074d8:	2601      	movle	r6, #1
 80074da:	4456      	add	r6, sl
 80074dc:	4649      	mov	r1, r9
 80074de:	2201      	movs	r2, #1
 80074e0:	4658      	mov	r0, fp
 80074e2:	f000 fba1 	bl	8007c28 <__lshift>
 80074e6:	4621      	mov	r1, r4
 80074e8:	4681      	mov	r9, r0
 80074ea:	f000 fc09 	bl	8007d00 <__mcmp>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	dcb0      	bgt.n	8007454 <_dtoa_r+0xa64>
 80074f2:	d102      	bne.n	80074fa <_dtoa_r+0xb0a>
 80074f4:	f018 0f01 	tst.w	r8, #1
 80074f8:	d1ac      	bne.n	8007454 <_dtoa_r+0xa64>
 80074fa:	4633      	mov	r3, r6
 80074fc:	461e      	mov	r6, r3
 80074fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007502:	2a30      	cmp	r2, #48	@ 0x30
 8007504:	d0fa      	beq.n	80074fc <_dtoa_r+0xb0c>
 8007506:	e5be      	b.n	8007086 <_dtoa_r+0x696>
 8007508:	459a      	cmp	sl, r3
 800750a:	d1a4      	bne.n	8007456 <_dtoa_r+0xa66>
 800750c:	9b04      	ldr	r3, [sp, #16]
 800750e:	3301      	adds	r3, #1
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	2331      	movs	r3, #49	@ 0x31
 8007514:	f88a 3000 	strb.w	r3, [sl]
 8007518:	e5b5      	b.n	8007086 <_dtoa_r+0x696>
 800751a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800751c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800757c <_dtoa_r+0xb8c>
 8007520:	b11b      	cbz	r3, 800752a <_dtoa_r+0xb3a>
 8007522:	f10a 0308 	add.w	r3, sl, #8
 8007526:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	4650      	mov	r0, sl
 800752c:	b017      	add	sp, #92	@ 0x5c
 800752e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007532:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007534:	2b01      	cmp	r3, #1
 8007536:	f77f ae3d 	ble.w	80071b4 <_dtoa_r+0x7c4>
 800753a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800753c:	930a      	str	r3, [sp, #40]	@ 0x28
 800753e:	2001      	movs	r0, #1
 8007540:	e65b      	b.n	80071fa <_dtoa_r+0x80a>
 8007542:	9b08      	ldr	r3, [sp, #32]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f77f aed6 	ble.w	80072f6 <_dtoa_r+0x906>
 800754a:	4656      	mov	r6, sl
 800754c:	4621      	mov	r1, r4
 800754e:	4648      	mov	r0, r9
 8007550:	f7ff f9c6 	bl	80068e0 <quorem>
 8007554:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007558:	9b08      	ldr	r3, [sp, #32]
 800755a:	f806 8b01 	strb.w	r8, [r6], #1
 800755e:	eba6 020a 	sub.w	r2, r6, sl
 8007562:	4293      	cmp	r3, r2
 8007564:	ddb3      	ble.n	80074ce <_dtoa_r+0xade>
 8007566:	4649      	mov	r1, r9
 8007568:	2300      	movs	r3, #0
 800756a:	220a      	movs	r2, #10
 800756c:	4658      	mov	r0, fp
 800756e:	f000 f967 	bl	8007840 <__multadd>
 8007572:	4681      	mov	r9, r0
 8007574:	e7ea      	b.n	800754c <_dtoa_r+0xb5c>
 8007576:	bf00      	nop
 8007578:	0800a077 	.word	0x0800a077
 800757c:	08009ffb 	.word	0x08009ffb

08007580 <_free_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4605      	mov	r5, r0
 8007584:	2900      	cmp	r1, #0
 8007586:	d040      	beq.n	800760a <_free_r+0x8a>
 8007588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800758c:	1f0c      	subs	r4, r1, #4
 800758e:	2b00      	cmp	r3, #0
 8007590:	bfb8      	it	lt
 8007592:	18e4      	addlt	r4, r4, r3
 8007594:	f000 f8e6 	bl	8007764 <__malloc_lock>
 8007598:	4a1c      	ldr	r2, [pc, #112]	@ (800760c <_free_r+0x8c>)
 800759a:	6813      	ldr	r3, [r2, #0]
 800759c:	b933      	cbnz	r3, 80075ac <_free_r+0x2c>
 800759e:	6063      	str	r3, [r4, #4]
 80075a0:	6014      	str	r4, [r2, #0]
 80075a2:	4628      	mov	r0, r5
 80075a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075a8:	f000 b8e2 	b.w	8007770 <__malloc_unlock>
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	d908      	bls.n	80075c2 <_free_r+0x42>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	1821      	adds	r1, r4, r0
 80075b4:	428b      	cmp	r3, r1
 80075b6:	bf01      	itttt	eq
 80075b8:	6819      	ldreq	r1, [r3, #0]
 80075ba:	685b      	ldreq	r3, [r3, #4]
 80075bc:	1809      	addeq	r1, r1, r0
 80075be:	6021      	streq	r1, [r4, #0]
 80075c0:	e7ed      	b.n	800759e <_free_r+0x1e>
 80075c2:	461a      	mov	r2, r3
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	b10b      	cbz	r3, 80075cc <_free_r+0x4c>
 80075c8:	42a3      	cmp	r3, r4
 80075ca:	d9fa      	bls.n	80075c2 <_free_r+0x42>
 80075cc:	6811      	ldr	r1, [r2, #0]
 80075ce:	1850      	adds	r0, r2, r1
 80075d0:	42a0      	cmp	r0, r4
 80075d2:	d10b      	bne.n	80075ec <_free_r+0x6c>
 80075d4:	6820      	ldr	r0, [r4, #0]
 80075d6:	4401      	add	r1, r0
 80075d8:	1850      	adds	r0, r2, r1
 80075da:	4283      	cmp	r3, r0
 80075dc:	6011      	str	r1, [r2, #0]
 80075de:	d1e0      	bne.n	80075a2 <_free_r+0x22>
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	4408      	add	r0, r1
 80075e6:	6010      	str	r0, [r2, #0]
 80075e8:	6053      	str	r3, [r2, #4]
 80075ea:	e7da      	b.n	80075a2 <_free_r+0x22>
 80075ec:	d902      	bls.n	80075f4 <_free_r+0x74>
 80075ee:	230c      	movs	r3, #12
 80075f0:	602b      	str	r3, [r5, #0]
 80075f2:	e7d6      	b.n	80075a2 <_free_r+0x22>
 80075f4:	6820      	ldr	r0, [r4, #0]
 80075f6:	1821      	adds	r1, r4, r0
 80075f8:	428b      	cmp	r3, r1
 80075fa:	bf01      	itttt	eq
 80075fc:	6819      	ldreq	r1, [r3, #0]
 80075fe:	685b      	ldreq	r3, [r3, #4]
 8007600:	1809      	addeq	r1, r1, r0
 8007602:	6021      	streq	r1, [r4, #0]
 8007604:	6063      	str	r3, [r4, #4]
 8007606:	6054      	str	r4, [r2, #4]
 8007608:	e7cb      	b.n	80075a2 <_free_r+0x22>
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	200003ec 	.word	0x200003ec

08007610 <malloc>:
 8007610:	4b02      	ldr	r3, [pc, #8]	@ (800761c <malloc+0xc>)
 8007612:	4601      	mov	r1, r0
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	f000 b825 	b.w	8007664 <_malloc_r>
 800761a:	bf00      	nop
 800761c:	2000001c 	.word	0x2000001c

08007620 <sbrk_aligned>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	4e0f      	ldr	r6, [pc, #60]	@ (8007660 <sbrk_aligned+0x40>)
 8007624:	460c      	mov	r4, r1
 8007626:	6831      	ldr	r1, [r6, #0]
 8007628:	4605      	mov	r5, r0
 800762a:	b911      	cbnz	r1, 8007632 <sbrk_aligned+0x12>
 800762c:	f001 fdf6 	bl	800921c <_sbrk_r>
 8007630:	6030      	str	r0, [r6, #0]
 8007632:	4621      	mov	r1, r4
 8007634:	4628      	mov	r0, r5
 8007636:	f001 fdf1 	bl	800921c <_sbrk_r>
 800763a:	1c43      	adds	r3, r0, #1
 800763c:	d103      	bne.n	8007646 <sbrk_aligned+0x26>
 800763e:	f04f 34ff 	mov.w	r4, #4294967295
 8007642:	4620      	mov	r0, r4
 8007644:	bd70      	pop	{r4, r5, r6, pc}
 8007646:	1cc4      	adds	r4, r0, #3
 8007648:	f024 0403 	bic.w	r4, r4, #3
 800764c:	42a0      	cmp	r0, r4
 800764e:	d0f8      	beq.n	8007642 <sbrk_aligned+0x22>
 8007650:	1a21      	subs	r1, r4, r0
 8007652:	4628      	mov	r0, r5
 8007654:	f001 fde2 	bl	800921c <_sbrk_r>
 8007658:	3001      	adds	r0, #1
 800765a:	d1f2      	bne.n	8007642 <sbrk_aligned+0x22>
 800765c:	e7ef      	b.n	800763e <sbrk_aligned+0x1e>
 800765e:	bf00      	nop
 8007660:	200003e8 	.word	0x200003e8

08007664 <_malloc_r>:
 8007664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007668:	1ccd      	adds	r5, r1, #3
 800766a:	f025 0503 	bic.w	r5, r5, #3
 800766e:	3508      	adds	r5, #8
 8007670:	2d0c      	cmp	r5, #12
 8007672:	bf38      	it	cc
 8007674:	250c      	movcc	r5, #12
 8007676:	2d00      	cmp	r5, #0
 8007678:	4606      	mov	r6, r0
 800767a:	db01      	blt.n	8007680 <_malloc_r+0x1c>
 800767c:	42a9      	cmp	r1, r5
 800767e:	d904      	bls.n	800768a <_malloc_r+0x26>
 8007680:	230c      	movs	r3, #12
 8007682:	6033      	str	r3, [r6, #0]
 8007684:	2000      	movs	r0, #0
 8007686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800768a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007760 <_malloc_r+0xfc>
 800768e:	f000 f869 	bl	8007764 <__malloc_lock>
 8007692:	f8d8 3000 	ldr.w	r3, [r8]
 8007696:	461c      	mov	r4, r3
 8007698:	bb44      	cbnz	r4, 80076ec <_malloc_r+0x88>
 800769a:	4629      	mov	r1, r5
 800769c:	4630      	mov	r0, r6
 800769e:	f7ff ffbf 	bl	8007620 <sbrk_aligned>
 80076a2:	1c43      	adds	r3, r0, #1
 80076a4:	4604      	mov	r4, r0
 80076a6:	d158      	bne.n	800775a <_malloc_r+0xf6>
 80076a8:	f8d8 4000 	ldr.w	r4, [r8]
 80076ac:	4627      	mov	r7, r4
 80076ae:	2f00      	cmp	r7, #0
 80076b0:	d143      	bne.n	800773a <_malloc_r+0xd6>
 80076b2:	2c00      	cmp	r4, #0
 80076b4:	d04b      	beq.n	800774e <_malloc_r+0xea>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	4639      	mov	r1, r7
 80076ba:	4630      	mov	r0, r6
 80076bc:	eb04 0903 	add.w	r9, r4, r3
 80076c0:	f001 fdac 	bl	800921c <_sbrk_r>
 80076c4:	4581      	cmp	r9, r0
 80076c6:	d142      	bne.n	800774e <_malloc_r+0xea>
 80076c8:	6821      	ldr	r1, [r4, #0]
 80076ca:	4630      	mov	r0, r6
 80076cc:	1a6d      	subs	r5, r5, r1
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7ff ffa6 	bl	8007620 <sbrk_aligned>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d03a      	beq.n	800774e <_malloc_r+0xea>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	442b      	add	r3, r5
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	f8d8 3000 	ldr.w	r3, [r8]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	bb62      	cbnz	r2, 8007740 <_malloc_r+0xdc>
 80076e6:	f8c8 7000 	str.w	r7, [r8]
 80076ea:	e00f      	b.n	800770c <_malloc_r+0xa8>
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	1b52      	subs	r2, r2, r5
 80076f0:	d420      	bmi.n	8007734 <_malloc_r+0xd0>
 80076f2:	2a0b      	cmp	r2, #11
 80076f4:	d917      	bls.n	8007726 <_malloc_r+0xc2>
 80076f6:	1961      	adds	r1, r4, r5
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	6025      	str	r5, [r4, #0]
 80076fc:	bf18      	it	ne
 80076fe:	6059      	strne	r1, [r3, #4]
 8007700:	6863      	ldr	r3, [r4, #4]
 8007702:	bf08      	it	eq
 8007704:	f8c8 1000 	streq.w	r1, [r8]
 8007708:	5162      	str	r2, [r4, r5]
 800770a:	604b      	str	r3, [r1, #4]
 800770c:	4630      	mov	r0, r6
 800770e:	f000 f82f 	bl	8007770 <__malloc_unlock>
 8007712:	f104 000b 	add.w	r0, r4, #11
 8007716:	1d23      	adds	r3, r4, #4
 8007718:	f020 0007 	bic.w	r0, r0, #7
 800771c:	1ac2      	subs	r2, r0, r3
 800771e:	bf1c      	itt	ne
 8007720:	1a1b      	subne	r3, r3, r0
 8007722:	50a3      	strne	r3, [r4, r2]
 8007724:	e7af      	b.n	8007686 <_malloc_r+0x22>
 8007726:	6862      	ldr	r2, [r4, #4]
 8007728:	42a3      	cmp	r3, r4
 800772a:	bf0c      	ite	eq
 800772c:	f8c8 2000 	streq.w	r2, [r8]
 8007730:	605a      	strne	r2, [r3, #4]
 8007732:	e7eb      	b.n	800770c <_malloc_r+0xa8>
 8007734:	4623      	mov	r3, r4
 8007736:	6864      	ldr	r4, [r4, #4]
 8007738:	e7ae      	b.n	8007698 <_malloc_r+0x34>
 800773a:	463c      	mov	r4, r7
 800773c:	687f      	ldr	r7, [r7, #4]
 800773e:	e7b6      	b.n	80076ae <_malloc_r+0x4a>
 8007740:	461a      	mov	r2, r3
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	42a3      	cmp	r3, r4
 8007746:	d1fb      	bne.n	8007740 <_malloc_r+0xdc>
 8007748:	2300      	movs	r3, #0
 800774a:	6053      	str	r3, [r2, #4]
 800774c:	e7de      	b.n	800770c <_malloc_r+0xa8>
 800774e:	230c      	movs	r3, #12
 8007750:	4630      	mov	r0, r6
 8007752:	6033      	str	r3, [r6, #0]
 8007754:	f000 f80c 	bl	8007770 <__malloc_unlock>
 8007758:	e794      	b.n	8007684 <_malloc_r+0x20>
 800775a:	6005      	str	r5, [r0, #0]
 800775c:	e7d6      	b.n	800770c <_malloc_r+0xa8>
 800775e:	bf00      	nop
 8007760:	200003ec 	.word	0x200003ec

08007764 <__malloc_lock>:
 8007764:	4801      	ldr	r0, [pc, #4]	@ (800776c <__malloc_lock+0x8>)
 8007766:	f7ff b8a6 	b.w	80068b6 <__retarget_lock_acquire_recursive>
 800776a:	bf00      	nop
 800776c:	200003e4 	.word	0x200003e4

08007770 <__malloc_unlock>:
 8007770:	4801      	ldr	r0, [pc, #4]	@ (8007778 <__malloc_unlock+0x8>)
 8007772:	f7ff b8a1 	b.w	80068b8 <__retarget_lock_release_recursive>
 8007776:	bf00      	nop
 8007778:	200003e4 	.word	0x200003e4

0800777c <_Balloc>:
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	69c6      	ldr	r6, [r0, #28]
 8007780:	4604      	mov	r4, r0
 8007782:	460d      	mov	r5, r1
 8007784:	b976      	cbnz	r6, 80077a4 <_Balloc+0x28>
 8007786:	2010      	movs	r0, #16
 8007788:	f7ff ff42 	bl	8007610 <malloc>
 800778c:	4602      	mov	r2, r0
 800778e:	61e0      	str	r0, [r4, #28]
 8007790:	b920      	cbnz	r0, 800779c <_Balloc+0x20>
 8007792:	216b      	movs	r1, #107	@ 0x6b
 8007794:	4b17      	ldr	r3, [pc, #92]	@ (80077f4 <_Balloc+0x78>)
 8007796:	4818      	ldr	r0, [pc, #96]	@ (80077f8 <_Balloc+0x7c>)
 8007798:	f001 fd64 	bl	8009264 <__assert_func>
 800779c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077a0:	6006      	str	r6, [r0, #0]
 80077a2:	60c6      	str	r6, [r0, #12]
 80077a4:	69e6      	ldr	r6, [r4, #28]
 80077a6:	68f3      	ldr	r3, [r6, #12]
 80077a8:	b183      	cbz	r3, 80077cc <_Balloc+0x50>
 80077aa:	69e3      	ldr	r3, [r4, #28]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077b2:	b9b8      	cbnz	r0, 80077e4 <_Balloc+0x68>
 80077b4:	2101      	movs	r1, #1
 80077b6:	fa01 f605 	lsl.w	r6, r1, r5
 80077ba:	1d72      	adds	r2, r6, #5
 80077bc:	4620      	mov	r0, r4
 80077be:	0092      	lsls	r2, r2, #2
 80077c0:	f001 fd6e 	bl	80092a0 <_calloc_r>
 80077c4:	b160      	cbz	r0, 80077e0 <_Balloc+0x64>
 80077c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077ca:	e00e      	b.n	80077ea <_Balloc+0x6e>
 80077cc:	2221      	movs	r2, #33	@ 0x21
 80077ce:	2104      	movs	r1, #4
 80077d0:	4620      	mov	r0, r4
 80077d2:	f001 fd65 	bl	80092a0 <_calloc_r>
 80077d6:	69e3      	ldr	r3, [r4, #28]
 80077d8:	60f0      	str	r0, [r6, #12]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e4      	bne.n	80077aa <_Balloc+0x2e>
 80077e0:	2000      	movs	r0, #0
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	6802      	ldr	r2, [r0, #0]
 80077e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ea:	2300      	movs	r3, #0
 80077ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077f0:	e7f7      	b.n	80077e2 <_Balloc+0x66>
 80077f2:	bf00      	nop
 80077f4:	0800a008 	.word	0x0800a008
 80077f8:	0800a088 	.word	0x0800a088

080077fc <_Bfree>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	69c6      	ldr	r6, [r0, #28]
 8007800:	4605      	mov	r5, r0
 8007802:	460c      	mov	r4, r1
 8007804:	b976      	cbnz	r6, 8007824 <_Bfree+0x28>
 8007806:	2010      	movs	r0, #16
 8007808:	f7ff ff02 	bl	8007610 <malloc>
 800780c:	4602      	mov	r2, r0
 800780e:	61e8      	str	r0, [r5, #28]
 8007810:	b920      	cbnz	r0, 800781c <_Bfree+0x20>
 8007812:	218f      	movs	r1, #143	@ 0x8f
 8007814:	4b08      	ldr	r3, [pc, #32]	@ (8007838 <_Bfree+0x3c>)
 8007816:	4809      	ldr	r0, [pc, #36]	@ (800783c <_Bfree+0x40>)
 8007818:	f001 fd24 	bl	8009264 <__assert_func>
 800781c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007820:	6006      	str	r6, [r0, #0]
 8007822:	60c6      	str	r6, [r0, #12]
 8007824:	b13c      	cbz	r4, 8007836 <_Bfree+0x3a>
 8007826:	69eb      	ldr	r3, [r5, #28]
 8007828:	6862      	ldr	r2, [r4, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007830:	6021      	str	r1, [r4, #0]
 8007832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	0800a008 	.word	0x0800a008
 800783c:	0800a088 	.word	0x0800a088

08007840 <__multadd>:
 8007840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007844:	4607      	mov	r7, r0
 8007846:	460c      	mov	r4, r1
 8007848:	461e      	mov	r6, r3
 800784a:	2000      	movs	r0, #0
 800784c:	690d      	ldr	r5, [r1, #16]
 800784e:	f101 0c14 	add.w	ip, r1, #20
 8007852:	f8dc 3000 	ldr.w	r3, [ip]
 8007856:	3001      	adds	r0, #1
 8007858:	b299      	uxth	r1, r3
 800785a:	fb02 6101 	mla	r1, r2, r1, r6
 800785e:	0c1e      	lsrs	r6, r3, #16
 8007860:	0c0b      	lsrs	r3, r1, #16
 8007862:	fb02 3306 	mla	r3, r2, r6, r3
 8007866:	b289      	uxth	r1, r1
 8007868:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800786c:	4285      	cmp	r5, r0
 800786e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007872:	f84c 1b04 	str.w	r1, [ip], #4
 8007876:	dcec      	bgt.n	8007852 <__multadd+0x12>
 8007878:	b30e      	cbz	r6, 80078be <__multadd+0x7e>
 800787a:	68a3      	ldr	r3, [r4, #8]
 800787c:	42ab      	cmp	r3, r5
 800787e:	dc19      	bgt.n	80078b4 <__multadd+0x74>
 8007880:	6861      	ldr	r1, [r4, #4]
 8007882:	4638      	mov	r0, r7
 8007884:	3101      	adds	r1, #1
 8007886:	f7ff ff79 	bl	800777c <_Balloc>
 800788a:	4680      	mov	r8, r0
 800788c:	b928      	cbnz	r0, 800789a <__multadd+0x5a>
 800788e:	4602      	mov	r2, r0
 8007890:	21ba      	movs	r1, #186	@ 0xba
 8007892:	4b0c      	ldr	r3, [pc, #48]	@ (80078c4 <__multadd+0x84>)
 8007894:	480c      	ldr	r0, [pc, #48]	@ (80078c8 <__multadd+0x88>)
 8007896:	f001 fce5 	bl	8009264 <__assert_func>
 800789a:	6922      	ldr	r2, [r4, #16]
 800789c:	f104 010c 	add.w	r1, r4, #12
 80078a0:	3202      	adds	r2, #2
 80078a2:	0092      	lsls	r2, r2, #2
 80078a4:	300c      	adds	r0, #12
 80078a6:	f001 fcc9 	bl	800923c <memcpy>
 80078aa:	4621      	mov	r1, r4
 80078ac:	4638      	mov	r0, r7
 80078ae:	f7ff ffa5 	bl	80077fc <_Bfree>
 80078b2:	4644      	mov	r4, r8
 80078b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078b8:	3501      	adds	r5, #1
 80078ba:	615e      	str	r6, [r3, #20]
 80078bc:	6125      	str	r5, [r4, #16]
 80078be:	4620      	mov	r0, r4
 80078c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c4:	0800a077 	.word	0x0800a077
 80078c8:	0800a088 	.word	0x0800a088

080078cc <__s2b>:
 80078cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d0:	4615      	mov	r5, r2
 80078d2:	2209      	movs	r2, #9
 80078d4:	461f      	mov	r7, r3
 80078d6:	3308      	adds	r3, #8
 80078d8:	460c      	mov	r4, r1
 80078da:	fb93 f3f2 	sdiv	r3, r3, r2
 80078de:	4606      	mov	r6, r0
 80078e0:	2201      	movs	r2, #1
 80078e2:	2100      	movs	r1, #0
 80078e4:	429a      	cmp	r2, r3
 80078e6:	db09      	blt.n	80078fc <__s2b+0x30>
 80078e8:	4630      	mov	r0, r6
 80078ea:	f7ff ff47 	bl	800777c <_Balloc>
 80078ee:	b940      	cbnz	r0, 8007902 <__s2b+0x36>
 80078f0:	4602      	mov	r2, r0
 80078f2:	21d3      	movs	r1, #211	@ 0xd3
 80078f4:	4b18      	ldr	r3, [pc, #96]	@ (8007958 <__s2b+0x8c>)
 80078f6:	4819      	ldr	r0, [pc, #100]	@ (800795c <__s2b+0x90>)
 80078f8:	f001 fcb4 	bl	8009264 <__assert_func>
 80078fc:	0052      	lsls	r2, r2, #1
 80078fe:	3101      	adds	r1, #1
 8007900:	e7f0      	b.n	80078e4 <__s2b+0x18>
 8007902:	9b08      	ldr	r3, [sp, #32]
 8007904:	2d09      	cmp	r5, #9
 8007906:	6143      	str	r3, [r0, #20]
 8007908:	f04f 0301 	mov.w	r3, #1
 800790c:	6103      	str	r3, [r0, #16]
 800790e:	dd16      	ble.n	800793e <__s2b+0x72>
 8007910:	f104 0909 	add.w	r9, r4, #9
 8007914:	46c8      	mov	r8, r9
 8007916:	442c      	add	r4, r5
 8007918:	f818 3b01 	ldrb.w	r3, [r8], #1
 800791c:	4601      	mov	r1, r0
 800791e:	220a      	movs	r2, #10
 8007920:	4630      	mov	r0, r6
 8007922:	3b30      	subs	r3, #48	@ 0x30
 8007924:	f7ff ff8c 	bl	8007840 <__multadd>
 8007928:	45a0      	cmp	r8, r4
 800792a:	d1f5      	bne.n	8007918 <__s2b+0x4c>
 800792c:	f1a5 0408 	sub.w	r4, r5, #8
 8007930:	444c      	add	r4, r9
 8007932:	1b2d      	subs	r5, r5, r4
 8007934:	1963      	adds	r3, r4, r5
 8007936:	42bb      	cmp	r3, r7
 8007938:	db04      	blt.n	8007944 <__s2b+0x78>
 800793a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800793e:	2509      	movs	r5, #9
 8007940:	340a      	adds	r4, #10
 8007942:	e7f6      	b.n	8007932 <__s2b+0x66>
 8007944:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007948:	4601      	mov	r1, r0
 800794a:	220a      	movs	r2, #10
 800794c:	4630      	mov	r0, r6
 800794e:	3b30      	subs	r3, #48	@ 0x30
 8007950:	f7ff ff76 	bl	8007840 <__multadd>
 8007954:	e7ee      	b.n	8007934 <__s2b+0x68>
 8007956:	bf00      	nop
 8007958:	0800a077 	.word	0x0800a077
 800795c:	0800a088 	.word	0x0800a088

08007960 <__hi0bits>:
 8007960:	4603      	mov	r3, r0
 8007962:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007966:	bf3a      	itte	cc
 8007968:	0403      	lslcc	r3, r0, #16
 800796a:	2010      	movcc	r0, #16
 800796c:	2000      	movcs	r0, #0
 800796e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007972:	bf3c      	itt	cc
 8007974:	021b      	lslcc	r3, r3, #8
 8007976:	3008      	addcc	r0, #8
 8007978:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800797c:	bf3c      	itt	cc
 800797e:	011b      	lslcc	r3, r3, #4
 8007980:	3004      	addcc	r0, #4
 8007982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007986:	bf3c      	itt	cc
 8007988:	009b      	lslcc	r3, r3, #2
 800798a:	3002      	addcc	r0, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	db05      	blt.n	800799c <__hi0bits+0x3c>
 8007990:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007994:	f100 0001 	add.w	r0, r0, #1
 8007998:	bf08      	it	eq
 800799a:	2020      	moveq	r0, #32
 800799c:	4770      	bx	lr

0800799e <__lo0bits>:
 800799e:	6803      	ldr	r3, [r0, #0]
 80079a0:	4602      	mov	r2, r0
 80079a2:	f013 0007 	ands.w	r0, r3, #7
 80079a6:	d00b      	beq.n	80079c0 <__lo0bits+0x22>
 80079a8:	07d9      	lsls	r1, r3, #31
 80079aa:	d421      	bmi.n	80079f0 <__lo0bits+0x52>
 80079ac:	0798      	lsls	r0, r3, #30
 80079ae:	bf49      	itett	mi
 80079b0:	085b      	lsrmi	r3, r3, #1
 80079b2:	089b      	lsrpl	r3, r3, #2
 80079b4:	2001      	movmi	r0, #1
 80079b6:	6013      	strmi	r3, [r2, #0]
 80079b8:	bf5c      	itt	pl
 80079ba:	2002      	movpl	r0, #2
 80079bc:	6013      	strpl	r3, [r2, #0]
 80079be:	4770      	bx	lr
 80079c0:	b299      	uxth	r1, r3
 80079c2:	b909      	cbnz	r1, 80079c8 <__lo0bits+0x2a>
 80079c4:	2010      	movs	r0, #16
 80079c6:	0c1b      	lsrs	r3, r3, #16
 80079c8:	b2d9      	uxtb	r1, r3
 80079ca:	b909      	cbnz	r1, 80079d0 <__lo0bits+0x32>
 80079cc:	3008      	adds	r0, #8
 80079ce:	0a1b      	lsrs	r3, r3, #8
 80079d0:	0719      	lsls	r1, r3, #28
 80079d2:	bf04      	itt	eq
 80079d4:	091b      	lsreq	r3, r3, #4
 80079d6:	3004      	addeq	r0, #4
 80079d8:	0799      	lsls	r1, r3, #30
 80079da:	bf04      	itt	eq
 80079dc:	089b      	lsreq	r3, r3, #2
 80079de:	3002      	addeq	r0, #2
 80079e0:	07d9      	lsls	r1, r3, #31
 80079e2:	d403      	bmi.n	80079ec <__lo0bits+0x4e>
 80079e4:	085b      	lsrs	r3, r3, #1
 80079e6:	f100 0001 	add.w	r0, r0, #1
 80079ea:	d003      	beq.n	80079f4 <__lo0bits+0x56>
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	4770      	bx	lr
 80079f0:	2000      	movs	r0, #0
 80079f2:	4770      	bx	lr
 80079f4:	2020      	movs	r0, #32
 80079f6:	4770      	bx	lr

080079f8 <__i2b>:
 80079f8:	b510      	push	{r4, lr}
 80079fa:	460c      	mov	r4, r1
 80079fc:	2101      	movs	r1, #1
 80079fe:	f7ff febd 	bl	800777c <_Balloc>
 8007a02:	4602      	mov	r2, r0
 8007a04:	b928      	cbnz	r0, 8007a12 <__i2b+0x1a>
 8007a06:	f240 1145 	movw	r1, #325	@ 0x145
 8007a0a:	4b04      	ldr	r3, [pc, #16]	@ (8007a1c <__i2b+0x24>)
 8007a0c:	4804      	ldr	r0, [pc, #16]	@ (8007a20 <__i2b+0x28>)
 8007a0e:	f001 fc29 	bl	8009264 <__assert_func>
 8007a12:	2301      	movs	r3, #1
 8007a14:	6144      	str	r4, [r0, #20]
 8007a16:	6103      	str	r3, [r0, #16]
 8007a18:	bd10      	pop	{r4, pc}
 8007a1a:	bf00      	nop
 8007a1c:	0800a077 	.word	0x0800a077
 8007a20:	0800a088 	.word	0x0800a088

08007a24 <__multiply>:
 8007a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	4614      	mov	r4, r2
 8007a2a:	690a      	ldr	r2, [r1, #16]
 8007a2c:	6923      	ldr	r3, [r4, #16]
 8007a2e:	460f      	mov	r7, r1
 8007a30:	429a      	cmp	r2, r3
 8007a32:	bfa2      	ittt	ge
 8007a34:	4623      	movge	r3, r4
 8007a36:	460c      	movge	r4, r1
 8007a38:	461f      	movge	r7, r3
 8007a3a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a3e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a42:	68a3      	ldr	r3, [r4, #8]
 8007a44:	6861      	ldr	r1, [r4, #4]
 8007a46:	eb0a 0609 	add.w	r6, sl, r9
 8007a4a:	42b3      	cmp	r3, r6
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	bfb8      	it	lt
 8007a50:	3101      	addlt	r1, #1
 8007a52:	f7ff fe93 	bl	800777c <_Balloc>
 8007a56:	b930      	cbnz	r0, 8007a66 <__multiply+0x42>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a5e:	4b43      	ldr	r3, [pc, #268]	@ (8007b6c <__multiply+0x148>)
 8007a60:	4843      	ldr	r0, [pc, #268]	@ (8007b70 <__multiply+0x14c>)
 8007a62:	f001 fbff 	bl	8009264 <__assert_func>
 8007a66:	f100 0514 	add.w	r5, r0, #20
 8007a6a:	462b      	mov	r3, r5
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a72:	4543      	cmp	r3, r8
 8007a74:	d321      	bcc.n	8007aba <__multiply+0x96>
 8007a76:	f107 0114 	add.w	r1, r7, #20
 8007a7a:	f104 0214 	add.w	r2, r4, #20
 8007a7e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a82:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a86:	9302      	str	r3, [sp, #8]
 8007a88:	1b13      	subs	r3, r2, r4
 8007a8a:	3b15      	subs	r3, #21
 8007a8c:	f023 0303 	bic.w	r3, r3, #3
 8007a90:	3304      	adds	r3, #4
 8007a92:	f104 0715 	add.w	r7, r4, #21
 8007a96:	42ba      	cmp	r2, r7
 8007a98:	bf38      	it	cc
 8007a9a:	2304      	movcc	r3, #4
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	9b02      	ldr	r3, [sp, #8]
 8007aa0:	9103      	str	r1, [sp, #12]
 8007aa2:	428b      	cmp	r3, r1
 8007aa4:	d80c      	bhi.n	8007ac0 <__multiply+0x9c>
 8007aa6:	2e00      	cmp	r6, #0
 8007aa8:	dd03      	ble.n	8007ab2 <__multiply+0x8e>
 8007aaa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d05a      	beq.n	8007b68 <__multiply+0x144>
 8007ab2:	6106      	str	r6, [r0, #16]
 8007ab4:	b005      	add	sp, #20
 8007ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aba:	f843 2b04 	str.w	r2, [r3], #4
 8007abe:	e7d8      	b.n	8007a72 <__multiply+0x4e>
 8007ac0:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ac4:	f1ba 0f00 	cmp.w	sl, #0
 8007ac8:	d023      	beq.n	8007b12 <__multiply+0xee>
 8007aca:	46a9      	mov	r9, r5
 8007acc:	f04f 0c00 	mov.w	ip, #0
 8007ad0:	f104 0e14 	add.w	lr, r4, #20
 8007ad4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ad8:	f8d9 3000 	ldr.w	r3, [r9]
 8007adc:	fa1f fb87 	uxth.w	fp, r7
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ae6:	4463      	add	r3, ip
 8007ae8:	f8d9 c000 	ldr.w	ip, [r9]
 8007aec:	0c3f      	lsrs	r7, r7, #16
 8007aee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007af2:	fb0a c707 	mla	r7, sl, r7, ip
 8007af6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b00:	4572      	cmp	r2, lr
 8007b02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b06:	f849 3b04 	str.w	r3, [r9], #4
 8007b0a:	d8e3      	bhi.n	8007ad4 <__multiply+0xb0>
 8007b0c:	9b01      	ldr	r3, [sp, #4]
 8007b0e:	f845 c003 	str.w	ip, [r5, r3]
 8007b12:	9b03      	ldr	r3, [sp, #12]
 8007b14:	3104      	adds	r1, #4
 8007b16:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b1a:	f1b9 0f00 	cmp.w	r9, #0
 8007b1e:	d021      	beq.n	8007b64 <__multiply+0x140>
 8007b20:	46ae      	mov	lr, r5
 8007b22:	f04f 0a00 	mov.w	sl, #0
 8007b26:	682b      	ldr	r3, [r5, #0]
 8007b28:	f104 0c14 	add.w	ip, r4, #20
 8007b2c:	f8bc b000 	ldrh.w	fp, [ip]
 8007b30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	fb09 770b 	mla	r7, r9, fp, r7
 8007b3a:	4457      	add	r7, sl
 8007b3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b40:	f84e 3b04 	str.w	r3, [lr], #4
 8007b44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b4c:	f8be 3000 	ldrh.w	r3, [lr]
 8007b50:	4562      	cmp	r2, ip
 8007b52:	fb09 330a 	mla	r3, r9, sl, r3
 8007b56:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b5e:	d8e5      	bhi.n	8007b2c <__multiply+0x108>
 8007b60:	9f01      	ldr	r7, [sp, #4]
 8007b62:	51eb      	str	r3, [r5, r7]
 8007b64:	3504      	adds	r5, #4
 8007b66:	e79a      	b.n	8007a9e <__multiply+0x7a>
 8007b68:	3e01      	subs	r6, #1
 8007b6a:	e79c      	b.n	8007aa6 <__multiply+0x82>
 8007b6c:	0800a077 	.word	0x0800a077
 8007b70:	0800a088 	.word	0x0800a088

08007b74 <__pow5mult>:
 8007b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b78:	4615      	mov	r5, r2
 8007b7a:	f012 0203 	ands.w	r2, r2, #3
 8007b7e:	4607      	mov	r7, r0
 8007b80:	460e      	mov	r6, r1
 8007b82:	d007      	beq.n	8007b94 <__pow5mult+0x20>
 8007b84:	4c25      	ldr	r4, [pc, #148]	@ (8007c1c <__pow5mult+0xa8>)
 8007b86:	3a01      	subs	r2, #1
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b8e:	f7ff fe57 	bl	8007840 <__multadd>
 8007b92:	4606      	mov	r6, r0
 8007b94:	10ad      	asrs	r5, r5, #2
 8007b96:	d03d      	beq.n	8007c14 <__pow5mult+0xa0>
 8007b98:	69fc      	ldr	r4, [r7, #28]
 8007b9a:	b97c      	cbnz	r4, 8007bbc <__pow5mult+0x48>
 8007b9c:	2010      	movs	r0, #16
 8007b9e:	f7ff fd37 	bl	8007610 <malloc>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	61f8      	str	r0, [r7, #28]
 8007ba6:	b928      	cbnz	r0, 8007bb4 <__pow5mult+0x40>
 8007ba8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007bac:	4b1c      	ldr	r3, [pc, #112]	@ (8007c20 <__pow5mult+0xac>)
 8007bae:	481d      	ldr	r0, [pc, #116]	@ (8007c24 <__pow5mult+0xb0>)
 8007bb0:	f001 fb58 	bl	8009264 <__assert_func>
 8007bb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bb8:	6004      	str	r4, [r0, #0]
 8007bba:	60c4      	str	r4, [r0, #12]
 8007bbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007bc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bc4:	b94c      	cbnz	r4, 8007bda <__pow5mult+0x66>
 8007bc6:	f240 2171 	movw	r1, #625	@ 0x271
 8007bca:	4638      	mov	r0, r7
 8007bcc:	f7ff ff14 	bl	80079f8 <__i2b>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bd8:	6003      	str	r3, [r0, #0]
 8007bda:	f04f 0900 	mov.w	r9, #0
 8007bde:	07eb      	lsls	r3, r5, #31
 8007be0:	d50a      	bpl.n	8007bf8 <__pow5mult+0x84>
 8007be2:	4631      	mov	r1, r6
 8007be4:	4622      	mov	r2, r4
 8007be6:	4638      	mov	r0, r7
 8007be8:	f7ff ff1c 	bl	8007a24 <__multiply>
 8007bec:	4680      	mov	r8, r0
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f7ff fe03 	bl	80077fc <_Bfree>
 8007bf6:	4646      	mov	r6, r8
 8007bf8:	106d      	asrs	r5, r5, #1
 8007bfa:	d00b      	beq.n	8007c14 <__pow5mult+0xa0>
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	b938      	cbnz	r0, 8007c10 <__pow5mult+0x9c>
 8007c00:	4622      	mov	r2, r4
 8007c02:	4621      	mov	r1, r4
 8007c04:	4638      	mov	r0, r7
 8007c06:	f7ff ff0d 	bl	8007a24 <__multiply>
 8007c0a:	6020      	str	r0, [r4, #0]
 8007c0c:	f8c0 9000 	str.w	r9, [r0]
 8007c10:	4604      	mov	r4, r0
 8007c12:	e7e4      	b.n	8007bde <__pow5mult+0x6a>
 8007c14:	4630      	mov	r0, r6
 8007c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c1a:	bf00      	nop
 8007c1c:	0800a0e4 	.word	0x0800a0e4
 8007c20:	0800a008 	.word	0x0800a008
 8007c24:	0800a088 	.word	0x0800a088

08007c28 <__lshift>:
 8007c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	4607      	mov	r7, r0
 8007c30:	4691      	mov	r9, r2
 8007c32:	6923      	ldr	r3, [r4, #16]
 8007c34:	6849      	ldr	r1, [r1, #4]
 8007c36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c3a:	68a3      	ldr	r3, [r4, #8]
 8007c3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c40:	f108 0601 	add.w	r6, r8, #1
 8007c44:	42b3      	cmp	r3, r6
 8007c46:	db0b      	blt.n	8007c60 <__lshift+0x38>
 8007c48:	4638      	mov	r0, r7
 8007c4a:	f7ff fd97 	bl	800777c <_Balloc>
 8007c4e:	4605      	mov	r5, r0
 8007c50:	b948      	cbnz	r0, 8007c66 <__lshift+0x3e>
 8007c52:	4602      	mov	r2, r0
 8007c54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c58:	4b27      	ldr	r3, [pc, #156]	@ (8007cf8 <__lshift+0xd0>)
 8007c5a:	4828      	ldr	r0, [pc, #160]	@ (8007cfc <__lshift+0xd4>)
 8007c5c:	f001 fb02 	bl	8009264 <__assert_func>
 8007c60:	3101      	adds	r1, #1
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	e7ee      	b.n	8007c44 <__lshift+0x1c>
 8007c66:	2300      	movs	r3, #0
 8007c68:	f100 0114 	add.w	r1, r0, #20
 8007c6c:	f100 0210 	add.w	r2, r0, #16
 8007c70:	4618      	mov	r0, r3
 8007c72:	4553      	cmp	r3, sl
 8007c74:	db33      	blt.n	8007cde <__lshift+0xb6>
 8007c76:	6920      	ldr	r0, [r4, #16]
 8007c78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c7c:	f104 0314 	add.w	r3, r4, #20
 8007c80:	f019 091f 	ands.w	r9, r9, #31
 8007c84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c8c:	d02b      	beq.n	8007ce6 <__lshift+0xbe>
 8007c8e:	468a      	mov	sl, r1
 8007c90:	2200      	movs	r2, #0
 8007c92:	f1c9 0e20 	rsb	lr, r9, #32
 8007c96:	6818      	ldr	r0, [r3, #0]
 8007c98:	fa00 f009 	lsl.w	r0, r0, r9
 8007c9c:	4310      	orrs	r0, r2
 8007c9e:	f84a 0b04 	str.w	r0, [sl], #4
 8007ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ca6:	459c      	cmp	ip, r3
 8007ca8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cac:	d8f3      	bhi.n	8007c96 <__lshift+0x6e>
 8007cae:	ebac 0304 	sub.w	r3, ip, r4
 8007cb2:	3b15      	subs	r3, #21
 8007cb4:	f023 0303 	bic.w	r3, r3, #3
 8007cb8:	3304      	adds	r3, #4
 8007cba:	f104 0015 	add.w	r0, r4, #21
 8007cbe:	4584      	cmp	ip, r0
 8007cc0:	bf38      	it	cc
 8007cc2:	2304      	movcc	r3, #4
 8007cc4:	50ca      	str	r2, [r1, r3]
 8007cc6:	b10a      	cbz	r2, 8007ccc <__lshift+0xa4>
 8007cc8:	f108 0602 	add.w	r6, r8, #2
 8007ccc:	3e01      	subs	r6, #1
 8007cce:	4638      	mov	r0, r7
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	612e      	str	r6, [r5, #16]
 8007cd4:	f7ff fd92 	bl	80077fc <_Bfree>
 8007cd8:	4628      	mov	r0, r5
 8007cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cde:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	e7c5      	b.n	8007c72 <__lshift+0x4a>
 8007ce6:	3904      	subs	r1, #4
 8007ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cec:	459c      	cmp	ip, r3
 8007cee:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cf2:	d8f9      	bhi.n	8007ce8 <__lshift+0xc0>
 8007cf4:	e7ea      	b.n	8007ccc <__lshift+0xa4>
 8007cf6:	bf00      	nop
 8007cf8:	0800a077 	.word	0x0800a077
 8007cfc:	0800a088 	.word	0x0800a088

08007d00 <__mcmp>:
 8007d00:	4603      	mov	r3, r0
 8007d02:	690a      	ldr	r2, [r1, #16]
 8007d04:	6900      	ldr	r0, [r0, #16]
 8007d06:	b530      	push	{r4, r5, lr}
 8007d08:	1a80      	subs	r0, r0, r2
 8007d0a:	d10e      	bne.n	8007d2a <__mcmp+0x2a>
 8007d0c:	3314      	adds	r3, #20
 8007d0e:	3114      	adds	r1, #20
 8007d10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d20:	4295      	cmp	r5, r2
 8007d22:	d003      	beq.n	8007d2c <__mcmp+0x2c>
 8007d24:	d205      	bcs.n	8007d32 <__mcmp+0x32>
 8007d26:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2a:	bd30      	pop	{r4, r5, pc}
 8007d2c:	42a3      	cmp	r3, r4
 8007d2e:	d3f3      	bcc.n	8007d18 <__mcmp+0x18>
 8007d30:	e7fb      	b.n	8007d2a <__mcmp+0x2a>
 8007d32:	2001      	movs	r0, #1
 8007d34:	e7f9      	b.n	8007d2a <__mcmp+0x2a>
	...

08007d38 <__mdiff>:
 8007d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	4689      	mov	r9, r1
 8007d3e:	4606      	mov	r6, r0
 8007d40:	4611      	mov	r1, r2
 8007d42:	4648      	mov	r0, r9
 8007d44:	4614      	mov	r4, r2
 8007d46:	f7ff ffdb 	bl	8007d00 <__mcmp>
 8007d4a:	1e05      	subs	r5, r0, #0
 8007d4c:	d112      	bne.n	8007d74 <__mdiff+0x3c>
 8007d4e:	4629      	mov	r1, r5
 8007d50:	4630      	mov	r0, r6
 8007d52:	f7ff fd13 	bl	800777c <_Balloc>
 8007d56:	4602      	mov	r2, r0
 8007d58:	b928      	cbnz	r0, 8007d66 <__mdiff+0x2e>
 8007d5a:	f240 2137 	movw	r1, #567	@ 0x237
 8007d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8007e58 <__mdiff+0x120>)
 8007d60:	483e      	ldr	r0, [pc, #248]	@ (8007e5c <__mdiff+0x124>)
 8007d62:	f001 fa7f 	bl	8009264 <__assert_func>
 8007d66:	2301      	movs	r3, #1
 8007d68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	b003      	add	sp, #12
 8007d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d74:	bfbc      	itt	lt
 8007d76:	464b      	movlt	r3, r9
 8007d78:	46a1      	movlt	r9, r4
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d80:	bfba      	itte	lt
 8007d82:	461c      	movlt	r4, r3
 8007d84:	2501      	movlt	r5, #1
 8007d86:	2500      	movge	r5, #0
 8007d88:	f7ff fcf8 	bl	800777c <_Balloc>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	b918      	cbnz	r0, 8007d98 <__mdiff+0x60>
 8007d90:	f240 2145 	movw	r1, #581	@ 0x245
 8007d94:	4b30      	ldr	r3, [pc, #192]	@ (8007e58 <__mdiff+0x120>)
 8007d96:	e7e3      	b.n	8007d60 <__mdiff+0x28>
 8007d98:	f100 0b14 	add.w	fp, r0, #20
 8007d9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007da0:	f109 0310 	add.w	r3, r9, #16
 8007da4:	60c5      	str	r5, [r0, #12]
 8007da6:	f04f 0c00 	mov.w	ip, #0
 8007daa:	f109 0514 	add.w	r5, r9, #20
 8007dae:	46d9      	mov	r9, fp
 8007db0:	6926      	ldr	r6, [r4, #16]
 8007db2:	f104 0e14 	add.w	lr, r4, #20
 8007db6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007dba:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	9b01      	ldr	r3, [sp, #4]
 8007dc2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007dc6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007dca:	b281      	uxth	r1, r0
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	fa1f f38a 	uxth.w	r3, sl
 8007dd2:	1a5b      	subs	r3, r3, r1
 8007dd4:	0c00      	lsrs	r0, r0, #16
 8007dd6:	4463      	add	r3, ip
 8007dd8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007ddc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007de6:	4576      	cmp	r6, lr
 8007de8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dec:	f849 3b04 	str.w	r3, [r9], #4
 8007df0:	d8e6      	bhi.n	8007dc0 <__mdiff+0x88>
 8007df2:	1b33      	subs	r3, r6, r4
 8007df4:	3b15      	subs	r3, #21
 8007df6:	f023 0303 	bic.w	r3, r3, #3
 8007dfa:	3415      	adds	r4, #21
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	42a6      	cmp	r6, r4
 8007e00:	bf38      	it	cc
 8007e02:	2304      	movcc	r3, #4
 8007e04:	441d      	add	r5, r3
 8007e06:	445b      	add	r3, fp
 8007e08:	461e      	mov	r6, r3
 8007e0a:	462c      	mov	r4, r5
 8007e0c:	4544      	cmp	r4, r8
 8007e0e:	d30e      	bcc.n	8007e2e <__mdiff+0xf6>
 8007e10:	f108 0103 	add.w	r1, r8, #3
 8007e14:	1b49      	subs	r1, r1, r5
 8007e16:	f021 0103 	bic.w	r1, r1, #3
 8007e1a:	3d03      	subs	r5, #3
 8007e1c:	45a8      	cmp	r8, r5
 8007e1e:	bf38      	it	cc
 8007e20:	2100      	movcc	r1, #0
 8007e22:	440b      	add	r3, r1
 8007e24:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e28:	b199      	cbz	r1, 8007e52 <__mdiff+0x11a>
 8007e2a:	6117      	str	r7, [r2, #16]
 8007e2c:	e79e      	b.n	8007d6c <__mdiff+0x34>
 8007e2e:	46e6      	mov	lr, ip
 8007e30:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e34:	fa1f fc81 	uxth.w	ip, r1
 8007e38:	44f4      	add	ip, lr
 8007e3a:	0c08      	lsrs	r0, r1, #16
 8007e3c:	4471      	add	r1, lr
 8007e3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e42:	b289      	uxth	r1, r1
 8007e44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e4c:	f846 1b04 	str.w	r1, [r6], #4
 8007e50:	e7dc      	b.n	8007e0c <__mdiff+0xd4>
 8007e52:	3f01      	subs	r7, #1
 8007e54:	e7e6      	b.n	8007e24 <__mdiff+0xec>
 8007e56:	bf00      	nop
 8007e58:	0800a077 	.word	0x0800a077
 8007e5c:	0800a088 	.word	0x0800a088

08007e60 <__ulp>:
 8007e60:	4b0e      	ldr	r3, [pc, #56]	@ (8007e9c <__ulp+0x3c>)
 8007e62:	400b      	ands	r3, r1
 8007e64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	dc08      	bgt.n	8007e7e <__ulp+0x1e>
 8007e6c:	425b      	negs	r3, r3
 8007e6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007e72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e76:	da04      	bge.n	8007e82 <__ulp+0x22>
 8007e78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007e7c:	4113      	asrs	r3, r2
 8007e7e:	2200      	movs	r2, #0
 8007e80:	e008      	b.n	8007e94 <__ulp+0x34>
 8007e82:	f1a2 0314 	sub.w	r3, r2, #20
 8007e86:	2b1e      	cmp	r3, #30
 8007e88:	bfd6      	itet	le
 8007e8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007e8e:	2201      	movgt	r2, #1
 8007e90:	40da      	lsrle	r2, r3
 8007e92:	2300      	movs	r3, #0
 8007e94:	4619      	mov	r1, r3
 8007e96:	4610      	mov	r0, r2
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	7ff00000 	.word	0x7ff00000

08007ea0 <__b2d>:
 8007ea0:	6902      	ldr	r2, [r0, #16]
 8007ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea4:	f100 0614 	add.w	r6, r0, #20
 8007ea8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007eac:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007eb0:	4f1e      	ldr	r7, [pc, #120]	@ (8007f2c <__b2d+0x8c>)
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f7ff fd54 	bl	8007960 <__hi0bits>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	f1c0 0020 	rsb	r0, r0, #32
 8007ebe:	2b0a      	cmp	r3, #10
 8007ec0:	f1a2 0504 	sub.w	r5, r2, #4
 8007ec4:	6008      	str	r0, [r1, #0]
 8007ec6:	dc12      	bgt.n	8007eee <__b2d+0x4e>
 8007ec8:	42ae      	cmp	r6, r5
 8007eca:	bf2c      	ite	cs
 8007ecc:	2200      	movcs	r2, #0
 8007ece:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007ed2:	f1c3 0c0b 	rsb	ip, r3, #11
 8007ed6:	3315      	adds	r3, #21
 8007ed8:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007edc:	fa04 f303 	lsl.w	r3, r4, r3
 8007ee0:	fa22 f20c 	lsr.w	r2, r2, ip
 8007ee4:	ea4e 0107 	orr.w	r1, lr, r7
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	4610      	mov	r0, r2
 8007eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eee:	42ae      	cmp	r6, r5
 8007ef0:	bf36      	itet	cc
 8007ef2:	f1a2 0508 	subcc.w	r5, r2, #8
 8007ef6:	2200      	movcs	r2, #0
 8007ef8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007efc:	3b0b      	subs	r3, #11
 8007efe:	d012      	beq.n	8007f26 <__b2d+0x86>
 8007f00:	f1c3 0720 	rsb	r7, r3, #32
 8007f04:	fa22 f107 	lsr.w	r1, r2, r7
 8007f08:	409c      	lsls	r4, r3
 8007f0a:	430c      	orrs	r4, r1
 8007f0c:	42b5      	cmp	r5, r6
 8007f0e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007f12:	bf94      	ite	ls
 8007f14:	2400      	movls	r4, #0
 8007f16:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007f1a:	409a      	lsls	r2, r3
 8007f1c:	40fc      	lsrs	r4, r7
 8007f1e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007f22:	4322      	orrs	r2, r4
 8007f24:	e7e1      	b.n	8007eea <__b2d+0x4a>
 8007f26:	ea44 0107 	orr.w	r1, r4, r7
 8007f2a:	e7de      	b.n	8007eea <__b2d+0x4a>
 8007f2c:	3ff00000 	.word	0x3ff00000

08007f30 <__d2b>:
 8007f30:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007f34:	2101      	movs	r1, #1
 8007f36:	4690      	mov	r8, r2
 8007f38:	4699      	mov	r9, r3
 8007f3a:	9e08      	ldr	r6, [sp, #32]
 8007f3c:	f7ff fc1e 	bl	800777c <_Balloc>
 8007f40:	4604      	mov	r4, r0
 8007f42:	b930      	cbnz	r0, 8007f52 <__d2b+0x22>
 8007f44:	4602      	mov	r2, r0
 8007f46:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f4a:	4b23      	ldr	r3, [pc, #140]	@ (8007fd8 <__d2b+0xa8>)
 8007f4c:	4823      	ldr	r0, [pc, #140]	@ (8007fdc <__d2b+0xac>)
 8007f4e:	f001 f989 	bl	8009264 <__assert_func>
 8007f52:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f5a:	b10d      	cbz	r5, 8007f60 <__d2b+0x30>
 8007f5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	f1b8 0300 	subs.w	r3, r8, #0
 8007f66:	d024      	beq.n	8007fb2 <__d2b+0x82>
 8007f68:	4668      	mov	r0, sp
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	f7ff fd17 	bl	800799e <__lo0bits>
 8007f70:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f74:	b1d8      	cbz	r0, 8007fae <__d2b+0x7e>
 8007f76:	f1c0 0320 	rsb	r3, r0, #32
 8007f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7e:	430b      	orrs	r3, r1
 8007f80:	40c2      	lsrs	r2, r0
 8007f82:	6163      	str	r3, [r4, #20]
 8007f84:	9201      	str	r2, [sp, #4]
 8007f86:	9b01      	ldr	r3, [sp, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bf0c      	ite	eq
 8007f8c:	2201      	moveq	r2, #1
 8007f8e:	2202      	movne	r2, #2
 8007f90:	61a3      	str	r3, [r4, #24]
 8007f92:	6122      	str	r2, [r4, #16]
 8007f94:	b1ad      	cbz	r5, 8007fc2 <__d2b+0x92>
 8007f96:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f9a:	4405      	add	r5, r0
 8007f9c:	6035      	str	r5, [r6, #0]
 8007f9e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa4:	6018      	str	r0, [r3, #0]
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	b002      	add	sp, #8
 8007faa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007fae:	6161      	str	r1, [r4, #20]
 8007fb0:	e7e9      	b.n	8007f86 <__d2b+0x56>
 8007fb2:	a801      	add	r0, sp, #4
 8007fb4:	f7ff fcf3 	bl	800799e <__lo0bits>
 8007fb8:	9b01      	ldr	r3, [sp, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	6163      	str	r3, [r4, #20]
 8007fbe:	3020      	adds	r0, #32
 8007fc0:	e7e7      	b.n	8007f92 <__d2b+0x62>
 8007fc2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fca:	6030      	str	r0, [r6, #0]
 8007fcc:	6918      	ldr	r0, [r3, #16]
 8007fce:	f7ff fcc7 	bl	8007960 <__hi0bits>
 8007fd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fd6:	e7e4      	b.n	8007fa2 <__d2b+0x72>
 8007fd8:	0800a077 	.word	0x0800a077
 8007fdc:	0800a088 	.word	0x0800a088

08007fe0 <__ratio>:
 8007fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	b085      	sub	sp, #20
 8007fe6:	e9cd 1000 	strd	r1, r0, [sp]
 8007fea:	a902      	add	r1, sp, #8
 8007fec:	f7ff ff58 	bl	8007ea0 <__b2d>
 8007ff0:	468b      	mov	fp, r1
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460f      	mov	r7, r1
 8007ff6:	9800      	ldr	r0, [sp, #0]
 8007ff8:	a903      	add	r1, sp, #12
 8007ffa:	f7ff ff51 	bl	8007ea0 <__b2d>
 8007ffe:	460d      	mov	r5, r1
 8008000:	9b01      	ldr	r3, [sp, #4]
 8008002:	4689      	mov	r9, r1
 8008004:	6919      	ldr	r1, [r3, #16]
 8008006:	9b00      	ldr	r3, [sp, #0]
 8008008:	4604      	mov	r4, r0
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	4630      	mov	r0, r6
 800800e:	1ac9      	subs	r1, r1, r3
 8008010:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008014:	1a9b      	subs	r3, r3, r2
 8008016:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800801a:	2b00      	cmp	r3, #0
 800801c:	bfcd      	iteet	gt
 800801e:	463a      	movgt	r2, r7
 8008020:	462a      	movle	r2, r5
 8008022:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008026:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800802a:	bfd8      	it	le
 800802c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008030:	464b      	mov	r3, r9
 8008032:	4622      	mov	r2, r4
 8008034:	4659      	mov	r1, fp
 8008036:	f7f8 fb79 	bl	800072c <__aeabi_ddiv>
 800803a:	b005      	add	sp, #20
 800803c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008040 <__copybits>:
 8008040:	3901      	subs	r1, #1
 8008042:	b570      	push	{r4, r5, r6, lr}
 8008044:	1149      	asrs	r1, r1, #5
 8008046:	6914      	ldr	r4, [r2, #16]
 8008048:	3101      	adds	r1, #1
 800804a:	f102 0314 	add.w	r3, r2, #20
 800804e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008052:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008056:	1f05      	subs	r5, r0, #4
 8008058:	42a3      	cmp	r3, r4
 800805a:	d30c      	bcc.n	8008076 <__copybits+0x36>
 800805c:	1aa3      	subs	r3, r4, r2
 800805e:	3b11      	subs	r3, #17
 8008060:	f023 0303 	bic.w	r3, r3, #3
 8008064:	3211      	adds	r2, #17
 8008066:	42a2      	cmp	r2, r4
 8008068:	bf88      	it	hi
 800806a:	2300      	movhi	r3, #0
 800806c:	4418      	add	r0, r3
 800806e:	2300      	movs	r3, #0
 8008070:	4288      	cmp	r0, r1
 8008072:	d305      	bcc.n	8008080 <__copybits+0x40>
 8008074:	bd70      	pop	{r4, r5, r6, pc}
 8008076:	f853 6b04 	ldr.w	r6, [r3], #4
 800807a:	f845 6f04 	str.w	r6, [r5, #4]!
 800807e:	e7eb      	b.n	8008058 <__copybits+0x18>
 8008080:	f840 3b04 	str.w	r3, [r0], #4
 8008084:	e7f4      	b.n	8008070 <__copybits+0x30>

08008086 <__any_on>:
 8008086:	f100 0214 	add.w	r2, r0, #20
 800808a:	6900      	ldr	r0, [r0, #16]
 800808c:	114b      	asrs	r3, r1, #5
 800808e:	4298      	cmp	r0, r3
 8008090:	b510      	push	{r4, lr}
 8008092:	db11      	blt.n	80080b8 <__any_on+0x32>
 8008094:	dd0a      	ble.n	80080ac <__any_on+0x26>
 8008096:	f011 011f 	ands.w	r1, r1, #31
 800809a:	d007      	beq.n	80080ac <__any_on+0x26>
 800809c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80080a0:	fa24 f001 	lsr.w	r0, r4, r1
 80080a4:	fa00 f101 	lsl.w	r1, r0, r1
 80080a8:	428c      	cmp	r4, r1
 80080aa:	d10b      	bne.n	80080c4 <__any_on+0x3e>
 80080ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d803      	bhi.n	80080bc <__any_on+0x36>
 80080b4:	2000      	movs	r0, #0
 80080b6:	bd10      	pop	{r4, pc}
 80080b8:	4603      	mov	r3, r0
 80080ba:	e7f7      	b.n	80080ac <__any_on+0x26>
 80080bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080c0:	2900      	cmp	r1, #0
 80080c2:	d0f5      	beq.n	80080b0 <__any_on+0x2a>
 80080c4:	2001      	movs	r0, #1
 80080c6:	e7f6      	b.n	80080b6 <__any_on+0x30>

080080c8 <sulp>:
 80080c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080cc:	460f      	mov	r7, r1
 80080ce:	4690      	mov	r8, r2
 80080d0:	f7ff fec6 	bl	8007e60 <__ulp>
 80080d4:	4604      	mov	r4, r0
 80080d6:	460d      	mov	r5, r1
 80080d8:	f1b8 0f00 	cmp.w	r8, #0
 80080dc:	d011      	beq.n	8008102 <sulp+0x3a>
 80080de:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80080e2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	dd0b      	ble.n	8008102 <sulp+0x3a>
 80080ea:	2400      	movs	r4, #0
 80080ec:	051b      	lsls	r3, r3, #20
 80080ee:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80080f2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80080f6:	4622      	mov	r2, r4
 80080f8:	462b      	mov	r3, r5
 80080fa:	f7f8 f9ed 	bl	80004d8 <__aeabi_dmul>
 80080fe:	4604      	mov	r4, r0
 8008100:	460d      	mov	r5, r1
 8008102:	4620      	mov	r0, r4
 8008104:	4629      	mov	r1, r5
 8008106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800810a:	0000      	movs	r0, r0
 800810c:	0000      	movs	r0, r0
	...

08008110 <_strtod_l>:
 8008110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	b09f      	sub	sp, #124	@ 0x7c
 8008116:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008118:	2200      	movs	r2, #0
 800811a:	460c      	mov	r4, r1
 800811c:	921a      	str	r2, [sp, #104]	@ 0x68
 800811e:	f04f 0a00 	mov.w	sl, #0
 8008122:	f04f 0b00 	mov.w	fp, #0
 8008126:	460a      	mov	r2, r1
 8008128:	9005      	str	r0, [sp, #20]
 800812a:	9219      	str	r2, [sp, #100]	@ 0x64
 800812c:	7811      	ldrb	r1, [r2, #0]
 800812e:	292b      	cmp	r1, #43	@ 0x2b
 8008130:	d048      	beq.n	80081c4 <_strtod_l+0xb4>
 8008132:	d836      	bhi.n	80081a2 <_strtod_l+0x92>
 8008134:	290d      	cmp	r1, #13
 8008136:	d830      	bhi.n	800819a <_strtod_l+0x8a>
 8008138:	2908      	cmp	r1, #8
 800813a:	d830      	bhi.n	800819e <_strtod_l+0x8e>
 800813c:	2900      	cmp	r1, #0
 800813e:	d039      	beq.n	80081b4 <_strtod_l+0xa4>
 8008140:	2200      	movs	r2, #0
 8008142:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008144:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008146:	782a      	ldrb	r2, [r5, #0]
 8008148:	2a30      	cmp	r2, #48	@ 0x30
 800814a:	f040 80b1 	bne.w	80082b0 <_strtod_l+0x1a0>
 800814e:	786a      	ldrb	r2, [r5, #1]
 8008150:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008154:	2a58      	cmp	r2, #88	@ 0x58
 8008156:	d16c      	bne.n	8008232 <_strtod_l+0x122>
 8008158:	9302      	str	r3, [sp, #8]
 800815a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800815c:	4a8e      	ldr	r2, [pc, #568]	@ (8008398 <_strtod_l+0x288>)
 800815e:	9301      	str	r3, [sp, #4]
 8008160:	ab1a      	add	r3, sp, #104	@ 0x68
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	9805      	ldr	r0, [sp, #20]
 8008166:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008168:	a919      	add	r1, sp, #100	@ 0x64
 800816a:	f001 f915 	bl	8009398 <__gethex>
 800816e:	f010 060f 	ands.w	r6, r0, #15
 8008172:	4604      	mov	r4, r0
 8008174:	d005      	beq.n	8008182 <_strtod_l+0x72>
 8008176:	2e06      	cmp	r6, #6
 8008178:	d126      	bne.n	80081c8 <_strtod_l+0xb8>
 800817a:	2300      	movs	r3, #0
 800817c:	3501      	adds	r5, #1
 800817e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008180:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008182:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008184:	2b00      	cmp	r3, #0
 8008186:	f040 8584 	bne.w	8008c92 <_strtod_l+0xb82>
 800818a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800818c:	b1bb      	cbz	r3, 80081be <_strtod_l+0xae>
 800818e:	4650      	mov	r0, sl
 8008190:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008194:	b01f      	add	sp, #124	@ 0x7c
 8008196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819a:	2920      	cmp	r1, #32
 800819c:	d1d0      	bne.n	8008140 <_strtod_l+0x30>
 800819e:	3201      	adds	r2, #1
 80081a0:	e7c3      	b.n	800812a <_strtod_l+0x1a>
 80081a2:	292d      	cmp	r1, #45	@ 0x2d
 80081a4:	d1cc      	bne.n	8008140 <_strtod_l+0x30>
 80081a6:	2101      	movs	r1, #1
 80081a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80081aa:	1c51      	adds	r1, r2, #1
 80081ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80081ae:	7852      	ldrb	r2, [r2, #1]
 80081b0:	2a00      	cmp	r2, #0
 80081b2:	d1c7      	bne.n	8008144 <_strtod_l+0x34>
 80081b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081b6:	9419      	str	r4, [sp, #100]	@ 0x64
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f040 8568 	bne.w	8008c8e <_strtod_l+0xb7e>
 80081be:	4650      	mov	r0, sl
 80081c0:	4659      	mov	r1, fp
 80081c2:	e7e7      	b.n	8008194 <_strtod_l+0x84>
 80081c4:	2100      	movs	r1, #0
 80081c6:	e7ef      	b.n	80081a8 <_strtod_l+0x98>
 80081c8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80081ca:	b13a      	cbz	r2, 80081dc <_strtod_l+0xcc>
 80081cc:	2135      	movs	r1, #53	@ 0x35
 80081ce:	a81c      	add	r0, sp, #112	@ 0x70
 80081d0:	f7ff ff36 	bl	8008040 <__copybits>
 80081d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081d6:	9805      	ldr	r0, [sp, #20]
 80081d8:	f7ff fb10 	bl	80077fc <_Bfree>
 80081dc:	3e01      	subs	r6, #1
 80081de:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80081e0:	2e04      	cmp	r6, #4
 80081e2:	d806      	bhi.n	80081f2 <_strtod_l+0xe2>
 80081e4:	e8df f006 	tbb	[pc, r6]
 80081e8:	201d0314 	.word	0x201d0314
 80081ec:	14          	.byte	0x14
 80081ed:	00          	.byte	0x00
 80081ee:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80081f2:	05e1      	lsls	r1, r4, #23
 80081f4:	bf48      	it	mi
 80081f6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80081fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80081fe:	0d1b      	lsrs	r3, r3, #20
 8008200:	051b      	lsls	r3, r3, #20
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1bd      	bne.n	8008182 <_strtod_l+0x72>
 8008206:	f7fe fb2b 	bl	8006860 <__errno>
 800820a:	2322      	movs	r3, #34	@ 0x22
 800820c:	6003      	str	r3, [r0, #0]
 800820e:	e7b8      	b.n	8008182 <_strtod_l+0x72>
 8008210:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008214:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008218:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800821c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008220:	e7e7      	b.n	80081f2 <_strtod_l+0xe2>
 8008222:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800839c <_strtod_l+0x28c>
 8008226:	e7e4      	b.n	80081f2 <_strtod_l+0xe2>
 8008228:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800822c:	f04f 3aff 	mov.w	sl, #4294967295
 8008230:	e7df      	b.n	80081f2 <_strtod_l+0xe2>
 8008232:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	9219      	str	r2, [sp, #100]	@ 0x64
 8008238:	785b      	ldrb	r3, [r3, #1]
 800823a:	2b30      	cmp	r3, #48	@ 0x30
 800823c:	d0f9      	beq.n	8008232 <_strtod_l+0x122>
 800823e:	2b00      	cmp	r3, #0
 8008240:	d09f      	beq.n	8008182 <_strtod_l+0x72>
 8008242:	2301      	movs	r3, #1
 8008244:	9309      	str	r3, [sp, #36]	@ 0x24
 8008246:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008248:	220a      	movs	r2, #10
 800824a:	930c      	str	r3, [sp, #48]	@ 0x30
 800824c:	2300      	movs	r3, #0
 800824e:	461f      	mov	r7, r3
 8008250:	9308      	str	r3, [sp, #32]
 8008252:	930a      	str	r3, [sp, #40]	@ 0x28
 8008254:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008256:	7805      	ldrb	r5, [r0, #0]
 8008258:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800825c:	b2d9      	uxtb	r1, r3
 800825e:	2909      	cmp	r1, #9
 8008260:	d928      	bls.n	80082b4 <_strtod_l+0x1a4>
 8008262:	2201      	movs	r2, #1
 8008264:	494e      	ldr	r1, [pc, #312]	@ (80083a0 <_strtod_l+0x290>)
 8008266:	f000 ffc7 	bl	80091f8 <strncmp>
 800826a:	2800      	cmp	r0, #0
 800826c:	d032      	beq.n	80082d4 <_strtod_l+0x1c4>
 800826e:	2000      	movs	r0, #0
 8008270:	462a      	mov	r2, r5
 8008272:	4681      	mov	r9, r0
 8008274:	463d      	mov	r5, r7
 8008276:	4603      	mov	r3, r0
 8008278:	2a65      	cmp	r2, #101	@ 0x65
 800827a:	d001      	beq.n	8008280 <_strtod_l+0x170>
 800827c:	2a45      	cmp	r2, #69	@ 0x45
 800827e:	d114      	bne.n	80082aa <_strtod_l+0x19a>
 8008280:	b91d      	cbnz	r5, 800828a <_strtod_l+0x17a>
 8008282:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008284:	4302      	orrs	r2, r0
 8008286:	d095      	beq.n	80081b4 <_strtod_l+0xa4>
 8008288:	2500      	movs	r5, #0
 800828a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800828c:	1c62      	adds	r2, r4, #1
 800828e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008290:	7862      	ldrb	r2, [r4, #1]
 8008292:	2a2b      	cmp	r2, #43	@ 0x2b
 8008294:	d077      	beq.n	8008386 <_strtod_l+0x276>
 8008296:	2a2d      	cmp	r2, #45	@ 0x2d
 8008298:	d07b      	beq.n	8008392 <_strtod_l+0x282>
 800829a:	f04f 0c00 	mov.w	ip, #0
 800829e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80082a2:	2909      	cmp	r1, #9
 80082a4:	f240 8082 	bls.w	80083ac <_strtod_l+0x29c>
 80082a8:	9419      	str	r4, [sp, #100]	@ 0x64
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	e0a2      	b.n	80083f6 <_strtod_l+0x2e6>
 80082b0:	2300      	movs	r3, #0
 80082b2:	e7c7      	b.n	8008244 <_strtod_l+0x134>
 80082b4:	2f08      	cmp	r7, #8
 80082b6:	bfd5      	itete	le
 80082b8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80082ba:	9908      	ldrgt	r1, [sp, #32]
 80082bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80082c0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80082c4:	f100 0001 	add.w	r0, r0, #1
 80082c8:	bfd4      	ite	le
 80082ca:	930a      	strle	r3, [sp, #40]	@ 0x28
 80082cc:	9308      	strgt	r3, [sp, #32]
 80082ce:	3701      	adds	r7, #1
 80082d0:	9019      	str	r0, [sp, #100]	@ 0x64
 80082d2:	e7bf      	b.n	8008254 <_strtod_l+0x144>
 80082d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80082da:	785a      	ldrb	r2, [r3, #1]
 80082dc:	b37f      	cbz	r7, 800833e <_strtod_l+0x22e>
 80082de:	4681      	mov	r9, r0
 80082e0:	463d      	mov	r5, r7
 80082e2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80082e6:	2b09      	cmp	r3, #9
 80082e8:	d912      	bls.n	8008310 <_strtod_l+0x200>
 80082ea:	2301      	movs	r3, #1
 80082ec:	e7c4      	b.n	8008278 <_strtod_l+0x168>
 80082ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082f0:	3001      	adds	r0, #1
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80082f6:	785a      	ldrb	r2, [r3, #1]
 80082f8:	2a30      	cmp	r2, #48	@ 0x30
 80082fa:	d0f8      	beq.n	80082ee <_strtod_l+0x1de>
 80082fc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008300:	2b08      	cmp	r3, #8
 8008302:	f200 84cb 	bhi.w	8008c9c <_strtod_l+0xb8c>
 8008306:	4681      	mov	r9, r0
 8008308:	2000      	movs	r0, #0
 800830a:	4605      	mov	r5, r0
 800830c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800830e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008310:	3a30      	subs	r2, #48	@ 0x30
 8008312:	f100 0301 	add.w	r3, r0, #1
 8008316:	d02a      	beq.n	800836e <_strtod_l+0x25e>
 8008318:	4499      	add	r9, r3
 800831a:	210a      	movs	r1, #10
 800831c:	462b      	mov	r3, r5
 800831e:	eb00 0c05 	add.w	ip, r0, r5
 8008322:	4563      	cmp	r3, ip
 8008324:	d10d      	bne.n	8008342 <_strtod_l+0x232>
 8008326:	1c69      	adds	r1, r5, #1
 8008328:	4401      	add	r1, r0
 800832a:	4428      	add	r0, r5
 800832c:	2808      	cmp	r0, #8
 800832e:	dc16      	bgt.n	800835e <_strtod_l+0x24e>
 8008330:	230a      	movs	r3, #10
 8008332:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008334:	fb03 2300 	mla	r3, r3, r0, r2
 8008338:	930a      	str	r3, [sp, #40]	@ 0x28
 800833a:	2300      	movs	r3, #0
 800833c:	e018      	b.n	8008370 <_strtod_l+0x260>
 800833e:	4638      	mov	r0, r7
 8008340:	e7da      	b.n	80082f8 <_strtod_l+0x1e8>
 8008342:	2b08      	cmp	r3, #8
 8008344:	f103 0301 	add.w	r3, r3, #1
 8008348:	dc03      	bgt.n	8008352 <_strtod_l+0x242>
 800834a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800834c:	434e      	muls	r6, r1
 800834e:	960a      	str	r6, [sp, #40]	@ 0x28
 8008350:	e7e7      	b.n	8008322 <_strtod_l+0x212>
 8008352:	2b10      	cmp	r3, #16
 8008354:	bfde      	ittt	le
 8008356:	9e08      	ldrle	r6, [sp, #32]
 8008358:	434e      	mulle	r6, r1
 800835a:	9608      	strle	r6, [sp, #32]
 800835c:	e7e1      	b.n	8008322 <_strtod_l+0x212>
 800835e:	280f      	cmp	r0, #15
 8008360:	dceb      	bgt.n	800833a <_strtod_l+0x22a>
 8008362:	230a      	movs	r3, #10
 8008364:	9808      	ldr	r0, [sp, #32]
 8008366:	fb03 2300 	mla	r3, r3, r0, r2
 800836a:	9308      	str	r3, [sp, #32]
 800836c:	e7e5      	b.n	800833a <_strtod_l+0x22a>
 800836e:	4629      	mov	r1, r5
 8008370:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008372:	460d      	mov	r5, r1
 8008374:	1c50      	adds	r0, r2, #1
 8008376:	9019      	str	r0, [sp, #100]	@ 0x64
 8008378:	7852      	ldrb	r2, [r2, #1]
 800837a:	4618      	mov	r0, r3
 800837c:	e7b1      	b.n	80082e2 <_strtod_l+0x1d2>
 800837e:	f04f 0900 	mov.w	r9, #0
 8008382:	2301      	movs	r3, #1
 8008384:	e77d      	b.n	8008282 <_strtod_l+0x172>
 8008386:	f04f 0c00 	mov.w	ip, #0
 800838a:	1ca2      	adds	r2, r4, #2
 800838c:	9219      	str	r2, [sp, #100]	@ 0x64
 800838e:	78a2      	ldrb	r2, [r4, #2]
 8008390:	e785      	b.n	800829e <_strtod_l+0x18e>
 8008392:	f04f 0c01 	mov.w	ip, #1
 8008396:	e7f8      	b.n	800838a <_strtod_l+0x27a>
 8008398:	0800a1f8 	.word	0x0800a1f8
 800839c:	7ff00000 	.word	0x7ff00000
 80083a0:	0800a1e0 	.word	0x0800a1e0
 80083a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083a6:	1c51      	adds	r1, r2, #1
 80083a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80083aa:	7852      	ldrb	r2, [r2, #1]
 80083ac:	2a30      	cmp	r2, #48	@ 0x30
 80083ae:	d0f9      	beq.n	80083a4 <_strtod_l+0x294>
 80083b0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80083b4:	2908      	cmp	r1, #8
 80083b6:	f63f af78 	bhi.w	80082aa <_strtod_l+0x19a>
 80083ba:	f04f 080a 	mov.w	r8, #10
 80083be:	3a30      	subs	r2, #48	@ 0x30
 80083c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80083c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80083c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083c8:	1c56      	adds	r6, r2, #1
 80083ca:	9619      	str	r6, [sp, #100]	@ 0x64
 80083cc:	7852      	ldrb	r2, [r2, #1]
 80083ce:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80083d2:	f1be 0f09 	cmp.w	lr, #9
 80083d6:	d939      	bls.n	800844c <_strtod_l+0x33c>
 80083d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80083da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80083de:	1a76      	subs	r6, r6, r1
 80083e0:	2e08      	cmp	r6, #8
 80083e2:	dc03      	bgt.n	80083ec <_strtod_l+0x2dc>
 80083e4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80083e6:	4588      	cmp	r8, r1
 80083e8:	bfa8      	it	ge
 80083ea:	4688      	movge	r8, r1
 80083ec:	f1bc 0f00 	cmp.w	ip, #0
 80083f0:	d001      	beq.n	80083f6 <_strtod_l+0x2e6>
 80083f2:	f1c8 0800 	rsb	r8, r8, #0
 80083f6:	2d00      	cmp	r5, #0
 80083f8:	d14e      	bne.n	8008498 <_strtod_l+0x388>
 80083fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083fc:	4308      	orrs	r0, r1
 80083fe:	f47f aec0 	bne.w	8008182 <_strtod_l+0x72>
 8008402:	2b00      	cmp	r3, #0
 8008404:	f47f aed6 	bne.w	80081b4 <_strtod_l+0xa4>
 8008408:	2a69      	cmp	r2, #105	@ 0x69
 800840a:	d028      	beq.n	800845e <_strtod_l+0x34e>
 800840c:	dc25      	bgt.n	800845a <_strtod_l+0x34a>
 800840e:	2a49      	cmp	r2, #73	@ 0x49
 8008410:	d025      	beq.n	800845e <_strtod_l+0x34e>
 8008412:	2a4e      	cmp	r2, #78	@ 0x4e
 8008414:	f47f aece 	bne.w	80081b4 <_strtod_l+0xa4>
 8008418:	499a      	ldr	r1, [pc, #616]	@ (8008684 <_strtod_l+0x574>)
 800841a:	a819      	add	r0, sp, #100	@ 0x64
 800841c:	f001 f9de 	bl	80097dc <__match>
 8008420:	2800      	cmp	r0, #0
 8008422:	f43f aec7 	beq.w	80081b4 <_strtod_l+0xa4>
 8008426:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b28      	cmp	r3, #40	@ 0x28
 800842c:	d12e      	bne.n	800848c <_strtod_l+0x37c>
 800842e:	4996      	ldr	r1, [pc, #600]	@ (8008688 <_strtod_l+0x578>)
 8008430:	aa1c      	add	r2, sp, #112	@ 0x70
 8008432:	a819      	add	r0, sp, #100	@ 0x64
 8008434:	f001 f9e6 	bl	8009804 <__hexnan>
 8008438:	2805      	cmp	r0, #5
 800843a:	d127      	bne.n	800848c <_strtod_l+0x37c>
 800843c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800843e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008442:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008446:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800844a:	e69a      	b.n	8008182 <_strtod_l+0x72>
 800844c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800844e:	fb08 2101 	mla	r1, r8, r1, r2
 8008452:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008456:	920e      	str	r2, [sp, #56]	@ 0x38
 8008458:	e7b5      	b.n	80083c6 <_strtod_l+0x2b6>
 800845a:	2a6e      	cmp	r2, #110	@ 0x6e
 800845c:	e7da      	b.n	8008414 <_strtod_l+0x304>
 800845e:	498b      	ldr	r1, [pc, #556]	@ (800868c <_strtod_l+0x57c>)
 8008460:	a819      	add	r0, sp, #100	@ 0x64
 8008462:	f001 f9bb 	bl	80097dc <__match>
 8008466:	2800      	cmp	r0, #0
 8008468:	f43f aea4 	beq.w	80081b4 <_strtod_l+0xa4>
 800846c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800846e:	4988      	ldr	r1, [pc, #544]	@ (8008690 <_strtod_l+0x580>)
 8008470:	3b01      	subs	r3, #1
 8008472:	a819      	add	r0, sp, #100	@ 0x64
 8008474:	9319      	str	r3, [sp, #100]	@ 0x64
 8008476:	f001 f9b1 	bl	80097dc <__match>
 800847a:	b910      	cbnz	r0, 8008482 <_strtod_l+0x372>
 800847c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800847e:	3301      	adds	r3, #1
 8008480:	9319      	str	r3, [sp, #100]	@ 0x64
 8008482:	f04f 0a00 	mov.w	sl, #0
 8008486:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008694 <_strtod_l+0x584>
 800848a:	e67a      	b.n	8008182 <_strtod_l+0x72>
 800848c:	4882      	ldr	r0, [pc, #520]	@ (8008698 <_strtod_l+0x588>)
 800848e:	f000 fee3 	bl	8009258 <nan>
 8008492:	4682      	mov	sl, r0
 8008494:	468b      	mov	fp, r1
 8008496:	e674      	b.n	8008182 <_strtod_l+0x72>
 8008498:	eba8 0309 	sub.w	r3, r8, r9
 800849c:	2f00      	cmp	r7, #0
 800849e:	bf08      	it	eq
 80084a0:	462f      	moveq	r7, r5
 80084a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80084a4:	2d10      	cmp	r5, #16
 80084a6:	462c      	mov	r4, r5
 80084a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80084aa:	bfa8      	it	ge
 80084ac:	2410      	movge	r4, #16
 80084ae:	f7f7 ff99 	bl	80003e4 <__aeabi_ui2d>
 80084b2:	2d09      	cmp	r5, #9
 80084b4:	4682      	mov	sl, r0
 80084b6:	468b      	mov	fp, r1
 80084b8:	dc11      	bgt.n	80084de <_strtod_l+0x3ce>
 80084ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f43f ae60 	beq.w	8008182 <_strtod_l+0x72>
 80084c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c4:	dd76      	ble.n	80085b4 <_strtod_l+0x4a4>
 80084c6:	2b16      	cmp	r3, #22
 80084c8:	dc5d      	bgt.n	8008586 <_strtod_l+0x476>
 80084ca:	4974      	ldr	r1, [pc, #464]	@ (800869c <_strtod_l+0x58c>)
 80084cc:	4652      	mov	r2, sl
 80084ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084d2:	465b      	mov	r3, fp
 80084d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084d8:	f7f7 fffe 	bl	80004d8 <__aeabi_dmul>
 80084dc:	e7d9      	b.n	8008492 <_strtod_l+0x382>
 80084de:	4b6f      	ldr	r3, [pc, #444]	@ (800869c <_strtod_l+0x58c>)
 80084e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80084e8:	f7f7 fff6 	bl	80004d8 <__aeabi_dmul>
 80084ec:	4682      	mov	sl, r0
 80084ee:	9808      	ldr	r0, [sp, #32]
 80084f0:	468b      	mov	fp, r1
 80084f2:	f7f7 ff77 	bl	80003e4 <__aeabi_ui2d>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	4650      	mov	r0, sl
 80084fc:	4659      	mov	r1, fp
 80084fe:	f7f7 fe35 	bl	800016c <__adddf3>
 8008502:	2d0f      	cmp	r5, #15
 8008504:	4682      	mov	sl, r0
 8008506:	468b      	mov	fp, r1
 8008508:	ddd7      	ble.n	80084ba <_strtod_l+0x3aa>
 800850a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800850c:	1b2c      	subs	r4, r5, r4
 800850e:	441c      	add	r4, r3
 8008510:	2c00      	cmp	r4, #0
 8008512:	f340 8096 	ble.w	8008642 <_strtod_l+0x532>
 8008516:	f014 030f 	ands.w	r3, r4, #15
 800851a:	d00a      	beq.n	8008532 <_strtod_l+0x422>
 800851c:	495f      	ldr	r1, [pc, #380]	@ (800869c <_strtod_l+0x58c>)
 800851e:	4652      	mov	r2, sl
 8008520:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008528:	465b      	mov	r3, fp
 800852a:	f7f7 ffd5 	bl	80004d8 <__aeabi_dmul>
 800852e:	4682      	mov	sl, r0
 8008530:	468b      	mov	fp, r1
 8008532:	f034 040f 	bics.w	r4, r4, #15
 8008536:	d073      	beq.n	8008620 <_strtod_l+0x510>
 8008538:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800853c:	dd48      	ble.n	80085d0 <_strtod_l+0x4c0>
 800853e:	2400      	movs	r4, #0
 8008540:	46a0      	mov	r8, r4
 8008542:	46a1      	mov	r9, r4
 8008544:	940a      	str	r4, [sp, #40]	@ 0x28
 8008546:	2322      	movs	r3, #34	@ 0x22
 8008548:	f04f 0a00 	mov.w	sl, #0
 800854c:	9a05      	ldr	r2, [sp, #20]
 800854e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008694 <_strtod_l+0x584>
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008556:	2b00      	cmp	r3, #0
 8008558:	f43f ae13 	beq.w	8008182 <_strtod_l+0x72>
 800855c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800855e:	9805      	ldr	r0, [sp, #20]
 8008560:	f7ff f94c 	bl	80077fc <_Bfree>
 8008564:	4649      	mov	r1, r9
 8008566:	9805      	ldr	r0, [sp, #20]
 8008568:	f7ff f948 	bl	80077fc <_Bfree>
 800856c:	4641      	mov	r1, r8
 800856e:	9805      	ldr	r0, [sp, #20]
 8008570:	f7ff f944 	bl	80077fc <_Bfree>
 8008574:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008576:	9805      	ldr	r0, [sp, #20]
 8008578:	f7ff f940 	bl	80077fc <_Bfree>
 800857c:	4621      	mov	r1, r4
 800857e:	9805      	ldr	r0, [sp, #20]
 8008580:	f7ff f93c 	bl	80077fc <_Bfree>
 8008584:	e5fd      	b.n	8008182 <_strtod_l+0x72>
 8008586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008588:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800858c:	4293      	cmp	r3, r2
 800858e:	dbbc      	blt.n	800850a <_strtod_l+0x3fa>
 8008590:	4c42      	ldr	r4, [pc, #264]	@ (800869c <_strtod_l+0x58c>)
 8008592:	f1c5 050f 	rsb	r5, r5, #15
 8008596:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800859a:	4652      	mov	r2, sl
 800859c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085a0:	465b      	mov	r3, fp
 80085a2:	f7f7 ff99 	bl	80004d8 <__aeabi_dmul>
 80085a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a8:	1b5d      	subs	r5, r3, r5
 80085aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80085ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80085b2:	e791      	b.n	80084d8 <_strtod_l+0x3c8>
 80085b4:	3316      	adds	r3, #22
 80085b6:	dba8      	blt.n	800850a <_strtod_l+0x3fa>
 80085b8:	4b38      	ldr	r3, [pc, #224]	@ (800869c <_strtod_l+0x58c>)
 80085ba:	eba9 0808 	sub.w	r8, r9, r8
 80085be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80085c2:	4650      	mov	r0, sl
 80085c4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80085c8:	4659      	mov	r1, fp
 80085ca:	f7f8 f8af 	bl	800072c <__aeabi_ddiv>
 80085ce:	e760      	b.n	8008492 <_strtod_l+0x382>
 80085d0:	4b33      	ldr	r3, [pc, #204]	@ (80086a0 <_strtod_l+0x590>)
 80085d2:	4650      	mov	r0, sl
 80085d4:	9308      	str	r3, [sp, #32]
 80085d6:	2300      	movs	r3, #0
 80085d8:	4659      	mov	r1, fp
 80085da:	461e      	mov	r6, r3
 80085dc:	1124      	asrs	r4, r4, #4
 80085de:	2c01      	cmp	r4, #1
 80085e0:	dc21      	bgt.n	8008626 <_strtod_l+0x516>
 80085e2:	b10b      	cbz	r3, 80085e8 <_strtod_l+0x4d8>
 80085e4:	4682      	mov	sl, r0
 80085e6:	468b      	mov	fp, r1
 80085e8:	492d      	ldr	r1, [pc, #180]	@ (80086a0 <_strtod_l+0x590>)
 80085ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80085ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80085f2:	4652      	mov	r2, sl
 80085f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085f8:	465b      	mov	r3, fp
 80085fa:	f7f7 ff6d 	bl	80004d8 <__aeabi_dmul>
 80085fe:	4b25      	ldr	r3, [pc, #148]	@ (8008694 <_strtod_l+0x584>)
 8008600:	460a      	mov	r2, r1
 8008602:	400b      	ands	r3, r1
 8008604:	4927      	ldr	r1, [pc, #156]	@ (80086a4 <_strtod_l+0x594>)
 8008606:	4682      	mov	sl, r0
 8008608:	428b      	cmp	r3, r1
 800860a:	d898      	bhi.n	800853e <_strtod_l+0x42e>
 800860c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008610:	428b      	cmp	r3, r1
 8008612:	bf86      	itte	hi
 8008614:	f04f 3aff 	movhi.w	sl, #4294967295
 8008618:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80086a8 <_strtod_l+0x598>
 800861c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008620:	2300      	movs	r3, #0
 8008622:	9308      	str	r3, [sp, #32]
 8008624:	e07a      	b.n	800871c <_strtod_l+0x60c>
 8008626:	07e2      	lsls	r2, r4, #31
 8008628:	d505      	bpl.n	8008636 <_strtod_l+0x526>
 800862a:	9b08      	ldr	r3, [sp, #32]
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f7f7 ff52 	bl	80004d8 <__aeabi_dmul>
 8008634:	2301      	movs	r3, #1
 8008636:	9a08      	ldr	r2, [sp, #32]
 8008638:	3601      	adds	r6, #1
 800863a:	3208      	adds	r2, #8
 800863c:	1064      	asrs	r4, r4, #1
 800863e:	9208      	str	r2, [sp, #32]
 8008640:	e7cd      	b.n	80085de <_strtod_l+0x4ce>
 8008642:	d0ed      	beq.n	8008620 <_strtod_l+0x510>
 8008644:	4264      	negs	r4, r4
 8008646:	f014 020f 	ands.w	r2, r4, #15
 800864a:	d00a      	beq.n	8008662 <_strtod_l+0x552>
 800864c:	4b13      	ldr	r3, [pc, #76]	@ (800869c <_strtod_l+0x58c>)
 800864e:	4650      	mov	r0, sl
 8008650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008654:	4659      	mov	r1, fp
 8008656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865a:	f7f8 f867 	bl	800072c <__aeabi_ddiv>
 800865e:	4682      	mov	sl, r0
 8008660:	468b      	mov	fp, r1
 8008662:	1124      	asrs	r4, r4, #4
 8008664:	d0dc      	beq.n	8008620 <_strtod_l+0x510>
 8008666:	2c1f      	cmp	r4, #31
 8008668:	dd20      	ble.n	80086ac <_strtod_l+0x59c>
 800866a:	2400      	movs	r4, #0
 800866c:	46a0      	mov	r8, r4
 800866e:	46a1      	mov	r9, r4
 8008670:	940a      	str	r4, [sp, #40]	@ 0x28
 8008672:	2322      	movs	r3, #34	@ 0x22
 8008674:	9a05      	ldr	r2, [sp, #20]
 8008676:	f04f 0a00 	mov.w	sl, #0
 800867a:	f04f 0b00 	mov.w	fp, #0
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	e768      	b.n	8008554 <_strtod_l+0x444>
 8008682:	bf00      	nop
 8008684:	08009fcf 	.word	0x08009fcf
 8008688:	0800a1e4 	.word	0x0800a1e4
 800868c:	08009fc7 	.word	0x08009fc7
 8008690:	08009ffe 	.word	0x08009ffe
 8008694:	7ff00000 	.word	0x7ff00000
 8008698:	0800a38d 	.word	0x0800a38d
 800869c:	0800a118 	.word	0x0800a118
 80086a0:	0800a0f0 	.word	0x0800a0f0
 80086a4:	7ca00000 	.word	0x7ca00000
 80086a8:	7fefffff 	.word	0x7fefffff
 80086ac:	f014 0310 	ands.w	r3, r4, #16
 80086b0:	bf18      	it	ne
 80086b2:	236a      	movne	r3, #106	@ 0x6a
 80086b4:	4650      	mov	r0, sl
 80086b6:	9308      	str	r3, [sp, #32]
 80086b8:	4659      	mov	r1, fp
 80086ba:	2300      	movs	r3, #0
 80086bc:	4ea9      	ldr	r6, [pc, #676]	@ (8008964 <_strtod_l+0x854>)
 80086be:	07e2      	lsls	r2, r4, #31
 80086c0:	d504      	bpl.n	80086cc <_strtod_l+0x5bc>
 80086c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086c6:	f7f7 ff07 	bl	80004d8 <__aeabi_dmul>
 80086ca:	2301      	movs	r3, #1
 80086cc:	1064      	asrs	r4, r4, #1
 80086ce:	f106 0608 	add.w	r6, r6, #8
 80086d2:	d1f4      	bne.n	80086be <_strtod_l+0x5ae>
 80086d4:	b10b      	cbz	r3, 80086da <_strtod_l+0x5ca>
 80086d6:	4682      	mov	sl, r0
 80086d8:	468b      	mov	fp, r1
 80086da:	9b08      	ldr	r3, [sp, #32]
 80086dc:	b1b3      	cbz	r3, 800870c <_strtod_l+0x5fc>
 80086de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80086e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	4659      	mov	r1, fp
 80086ea:	dd0f      	ble.n	800870c <_strtod_l+0x5fc>
 80086ec:	2b1f      	cmp	r3, #31
 80086ee:	dd57      	ble.n	80087a0 <_strtod_l+0x690>
 80086f0:	2b34      	cmp	r3, #52	@ 0x34
 80086f2:	bfd8      	it	le
 80086f4:	f04f 33ff 	movle.w	r3, #4294967295
 80086f8:	f04f 0a00 	mov.w	sl, #0
 80086fc:	bfcf      	iteee	gt
 80086fe:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008702:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008706:	4093      	lslle	r3, r2
 8008708:	ea03 0b01 	andle.w	fp, r3, r1
 800870c:	2200      	movs	r2, #0
 800870e:	2300      	movs	r3, #0
 8008710:	4650      	mov	r0, sl
 8008712:	4659      	mov	r1, fp
 8008714:	f7f8 f948 	bl	80009a8 <__aeabi_dcmpeq>
 8008718:	2800      	cmp	r0, #0
 800871a:	d1a6      	bne.n	800866a <_strtod_l+0x55a>
 800871c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800871e:	463a      	mov	r2, r7
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008724:	462b      	mov	r3, r5
 8008726:	9805      	ldr	r0, [sp, #20]
 8008728:	f7ff f8d0 	bl	80078cc <__s2b>
 800872c:	900a      	str	r0, [sp, #40]	@ 0x28
 800872e:	2800      	cmp	r0, #0
 8008730:	f43f af05 	beq.w	800853e <_strtod_l+0x42e>
 8008734:	2400      	movs	r4, #0
 8008736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008738:	eba9 0308 	sub.w	r3, r9, r8
 800873c:	2a00      	cmp	r2, #0
 800873e:	bfa8      	it	ge
 8008740:	2300      	movge	r3, #0
 8008742:	46a0      	mov	r8, r4
 8008744:	9312      	str	r3, [sp, #72]	@ 0x48
 8008746:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800874a:	9316      	str	r3, [sp, #88]	@ 0x58
 800874c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800874e:	9805      	ldr	r0, [sp, #20]
 8008750:	6859      	ldr	r1, [r3, #4]
 8008752:	f7ff f813 	bl	800777c <_Balloc>
 8008756:	4681      	mov	r9, r0
 8008758:	2800      	cmp	r0, #0
 800875a:	f43f aef4 	beq.w	8008546 <_strtod_l+0x436>
 800875e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008760:	300c      	adds	r0, #12
 8008762:	691a      	ldr	r2, [r3, #16]
 8008764:	f103 010c 	add.w	r1, r3, #12
 8008768:	3202      	adds	r2, #2
 800876a:	0092      	lsls	r2, r2, #2
 800876c:	f000 fd66 	bl	800923c <memcpy>
 8008770:	ab1c      	add	r3, sp, #112	@ 0x70
 8008772:	9301      	str	r3, [sp, #4]
 8008774:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	4652      	mov	r2, sl
 800877a:	465b      	mov	r3, fp
 800877c:	9805      	ldr	r0, [sp, #20]
 800877e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008782:	f7ff fbd5 	bl	8007f30 <__d2b>
 8008786:	901a      	str	r0, [sp, #104]	@ 0x68
 8008788:	2800      	cmp	r0, #0
 800878a:	f43f aedc 	beq.w	8008546 <_strtod_l+0x436>
 800878e:	2101      	movs	r1, #1
 8008790:	9805      	ldr	r0, [sp, #20]
 8008792:	f7ff f931 	bl	80079f8 <__i2b>
 8008796:	4680      	mov	r8, r0
 8008798:	b948      	cbnz	r0, 80087ae <_strtod_l+0x69e>
 800879a:	f04f 0800 	mov.w	r8, #0
 800879e:	e6d2      	b.n	8008546 <_strtod_l+0x436>
 80087a0:	f04f 32ff 	mov.w	r2, #4294967295
 80087a4:	fa02 f303 	lsl.w	r3, r2, r3
 80087a8:	ea03 0a0a 	and.w	sl, r3, sl
 80087ac:	e7ae      	b.n	800870c <_strtod_l+0x5fc>
 80087ae:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80087b0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80087b2:	2d00      	cmp	r5, #0
 80087b4:	bfab      	itete	ge
 80087b6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80087b8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80087ba:	18ef      	addge	r7, r5, r3
 80087bc:	1b5e      	sublt	r6, r3, r5
 80087be:	9b08      	ldr	r3, [sp, #32]
 80087c0:	bfa8      	it	ge
 80087c2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80087c4:	eba5 0503 	sub.w	r5, r5, r3
 80087c8:	4415      	add	r5, r2
 80087ca:	4b67      	ldr	r3, [pc, #412]	@ (8008968 <_strtod_l+0x858>)
 80087cc:	f105 35ff 	add.w	r5, r5, #4294967295
 80087d0:	bfb8      	it	lt
 80087d2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80087d4:	429d      	cmp	r5, r3
 80087d6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80087da:	da50      	bge.n	800887e <_strtod_l+0x76e>
 80087dc:	1b5b      	subs	r3, r3, r5
 80087de:	2b1f      	cmp	r3, #31
 80087e0:	f04f 0101 	mov.w	r1, #1
 80087e4:	eba2 0203 	sub.w	r2, r2, r3
 80087e8:	dc3d      	bgt.n	8008866 <_strtod_l+0x756>
 80087ea:	fa01 f303 	lsl.w	r3, r1, r3
 80087ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80087f0:	2300      	movs	r3, #0
 80087f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80087f4:	18bd      	adds	r5, r7, r2
 80087f6:	9b08      	ldr	r3, [sp, #32]
 80087f8:	42af      	cmp	r7, r5
 80087fa:	4416      	add	r6, r2
 80087fc:	441e      	add	r6, r3
 80087fe:	463b      	mov	r3, r7
 8008800:	bfa8      	it	ge
 8008802:	462b      	movge	r3, r5
 8008804:	42b3      	cmp	r3, r6
 8008806:	bfa8      	it	ge
 8008808:	4633      	movge	r3, r6
 800880a:	2b00      	cmp	r3, #0
 800880c:	bfc2      	ittt	gt
 800880e:	1aed      	subgt	r5, r5, r3
 8008810:	1af6      	subgt	r6, r6, r3
 8008812:	1aff      	subgt	r7, r7, r3
 8008814:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008816:	2b00      	cmp	r3, #0
 8008818:	dd16      	ble.n	8008848 <_strtod_l+0x738>
 800881a:	4641      	mov	r1, r8
 800881c:	461a      	mov	r2, r3
 800881e:	9805      	ldr	r0, [sp, #20]
 8008820:	f7ff f9a8 	bl	8007b74 <__pow5mult>
 8008824:	4680      	mov	r8, r0
 8008826:	2800      	cmp	r0, #0
 8008828:	d0b7      	beq.n	800879a <_strtod_l+0x68a>
 800882a:	4601      	mov	r1, r0
 800882c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800882e:	9805      	ldr	r0, [sp, #20]
 8008830:	f7ff f8f8 	bl	8007a24 <__multiply>
 8008834:	900e      	str	r0, [sp, #56]	@ 0x38
 8008836:	2800      	cmp	r0, #0
 8008838:	f43f ae85 	beq.w	8008546 <_strtod_l+0x436>
 800883c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800883e:	9805      	ldr	r0, [sp, #20]
 8008840:	f7fe ffdc 	bl	80077fc <_Bfree>
 8008844:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008846:	931a      	str	r3, [sp, #104]	@ 0x68
 8008848:	2d00      	cmp	r5, #0
 800884a:	dc1d      	bgt.n	8008888 <_strtod_l+0x778>
 800884c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800884e:	2b00      	cmp	r3, #0
 8008850:	dd23      	ble.n	800889a <_strtod_l+0x78a>
 8008852:	4649      	mov	r1, r9
 8008854:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008856:	9805      	ldr	r0, [sp, #20]
 8008858:	f7ff f98c 	bl	8007b74 <__pow5mult>
 800885c:	4681      	mov	r9, r0
 800885e:	b9e0      	cbnz	r0, 800889a <_strtod_l+0x78a>
 8008860:	f04f 0900 	mov.w	r9, #0
 8008864:	e66f      	b.n	8008546 <_strtod_l+0x436>
 8008866:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800886a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800886e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008872:	35e2      	adds	r5, #226	@ 0xe2
 8008874:	fa01 f305 	lsl.w	r3, r1, r5
 8008878:	9310      	str	r3, [sp, #64]	@ 0x40
 800887a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800887c:	e7ba      	b.n	80087f4 <_strtod_l+0x6e4>
 800887e:	2300      	movs	r3, #0
 8008880:	9310      	str	r3, [sp, #64]	@ 0x40
 8008882:	2301      	movs	r3, #1
 8008884:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008886:	e7b5      	b.n	80087f4 <_strtod_l+0x6e4>
 8008888:	462a      	mov	r2, r5
 800888a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800888c:	9805      	ldr	r0, [sp, #20]
 800888e:	f7ff f9cb 	bl	8007c28 <__lshift>
 8008892:	901a      	str	r0, [sp, #104]	@ 0x68
 8008894:	2800      	cmp	r0, #0
 8008896:	d1d9      	bne.n	800884c <_strtod_l+0x73c>
 8008898:	e655      	b.n	8008546 <_strtod_l+0x436>
 800889a:	2e00      	cmp	r6, #0
 800889c:	dd07      	ble.n	80088ae <_strtod_l+0x79e>
 800889e:	4649      	mov	r1, r9
 80088a0:	4632      	mov	r2, r6
 80088a2:	9805      	ldr	r0, [sp, #20]
 80088a4:	f7ff f9c0 	bl	8007c28 <__lshift>
 80088a8:	4681      	mov	r9, r0
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d0d8      	beq.n	8008860 <_strtod_l+0x750>
 80088ae:	2f00      	cmp	r7, #0
 80088b0:	dd08      	ble.n	80088c4 <_strtod_l+0x7b4>
 80088b2:	4641      	mov	r1, r8
 80088b4:	463a      	mov	r2, r7
 80088b6:	9805      	ldr	r0, [sp, #20]
 80088b8:	f7ff f9b6 	bl	8007c28 <__lshift>
 80088bc:	4680      	mov	r8, r0
 80088be:	2800      	cmp	r0, #0
 80088c0:	f43f ae41 	beq.w	8008546 <_strtod_l+0x436>
 80088c4:	464a      	mov	r2, r9
 80088c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088c8:	9805      	ldr	r0, [sp, #20]
 80088ca:	f7ff fa35 	bl	8007d38 <__mdiff>
 80088ce:	4604      	mov	r4, r0
 80088d0:	2800      	cmp	r0, #0
 80088d2:	f43f ae38 	beq.w	8008546 <_strtod_l+0x436>
 80088d6:	68c3      	ldr	r3, [r0, #12]
 80088d8:	4641      	mov	r1, r8
 80088da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088dc:	2300      	movs	r3, #0
 80088de:	60c3      	str	r3, [r0, #12]
 80088e0:	f7ff fa0e 	bl	8007d00 <__mcmp>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	da45      	bge.n	8008974 <_strtod_l+0x864>
 80088e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088ea:	ea53 030a 	orrs.w	r3, r3, sl
 80088ee:	d16b      	bne.n	80089c8 <_strtod_l+0x8b8>
 80088f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d167      	bne.n	80089c8 <_strtod_l+0x8b8>
 80088f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80088fc:	0d1b      	lsrs	r3, r3, #20
 80088fe:	051b      	lsls	r3, r3, #20
 8008900:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008904:	d960      	bls.n	80089c8 <_strtod_l+0x8b8>
 8008906:	6963      	ldr	r3, [r4, #20]
 8008908:	b913      	cbnz	r3, 8008910 <_strtod_l+0x800>
 800890a:	6923      	ldr	r3, [r4, #16]
 800890c:	2b01      	cmp	r3, #1
 800890e:	dd5b      	ble.n	80089c8 <_strtod_l+0x8b8>
 8008910:	4621      	mov	r1, r4
 8008912:	2201      	movs	r2, #1
 8008914:	9805      	ldr	r0, [sp, #20]
 8008916:	f7ff f987 	bl	8007c28 <__lshift>
 800891a:	4641      	mov	r1, r8
 800891c:	4604      	mov	r4, r0
 800891e:	f7ff f9ef 	bl	8007d00 <__mcmp>
 8008922:	2800      	cmp	r0, #0
 8008924:	dd50      	ble.n	80089c8 <_strtod_l+0x8b8>
 8008926:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800892a:	9a08      	ldr	r2, [sp, #32]
 800892c:	0d1b      	lsrs	r3, r3, #20
 800892e:	051b      	lsls	r3, r3, #20
 8008930:	2a00      	cmp	r2, #0
 8008932:	d06a      	beq.n	8008a0a <_strtod_l+0x8fa>
 8008934:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008938:	d867      	bhi.n	8008a0a <_strtod_l+0x8fa>
 800893a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800893e:	f67f ae98 	bls.w	8008672 <_strtod_l+0x562>
 8008942:	4650      	mov	r0, sl
 8008944:	4659      	mov	r1, fp
 8008946:	4b09      	ldr	r3, [pc, #36]	@ (800896c <_strtod_l+0x85c>)
 8008948:	2200      	movs	r2, #0
 800894a:	f7f7 fdc5 	bl	80004d8 <__aeabi_dmul>
 800894e:	4b08      	ldr	r3, [pc, #32]	@ (8008970 <_strtod_l+0x860>)
 8008950:	4682      	mov	sl, r0
 8008952:	400b      	ands	r3, r1
 8008954:	468b      	mov	fp, r1
 8008956:	2b00      	cmp	r3, #0
 8008958:	f47f ae00 	bne.w	800855c <_strtod_l+0x44c>
 800895c:	2322      	movs	r3, #34	@ 0x22
 800895e:	9a05      	ldr	r2, [sp, #20]
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	e5fb      	b.n	800855c <_strtod_l+0x44c>
 8008964:	0800a210 	.word	0x0800a210
 8008968:	fffffc02 	.word	0xfffffc02
 800896c:	39500000 	.word	0x39500000
 8008970:	7ff00000 	.word	0x7ff00000
 8008974:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008978:	d165      	bne.n	8008a46 <_strtod_l+0x936>
 800897a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800897c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008980:	b35a      	cbz	r2, 80089da <_strtod_l+0x8ca>
 8008982:	4a99      	ldr	r2, [pc, #612]	@ (8008be8 <_strtod_l+0xad8>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d12b      	bne.n	80089e0 <_strtod_l+0x8d0>
 8008988:	9b08      	ldr	r3, [sp, #32]
 800898a:	4651      	mov	r1, sl
 800898c:	b303      	cbz	r3, 80089d0 <_strtod_l+0x8c0>
 800898e:	465a      	mov	r2, fp
 8008990:	4b96      	ldr	r3, [pc, #600]	@ (8008bec <_strtod_l+0xadc>)
 8008992:	4013      	ands	r3, r2
 8008994:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008998:	f04f 32ff 	mov.w	r2, #4294967295
 800899c:	d81b      	bhi.n	80089d6 <_strtod_l+0x8c6>
 800899e:	0d1b      	lsrs	r3, r3, #20
 80089a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80089a4:	fa02 f303 	lsl.w	r3, r2, r3
 80089a8:	4299      	cmp	r1, r3
 80089aa:	d119      	bne.n	80089e0 <_strtod_l+0x8d0>
 80089ac:	4b90      	ldr	r3, [pc, #576]	@ (8008bf0 <_strtod_l+0xae0>)
 80089ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d102      	bne.n	80089ba <_strtod_l+0x8aa>
 80089b4:	3101      	adds	r1, #1
 80089b6:	f43f adc6 	beq.w	8008546 <_strtod_l+0x436>
 80089ba:	f04f 0a00 	mov.w	sl, #0
 80089be:	4b8b      	ldr	r3, [pc, #556]	@ (8008bec <_strtod_l+0xadc>)
 80089c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089c2:	401a      	ands	r2, r3
 80089c4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80089c8:	9b08      	ldr	r3, [sp, #32]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1b9      	bne.n	8008942 <_strtod_l+0x832>
 80089ce:	e5c5      	b.n	800855c <_strtod_l+0x44c>
 80089d0:	f04f 33ff 	mov.w	r3, #4294967295
 80089d4:	e7e8      	b.n	80089a8 <_strtod_l+0x898>
 80089d6:	4613      	mov	r3, r2
 80089d8:	e7e6      	b.n	80089a8 <_strtod_l+0x898>
 80089da:	ea53 030a 	orrs.w	r3, r3, sl
 80089de:	d0a2      	beq.n	8008926 <_strtod_l+0x816>
 80089e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089e2:	b1db      	cbz	r3, 8008a1c <_strtod_l+0x90c>
 80089e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089e6:	4213      	tst	r3, r2
 80089e8:	d0ee      	beq.n	80089c8 <_strtod_l+0x8b8>
 80089ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089ec:	4650      	mov	r0, sl
 80089ee:	4659      	mov	r1, fp
 80089f0:	9a08      	ldr	r2, [sp, #32]
 80089f2:	b1bb      	cbz	r3, 8008a24 <_strtod_l+0x914>
 80089f4:	f7ff fb68 	bl	80080c8 <sulp>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a00:	f7f7 fbb4 	bl	800016c <__adddf3>
 8008a04:	4682      	mov	sl, r0
 8008a06:	468b      	mov	fp, r1
 8008a08:	e7de      	b.n	80089c8 <_strtod_l+0x8b8>
 8008a0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008a0e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a12:	f04f 3aff 	mov.w	sl, #4294967295
 8008a16:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a1a:	e7d5      	b.n	80089c8 <_strtod_l+0x8b8>
 8008a1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a1e:	ea13 0f0a 	tst.w	r3, sl
 8008a22:	e7e1      	b.n	80089e8 <_strtod_l+0x8d8>
 8008a24:	f7ff fb50 	bl	80080c8 <sulp>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a30:	f7f7 fb9a 	bl	8000168 <__aeabi_dsub>
 8008a34:	2200      	movs	r2, #0
 8008a36:	2300      	movs	r3, #0
 8008a38:	4682      	mov	sl, r0
 8008a3a:	468b      	mov	fp, r1
 8008a3c:	f7f7 ffb4 	bl	80009a8 <__aeabi_dcmpeq>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d0c1      	beq.n	80089c8 <_strtod_l+0x8b8>
 8008a44:	e615      	b.n	8008672 <_strtod_l+0x562>
 8008a46:	4641      	mov	r1, r8
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f7ff fac9 	bl	8007fe0 <__ratio>
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008a54:	4606      	mov	r6, r0
 8008a56:	460f      	mov	r7, r1
 8008a58:	f7f7 ffba 	bl	80009d0 <__aeabi_dcmple>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d06d      	beq.n	8008b3c <_strtod_l+0xa2c>
 8008a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d178      	bne.n	8008b58 <_strtod_l+0xa48>
 8008a66:	f1ba 0f00 	cmp.w	sl, #0
 8008a6a:	d156      	bne.n	8008b1a <_strtod_l+0xa0a>
 8008a6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d158      	bne.n	8008b28 <_strtod_l+0xa18>
 8008a76:	2200      	movs	r2, #0
 8008a78:	4630      	mov	r0, r6
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	4b5d      	ldr	r3, [pc, #372]	@ (8008bf4 <_strtod_l+0xae4>)
 8008a7e:	f7f7 ff9d 	bl	80009bc <__aeabi_dcmplt>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d157      	bne.n	8008b36 <_strtod_l+0xa26>
 8008a86:	4630      	mov	r0, r6
 8008a88:	4639      	mov	r1, r7
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	4b5a      	ldr	r3, [pc, #360]	@ (8008bf8 <_strtod_l+0xae8>)
 8008a8e:	f7f7 fd23 	bl	80004d8 <__aeabi_dmul>
 8008a92:	4606      	mov	r6, r0
 8008a94:	460f      	mov	r7, r1
 8008a96:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008a9a:	9606      	str	r6, [sp, #24]
 8008a9c:	9307      	str	r3, [sp, #28]
 8008a9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008aa2:	4d52      	ldr	r5, [pc, #328]	@ (8008bec <_strtod_l+0xadc>)
 8008aa4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008aa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008aaa:	401d      	ands	r5, r3
 8008aac:	4b53      	ldr	r3, [pc, #332]	@ (8008bfc <_strtod_l+0xaec>)
 8008aae:	429d      	cmp	r5, r3
 8008ab0:	f040 80aa 	bne.w	8008c08 <_strtod_l+0xaf8>
 8008ab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ab6:	4650      	mov	r0, sl
 8008ab8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008abc:	4659      	mov	r1, fp
 8008abe:	f7ff f9cf 	bl	8007e60 <__ulp>
 8008ac2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ac6:	f7f7 fd07 	bl	80004d8 <__aeabi_dmul>
 8008aca:	4652      	mov	r2, sl
 8008acc:	465b      	mov	r3, fp
 8008ace:	f7f7 fb4d 	bl	800016c <__adddf3>
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4945      	ldr	r1, [pc, #276]	@ (8008bec <_strtod_l+0xadc>)
 8008ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8008c00 <_strtod_l+0xaf0>)
 8008ad8:	4019      	ands	r1, r3
 8008ada:	4291      	cmp	r1, r2
 8008adc:	4682      	mov	sl, r0
 8008ade:	d942      	bls.n	8008b66 <_strtod_l+0xa56>
 8008ae0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ae2:	4b43      	ldr	r3, [pc, #268]	@ (8008bf0 <_strtod_l+0xae0>)
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d103      	bne.n	8008af0 <_strtod_l+0x9e0>
 8008ae8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008aea:	3301      	adds	r3, #1
 8008aec:	f43f ad2b 	beq.w	8008546 <_strtod_l+0x436>
 8008af0:	f04f 3aff 	mov.w	sl, #4294967295
 8008af4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008bf0 <_strtod_l+0xae0>
 8008af8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008afa:	9805      	ldr	r0, [sp, #20]
 8008afc:	f7fe fe7e 	bl	80077fc <_Bfree>
 8008b00:	4649      	mov	r1, r9
 8008b02:	9805      	ldr	r0, [sp, #20]
 8008b04:	f7fe fe7a 	bl	80077fc <_Bfree>
 8008b08:	4641      	mov	r1, r8
 8008b0a:	9805      	ldr	r0, [sp, #20]
 8008b0c:	f7fe fe76 	bl	80077fc <_Bfree>
 8008b10:	4621      	mov	r1, r4
 8008b12:	9805      	ldr	r0, [sp, #20]
 8008b14:	f7fe fe72 	bl	80077fc <_Bfree>
 8008b18:	e618      	b.n	800874c <_strtod_l+0x63c>
 8008b1a:	f1ba 0f01 	cmp.w	sl, #1
 8008b1e:	d103      	bne.n	8008b28 <_strtod_l+0xa18>
 8008b20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f43f ada5 	beq.w	8008672 <_strtod_l+0x562>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4b36      	ldr	r3, [pc, #216]	@ (8008c04 <_strtod_l+0xaf4>)
 8008b2c:	2600      	movs	r6, #0
 8008b2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b32:	4f30      	ldr	r7, [pc, #192]	@ (8008bf4 <_strtod_l+0xae4>)
 8008b34:	e7b3      	b.n	8008a9e <_strtod_l+0x98e>
 8008b36:	2600      	movs	r6, #0
 8008b38:	4f2f      	ldr	r7, [pc, #188]	@ (8008bf8 <_strtod_l+0xae8>)
 8008b3a:	e7ac      	b.n	8008a96 <_strtod_l+0x986>
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	4639      	mov	r1, r7
 8008b40:	4b2d      	ldr	r3, [pc, #180]	@ (8008bf8 <_strtod_l+0xae8>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	f7f7 fcc8 	bl	80004d8 <__aeabi_dmul>
 8008b48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	460f      	mov	r7, r1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0a1      	beq.n	8008a96 <_strtod_l+0x986>
 8008b52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008b56:	e7a2      	b.n	8008a9e <_strtod_l+0x98e>
 8008b58:	2200      	movs	r2, #0
 8008b5a:	4b26      	ldr	r3, [pc, #152]	@ (8008bf4 <_strtod_l+0xae4>)
 8008b5c:	4616      	mov	r6, r2
 8008b5e:	461f      	mov	r7, r3
 8008b60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b64:	e79b      	b.n	8008a9e <_strtod_l+0x98e>
 8008b66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008b6a:	9b08      	ldr	r3, [sp, #32]
 8008b6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1c1      	bne.n	8008af8 <_strtod_l+0x9e8>
 8008b74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b78:	0d1b      	lsrs	r3, r3, #20
 8008b7a:	051b      	lsls	r3, r3, #20
 8008b7c:	429d      	cmp	r5, r3
 8008b7e:	d1bb      	bne.n	8008af8 <_strtod_l+0x9e8>
 8008b80:	4630      	mov	r0, r6
 8008b82:	4639      	mov	r1, r7
 8008b84:	f7f8 fa4e 	bl	8001024 <__aeabi_d2lz>
 8008b88:	f7f7 fc78 	bl	800047c <__aeabi_l2d>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4630      	mov	r0, r6
 8008b92:	4639      	mov	r1, r7
 8008b94:	f7f7 fae8 	bl	8000168 <__aeabi_dsub>
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008ba0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ba6:	ea46 060a 	orr.w	r6, r6, sl
 8008baa:	431e      	orrs	r6, r3
 8008bac:	d069      	beq.n	8008c82 <_strtod_l+0xb72>
 8008bae:	a30a      	add	r3, pc, #40	@ (adr r3, 8008bd8 <_strtod_l+0xac8>)
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f7f7 ff02 	bl	80009bc <__aeabi_dcmplt>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	f47f accf 	bne.w	800855c <_strtod_l+0x44c>
 8008bbe:	a308      	add	r3, pc, #32	@ (adr r3, 8008be0 <_strtod_l+0xad0>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bc8:	f7f7 ff16 	bl	80009f8 <__aeabi_dcmpgt>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d093      	beq.n	8008af8 <_strtod_l+0x9e8>
 8008bd0:	e4c4      	b.n	800855c <_strtod_l+0x44c>
 8008bd2:	bf00      	nop
 8008bd4:	f3af 8000 	nop.w
 8008bd8:	94a03595 	.word	0x94a03595
 8008bdc:	3fdfffff 	.word	0x3fdfffff
 8008be0:	35afe535 	.word	0x35afe535
 8008be4:	3fe00000 	.word	0x3fe00000
 8008be8:	000fffff 	.word	0x000fffff
 8008bec:	7ff00000 	.word	0x7ff00000
 8008bf0:	7fefffff 	.word	0x7fefffff
 8008bf4:	3ff00000 	.word	0x3ff00000
 8008bf8:	3fe00000 	.word	0x3fe00000
 8008bfc:	7fe00000 	.word	0x7fe00000
 8008c00:	7c9fffff 	.word	0x7c9fffff
 8008c04:	bff00000 	.word	0xbff00000
 8008c08:	9b08      	ldr	r3, [sp, #32]
 8008c0a:	b323      	cbz	r3, 8008c56 <_strtod_l+0xb46>
 8008c0c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008c10:	d821      	bhi.n	8008c56 <_strtod_l+0xb46>
 8008c12:	a327      	add	r3, pc, #156	@ (adr r3, 8008cb0 <_strtod_l+0xba0>)
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	4630      	mov	r0, r6
 8008c1a:	4639      	mov	r1, r7
 8008c1c:	f7f7 fed8 	bl	80009d0 <__aeabi_dcmple>
 8008c20:	b1a0      	cbz	r0, 8008c4c <_strtod_l+0xb3c>
 8008c22:	4639      	mov	r1, r7
 8008c24:	4630      	mov	r0, r6
 8008c26:	f7f7 ff2f 	bl	8000a88 <__aeabi_d2uiz>
 8008c2a:	2801      	cmp	r0, #1
 8008c2c:	bf38      	it	cc
 8008c2e:	2001      	movcc	r0, #1
 8008c30:	f7f7 fbd8 	bl	80003e4 <__aeabi_ui2d>
 8008c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c36:	4606      	mov	r6, r0
 8008c38:	460f      	mov	r7, r1
 8008c3a:	b9fb      	cbnz	r3, 8008c7c <_strtod_l+0xb6c>
 8008c3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c40:	9014      	str	r0, [sp, #80]	@ 0x50
 8008c42:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008c48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c4c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c4e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008c52:	1b5b      	subs	r3, r3, r5
 8008c54:	9311      	str	r3, [sp, #68]	@ 0x44
 8008c56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c5a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008c5e:	f7ff f8ff 	bl	8007e60 <__ulp>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4650      	mov	r0, sl
 8008c68:	4659      	mov	r1, fp
 8008c6a:	f7f7 fc35 	bl	80004d8 <__aeabi_dmul>
 8008c6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008c72:	f7f7 fa7b 	bl	800016c <__adddf3>
 8008c76:	4682      	mov	sl, r0
 8008c78:	468b      	mov	fp, r1
 8008c7a:	e776      	b.n	8008b6a <_strtod_l+0xa5a>
 8008c7c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008c80:	e7e0      	b.n	8008c44 <_strtod_l+0xb34>
 8008c82:	a30d      	add	r3, pc, #52	@ (adr r3, 8008cb8 <_strtod_l+0xba8>)
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f7f7 fe98 	bl	80009bc <__aeabi_dcmplt>
 8008c8c:	e79e      	b.n	8008bcc <_strtod_l+0xabc>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c94:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	f7ff ba77 	b.w	800818a <_strtod_l+0x7a>
 8008c9c:	2a65      	cmp	r2, #101	@ 0x65
 8008c9e:	f43f ab6e 	beq.w	800837e <_strtod_l+0x26e>
 8008ca2:	2a45      	cmp	r2, #69	@ 0x45
 8008ca4:	f43f ab6b 	beq.w	800837e <_strtod_l+0x26e>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f7ff bba6 	b.w	80083fa <_strtod_l+0x2ea>
 8008cae:	bf00      	nop
 8008cb0:	ffc00000 	.word	0xffc00000
 8008cb4:	41dfffff 	.word	0x41dfffff
 8008cb8:	94a03595 	.word	0x94a03595
 8008cbc:	3fcfffff 	.word	0x3fcfffff

08008cc0 <_strtod_r>:
 8008cc0:	4b01      	ldr	r3, [pc, #4]	@ (8008cc8 <_strtod_r+0x8>)
 8008cc2:	f7ff ba25 	b.w	8008110 <_strtod_l>
 8008cc6:	bf00      	nop
 8008cc8:	2000006c 	.word	0x2000006c

08008ccc <_strtol_l.constprop.0>:
 8008ccc:	2b24      	cmp	r3, #36	@ 0x24
 8008cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd2:	4686      	mov	lr, r0
 8008cd4:	4690      	mov	r8, r2
 8008cd6:	d801      	bhi.n	8008cdc <_strtol_l.constprop.0+0x10>
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d106      	bne.n	8008cea <_strtol_l.constprop.0+0x1e>
 8008cdc:	f7fd fdc0 	bl	8006860 <__errno>
 8008ce0:	2316      	movs	r3, #22
 8008ce2:	6003      	str	r3, [r0, #0]
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cea:	460d      	mov	r5, r1
 8008cec:	4833      	ldr	r0, [pc, #204]	@ (8008dbc <_strtol_l.constprop.0+0xf0>)
 8008cee:	462a      	mov	r2, r5
 8008cf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cf4:	5d06      	ldrb	r6, [r0, r4]
 8008cf6:	f016 0608 	ands.w	r6, r6, #8
 8008cfa:	d1f8      	bne.n	8008cee <_strtol_l.constprop.0+0x22>
 8008cfc:	2c2d      	cmp	r4, #45	@ 0x2d
 8008cfe:	d12d      	bne.n	8008d5c <_strtol_l.constprop.0+0x90>
 8008d00:	2601      	movs	r6, #1
 8008d02:	782c      	ldrb	r4, [r5, #0]
 8008d04:	1c95      	adds	r5, r2, #2
 8008d06:	f033 0210 	bics.w	r2, r3, #16
 8008d0a:	d109      	bne.n	8008d20 <_strtol_l.constprop.0+0x54>
 8008d0c:	2c30      	cmp	r4, #48	@ 0x30
 8008d0e:	d12a      	bne.n	8008d66 <_strtol_l.constprop.0+0x9a>
 8008d10:	782a      	ldrb	r2, [r5, #0]
 8008d12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d16:	2a58      	cmp	r2, #88	@ 0x58
 8008d18:	d125      	bne.n	8008d66 <_strtol_l.constprop.0+0x9a>
 8008d1a:	2310      	movs	r3, #16
 8008d1c:	786c      	ldrb	r4, [r5, #1]
 8008d1e:	3502      	adds	r5, #2
 8008d20:	2200      	movs	r2, #0
 8008d22:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008d26:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008d2a:	fbbc f9f3 	udiv	r9, ip, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008d38:	2f09      	cmp	r7, #9
 8008d3a:	d81b      	bhi.n	8008d74 <_strtol_l.constprop.0+0xa8>
 8008d3c:	463c      	mov	r4, r7
 8008d3e:	42a3      	cmp	r3, r4
 8008d40:	dd27      	ble.n	8008d92 <_strtol_l.constprop.0+0xc6>
 8008d42:	1c57      	adds	r7, r2, #1
 8008d44:	d007      	beq.n	8008d56 <_strtol_l.constprop.0+0x8a>
 8008d46:	4581      	cmp	r9, r0
 8008d48:	d320      	bcc.n	8008d8c <_strtol_l.constprop.0+0xc0>
 8008d4a:	d101      	bne.n	8008d50 <_strtol_l.constprop.0+0x84>
 8008d4c:	45a2      	cmp	sl, r4
 8008d4e:	db1d      	blt.n	8008d8c <_strtol_l.constprop.0+0xc0>
 8008d50:	2201      	movs	r2, #1
 8008d52:	fb00 4003 	mla	r0, r0, r3, r4
 8008d56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d5a:	e7eb      	b.n	8008d34 <_strtol_l.constprop.0+0x68>
 8008d5c:	2c2b      	cmp	r4, #43	@ 0x2b
 8008d5e:	bf04      	itt	eq
 8008d60:	782c      	ldrbeq	r4, [r5, #0]
 8008d62:	1c95      	addeq	r5, r2, #2
 8008d64:	e7cf      	b.n	8008d06 <_strtol_l.constprop.0+0x3a>
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1da      	bne.n	8008d20 <_strtol_l.constprop.0+0x54>
 8008d6a:	2c30      	cmp	r4, #48	@ 0x30
 8008d6c:	bf0c      	ite	eq
 8008d6e:	2308      	moveq	r3, #8
 8008d70:	230a      	movne	r3, #10
 8008d72:	e7d5      	b.n	8008d20 <_strtol_l.constprop.0+0x54>
 8008d74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008d78:	2f19      	cmp	r7, #25
 8008d7a:	d801      	bhi.n	8008d80 <_strtol_l.constprop.0+0xb4>
 8008d7c:	3c37      	subs	r4, #55	@ 0x37
 8008d7e:	e7de      	b.n	8008d3e <_strtol_l.constprop.0+0x72>
 8008d80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008d84:	2f19      	cmp	r7, #25
 8008d86:	d804      	bhi.n	8008d92 <_strtol_l.constprop.0+0xc6>
 8008d88:	3c57      	subs	r4, #87	@ 0x57
 8008d8a:	e7d8      	b.n	8008d3e <_strtol_l.constprop.0+0x72>
 8008d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d90:	e7e1      	b.n	8008d56 <_strtol_l.constprop.0+0x8a>
 8008d92:	1c53      	adds	r3, r2, #1
 8008d94:	d108      	bne.n	8008da8 <_strtol_l.constprop.0+0xdc>
 8008d96:	2322      	movs	r3, #34	@ 0x22
 8008d98:	4660      	mov	r0, ip
 8008d9a:	f8ce 3000 	str.w	r3, [lr]
 8008d9e:	f1b8 0f00 	cmp.w	r8, #0
 8008da2:	d0a0      	beq.n	8008ce6 <_strtol_l.constprop.0+0x1a>
 8008da4:	1e69      	subs	r1, r5, #1
 8008da6:	e006      	b.n	8008db6 <_strtol_l.constprop.0+0xea>
 8008da8:	b106      	cbz	r6, 8008dac <_strtol_l.constprop.0+0xe0>
 8008daa:	4240      	negs	r0, r0
 8008dac:	f1b8 0f00 	cmp.w	r8, #0
 8008db0:	d099      	beq.n	8008ce6 <_strtol_l.constprop.0+0x1a>
 8008db2:	2a00      	cmp	r2, #0
 8008db4:	d1f6      	bne.n	8008da4 <_strtol_l.constprop.0+0xd8>
 8008db6:	f8c8 1000 	str.w	r1, [r8]
 8008dba:	e794      	b.n	8008ce6 <_strtol_l.constprop.0+0x1a>
 8008dbc:	0800a239 	.word	0x0800a239

08008dc0 <_strtol_r>:
 8008dc0:	f7ff bf84 	b.w	8008ccc <_strtol_l.constprop.0>

08008dc4 <__ssputs_r>:
 8008dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc8:	461f      	mov	r7, r3
 8008dca:	688e      	ldr	r6, [r1, #8]
 8008dcc:	4682      	mov	sl, r0
 8008dce:	42be      	cmp	r6, r7
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	4690      	mov	r8, r2
 8008dd4:	680b      	ldr	r3, [r1, #0]
 8008dd6:	d82d      	bhi.n	8008e34 <__ssputs_r+0x70>
 8008dd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ddc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008de0:	d026      	beq.n	8008e30 <__ssputs_r+0x6c>
 8008de2:	6965      	ldr	r5, [r4, #20]
 8008de4:	6909      	ldr	r1, [r1, #16]
 8008de6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dea:	eba3 0901 	sub.w	r9, r3, r1
 8008dee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008df2:	1c7b      	adds	r3, r7, #1
 8008df4:	444b      	add	r3, r9
 8008df6:	106d      	asrs	r5, r5, #1
 8008df8:	429d      	cmp	r5, r3
 8008dfa:	bf38      	it	cc
 8008dfc:	461d      	movcc	r5, r3
 8008dfe:	0553      	lsls	r3, r2, #21
 8008e00:	d527      	bpl.n	8008e52 <__ssputs_r+0x8e>
 8008e02:	4629      	mov	r1, r5
 8008e04:	f7fe fc2e 	bl	8007664 <_malloc_r>
 8008e08:	4606      	mov	r6, r0
 8008e0a:	b360      	cbz	r0, 8008e66 <__ssputs_r+0xa2>
 8008e0c:	464a      	mov	r2, r9
 8008e0e:	6921      	ldr	r1, [r4, #16]
 8008e10:	f000 fa14 	bl	800923c <memcpy>
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e1e:	81a3      	strh	r3, [r4, #12]
 8008e20:	6126      	str	r6, [r4, #16]
 8008e22:	444e      	add	r6, r9
 8008e24:	6026      	str	r6, [r4, #0]
 8008e26:	463e      	mov	r6, r7
 8008e28:	6165      	str	r5, [r4, #20]
 8008e2a:	eba5 0509 	sub.w	r5, r5, r9
 8008e2e:	60a5      	str	r5, [r4, #8]
 8008e30:	42be      	cmp	r6, r7
 8008e32:	d900      	bls.n	8008e36 <__ssputs_r+0x72>
 8008e34:	463e      	mov	r6, r7
 8008e36:	4632      	mov	r2, r6
 8008e38:	4641      	mov	r1, r8
 8008e3a:	6820      	ldr	r0, [r4, #0]
 8008e3c:	f000 f9c2 	bl	80091c4 <memmove>
 8008e40:	2000      	movs	r0, #0
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	1b9b      	subs	r3, r3, r6
 8008e46:	60a3      	str	r3, [r4, #8]
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	4433      	add	r3, r6
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e52:	462a      	mov	r2, r5
 8008e54:	f000 fd83 	bl	800995e <_realloc_r>
 8008e58:	4606      	mov	r6, r0
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d1e0      	bne.n	8008e20 <__ssputs_r+0x5c>
 8008e5e:	4650      	mov	r0, sl
 8008e60:	6921      	ldr	r1, [r4, #16]
 8008e62:	f7fe fb8d 	bl	8007580 <_free_r>
 8008e66:	230c      	movs	r3, #12
 8008e68:	f8ca 3000 	str.w	r3, [sl]
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e76:	81a3      	strh	r3, [r4, #12]
 8008e78:	e7e9      	b.n	8008e4e <__ssputs_r+0x8a>
	...

08008e7c <_svfiprintf_r>:
 8008e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e80:	4698      	mov	r8, r3
 8008e82:	898b      	ldrh	r3, [r1, #12]
 8008e84:	4607      	mov	r7, r0
 8008e86:	061b      	lsls	r3, r3, #24
 8008e88:	460d      	mov	r5, r1
 8008e8a:	4614      	mov	r4, r2
 8008e8c:	b09d      	sub	sp, #116	@ 0x74
 8008e8e:	d510      	bpl.n	8008eb2 <_svfiprintf_r+0x36>
 8008e90:	690b      	ldr	r3, [r1, #16]
 8008e92:	b973      	cbnz	r3, 8008eb2 <_svfiprintf_r+0x36>
 8008e94:	2140      	movs	r1, #64	@ 0x40
 8008e96:	f7fe fbe5 	bl	8007664 <_malloc_r>
 8008e9a:	6028      	str	r0, [r5, #0]
 8008e9c:	6128      	str	r0, [r5, #16]
 8008e9e:	b930      	cbnz	r0, 8008eae <_svfiprintf_r+0x32>
 8008ea0:	230c      	movs	r3, #12
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea8:	b01d      	add	sp, #116	@ 0x74
 8008eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eae:	2340      	movs	r3, #64	@ 0x40
 8008eb0:	616b      	str	r3, [r5, #20]
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eb6:	2320      	movs	r3, #32
 8008eb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ebc:	2330      	movs	r3, #48	@ 0x30
 8008ebe:	f04f 0901 	mov.w	r9, #1
 8008ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ec6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009060 <_svfiprintf_r+0x1e4>
 8008eca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ece:	4623      	mov	r3, r4
 8008ed0:	469a      	mov	sl, r3
 8008ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ed6:	b10a      	cbz	r2, 8008edc <_svfiprintf_r+0x60>
 8008ed8:	2a25      	cmp	r2, #37	@ 0x25
 8008eda:	d1f9      	bne.n	8008ed0 <_svfiprintf_r+0x54>
 8008edc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ee0:	d00b      	beq.n	8008efa <_svfiprintf_r+0x7e>
 8008ee2:	465b      	mov	r3, fp
 8008ee4:	4622      	mov	r2, r4
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	4638      	mov	r0, r7
 8008eea:	f7ff ff6b 	bl	8008dc4 <__ssputs_r>
 8008eee:	3001      	adds	r0, #1
 8008ef0:	f000 80a7 	beq.w	8009042 <_svfiprintf_r+0x1c6>
 8008ef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ef6:	445a      	add	r2, fp
 8008ef8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008efa:	f89a 3000 	ldrb.w	r3, [sl]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f000 809f 	beq.w	8009042 <_svfiprintf_r+0x1c6>
 8008f04:	2300      	movs	r3, #0
 8008f06:	f04f 32ff 	mov.w	r2, #4294967295
 8008f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f0e:	f10a 0a01 	add.w	sl, sl, #1
 8008f12:	9304      	str	r3, [sp, #16]
 8008f14:	9307      	str	r3, [sp, #28]
 8008f16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f1c:	4654      	mov	r4, sl
 8008f1e:	2205      	movs	r2, #5
 8008f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f24:	484e      	ldr	r0, [pc, #312]	@ (8009060 <_svfiprintf_r+0x1e4>)
 8008f26:	f7fd fcc8 	bl	80068ba <memchr>
 8008f2a:	9a04      	ldr	r2, [sp, #16]
 8008f2c:	b9d8      	cbnz	r0, 8008f66 <_svfiprintf_r+0xea>
 8008f2e:	06d0      	lsls	r0, r2, #27
 8008f30:	bf44      	itt	mi
 8008f32:	2320      	movmi	r3, #32
 8008f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f38:	0711      	lsls	r1, r2, #28
 8008f3a:	bf44      	itt	mi
 8008f3c:	232b      	movmi	r3, #43	@ 0x2b
 8008f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f42:	f89a 3000 	ldrb.w	r3, [sl]
 8008f46:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f48:	d015      	beq.n	8008f76 <_svfiprintf_r+0xfa>
 8008f4a:	4654      	mov	r4, sl
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	f04f 0c0a 	mov.w	ip, #10
 8008f52:	9a07      	ldr	r2, [sp, #28]
 8008f54:	4621      	mov	r1, r4
 8008f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f5a:	3b30      	subs	r3, #48	@ 0x30
 8008f5c:	2b09      	cmp	r3, #9
 8008f5e:	d94b      	bls.n	8008ff8 <_svfiprintf_r+0x17c>
 8008f60:	b1b0      	cbz	r0, 8008f90 <_svfiprintf_r+0x114>
 8008f62:	9207      	str	r2, [sp, #28]
 8008f64:	e014      	b.n	8008f90 <_svfiprintf_r+0x114>
 8008f66:	eba0 0308 	sub.w	r3, r0, r8
 8008f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	46a2      	mov	sl, r4
 8008f72:	9304      	str	r3, [sp, #16]
 8008f74:	e7d2      	b.n	8008f1c <_svfiprintf_r+0xa0>
 8008f76:	9b03      	ldr	r3, [sp, #12]
 8008f78:	1d19      	adds	r1, r3, #4
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	9103      	str	r1, [sp, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	bfbb      	ittet	lt
 8008f82:	425b      	neglt	r3, r3
 8008f84:	f042 0202 	orrlt.w	r2, r2, #2
 8008f88:	9307      	strge	r3, [sp, #28]
 8008f8a:	9307      	strlt	r3, [sp, #28]
 8008f8c:	bfb8      	it	lt
 8008f8e:	9204      	strlt	r2, [sp, #16]
 8008f90:	7823      	ldrb	r3, [r4, #0]
 8008f92:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f94:	d10a      	bne.n	8008fac <_svfiprintf_r+0x130>
 8008f96:	7863      	ldrb	r3, [r4, #1]
 8008f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f9a:	d132      	bne.n	8009002 <_svfiprintf_r+0x186>
 8008f9c:	9b03      	ldr	r3, [sp, #12]
 8008f9e:	3402      	adds	r4, #2
 8008fa0:	1d1a      	adds	r2, r3, #4
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	9203      	str	r2, [sp, #12]
 8008fa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008faa:	9305      	str	r3, [sp, #20]
 8008fac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009064 <_svfiprintf_r+0x1e8>
 8008fb0:	2203      	movs	r2, #3
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	7821      	ldrb	r1, [r4, #0]
 8008fb6:	f7fd fc80 	bl	80068ba <memchr>
 8008fba:	b138      	cbz	r0, 8008fcc <_svfiprintf_r+0x150>
 8008fbc:	2240      	movs	r2, #64	@ 0x40
 8008fbe:	9b04      	ldr	r3, [sp, #16]
 8008fc0:	eba0 000a 	sub.w	r0, r0, sl
 8008fc4:	4082      	lsls	r2, r0
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	3401      	adds	r4, #1
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd0:	2206      	movs	r2, #6
 8008fd2:	4825      	ldr	r0, [pc, #148]	@ (8009068 <_svfiprintf_r+0x1ec>)
 8008fd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fd8:	f7fd fc6f 	bl	80068ba <memchr>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d036      	beq.n	800904e <_svfiprintf_r+0x1d2>
 8008fe0:	4b22      	ldr	r3, [pc, #136]	@ (800906c <_svfiprintf_r+0x1f0>)
 8008fe2:	bb1b      	cbnz	r3, 800902c <_svfiprintf_r+0x1b0>
 8008fe4:	9b03      	ldr	r3, [sp, #12]
 8008fe6:	3307      	adds	r3, #7
 8008fe8:	f023 0307 	bic.w	r3, r3, #7
 8008fec:	3308      	adds	r3, #8
 8008fee:	9303      	str	r3, [sp, #12]
 8008ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ff2:	4433      	add	r3, r6
 8008ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ff6:	e76a      	b.n	8008ece <_svfiprintf_r+0x52>
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009000:	e7a8      	b.n	8008f54 <_svfiprintf_r+0xd8>
 8009002:	2300      	movs	r3, #0
 8009004:	f04f 0c0a 	mov.w	ip, #10
 8009008:	4619      	mov	r1, r3
 800900a:	3401      	adds	r4, #1
 800900c:	9305      	str	r3, [sp, #20]
 800900e:	4620      	mov	r0, r4
 8009010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009014:	3a30      	subs	r2, #48	@ 0x30
 8009016:	2a09      	cmp	r2, #9
 8009018:	d903      	bls.n	8009022 <_svfiprintf_r+0x1a6>
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0c6      	beq.n	8008fac <_svfiprintf_r+0x130>
 800901e:	9105      	str	r1, [sp, #20]
 8009020:	e7c4      	b.n	8008fac <_svfiprintf_r+0x130>
 8009022:	4604      	mov	r4, r0
 8009024:	2301      	movs	r3, #1
 8009026:	fb0c 2101 	mla	r1, ip, r1, r2
 800902a:	e7f0      	b.n	800900e <_svfiprintf_r+0x192>
 800902c:	ab03      	add	r3, sp, #12
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	462a      	mov	r2, r5
 8009032:	4638      	mov	r0, r7
 8009034:	4b0e      	ldr	r3, [pc, #56]	@ (8009070 <_svfiprintf_r+0x1f4>)
 8009036:	a904      	add	r1, sp, #16
 8009038:	f7fc fccc 	bl	80059d4 <_printf_float>
 800903c:	1c42      	adds	r2, r0, #1
 800903e:	4606      	mov	r6, r0
 8009040:	d1d6      	bne.n	8008ff0 <_svfiprintf_r+0x174>
 8009042:	89ab      	ldrh	r3, [r5, #12]
 8009044:	065b      	lsls	r3, r3, #25
 8009046:	f53f af2d 	bmi.w	8008ea4 <_svfiprintf_r+0x28>
 800904a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800904c:	e72c      	b.n	8008ea8 <_svfiprintf_r+0x2c>
 800904e:	ab03      	add	r3, sp, #12
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	462a      	mov	r2, r5
 8009054:	4638      	mov	r0, r7
 8009056:	4b06      	ldr	r3, [pc, #24]	@ (8009070 <_svfiprintf_r+0x1f4>)
 8009058:	a904      	add	r1, sp, #16
 800905a:	f7fc ff59 	bl	8005f10 <_printf_i>
 800905e:	e7ed      	b.n	800903c <_svfiprintf_r+0x1c0>
 8009060:	0800a339 	.word	0x0800a339
 8009064:	0800a33f 	.word	0x0800a33f
 8009068:	0800a343 	.word	0x0800a343
 800906c:	080059d5 	.word	0x080059d5
 8009070:	08008dc5 	.word	0x08008dc5

08009074 <__sflush_r>:
 8009074:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907a:	0716      	lsls	r6, r2, #28
 800907c:	4605      	mov	r5, r0
 800907e:	460c      	mov	r4, r1
 8009080:	d454      	bmi.n	800912c <__sflush_r+0xb8>
 8009082:	684b      	ldr	r3, [r1, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	dc02      	bgt.n	800908e <__sflush_r+0x1a>
 8009088:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800908a:	2b00      	cmp	r3, #0
 800908c:	dd48      	ble.n	8009120 <__sflush_r+0xac>
 800908e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009090:	2e00      	cmp	r6, #0
 8009092:	d045      	beq.n	8009120 <__sflush_r+0xac>
 8009094:	2300      	movs	r3, #0
 8009096:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800909a:	682f      	ldr	r7, [r5, #0]
 800909c:	6a21      	ldr	r1, [r4, #32]
 800909e:	602b      	str	r3, [r5, #0]
 80090a0:	d030      	beq.n	8009104 <__sflush_r+0x90>
 80090a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	0759      	lsls	r1, r3, #29
 80090a8:	d505      	bpl.n	80090b6 <__sflush_r+0x42>
 80090aa:	6863      	ldr	r3, [r4, #4]
 80090ac:	1ad2      	subs	r2, r2, r3
 80090ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090b0:	b10b      	cbz	r3, 80090b6 <__sflush_r+0x42>
 80090b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090b4:	1ad2      	subs	r2, r2, r3
 80090b6:	2300      	movs	r3, #0
 80090b8:	4628      	mov	r0, r5
 80090ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090bc:	6a21      	ldr	r1, [r4, #32]
 80090be:	47b0      	blx	r6
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	d106      	bne.n	80090d4 <__sflush_r+0x60>
 80090c6:	6829      	ldr	r1, [r5, #0]
 80090c8:	291d      	cmp	r1, #29
 80090ca:	d82b      	bhi.n	8009124 <__sflush_r+0xb0>
 80090cc:	4a28      	ldr	r2, [pc, #160]	@ (8009170 <__sflush_r+0xfc>)
 80090ce:	410a      	asrs	r2, r1
 80090d0:	07d6      	lsls	r6, r2, #31
 80090d2:	d427      	bmi.n	8009124 <__sflush_r+0xb0>
 80090d4:	2200      	movs	r2, #0
 80090d6:	6062      	str	r2, [r4, #4]
 80090d8:	6922      	ldr	r2, [r4, #16]
 80090da:	04d9      	lsls	r1, r3, #19
 80090dc:	6022      	str	r2, [r4, #0]
 80090de:	d504      	bpl.n	80090ea <__sflush_r+0x76>
 80090e0:	1c42      	adds	r2, r0, #1
 80090e2:	d101      	bne.n	80090e8 <__sflush_r+0x74>
 80090e4:	682b      	ldr	r3, [r5, #0]
 80090e6:	b903      	cbnz	r3, 80090ea <__sflush_r+0x76>
 80090e8:	6560      	str	r0, [r4, #84]	@ 0x54
 80090ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090ec:	602f      	str	r7, [r5, #0]
 80090ee:	b1b9      	cbz	r1, 8009120 <__sflush_r+0xac>
 80090f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090f4:	4299      	cmp	r1, r3
 80090f6:	d002      	beq.n	80090fe <__sflush_r+0x8a>
 80090f8:	4628      	mov	r0, r5
 80090fa:	f7fe fa41 	bl	8007580 <_free_r>
 80090fe:	2300      	movs	r3, #0
 8009100:	6363      	str	r3, [r4, #52]	@ 0x34
 8009102:	e00d      	b.n	8009120 <__sflush_r+0xac>
 8009104:	2301      	movs	r3, #1
 8009106:	4628      	mov	r0, r5
 8009108:	47b0      	blx	r6
 800910a:	4602      	mov	r2, r0
 800910c:	1c50      	adds	r0, r2, #1
 800910e:	d1c9      	bne.n	80090a4 <__sflush_r+0x30>
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0c6      	beq.n	80090a4 <__sflush_r+0x30>
 8009116:	2b1d      	cmp	r3, #29
 8009118:	d001      	beq.n	800911e <__sflush_r+0xaa>
 800911a:	2b16      	cmp	r3, #22
 800911c:	d11d      	bne.n	800915a <__sflush_r+0xe6>
 800911e:	602f      	str	r7, [r5, #0]
 8009120:	2000      	movs	r0, #0
 8009122:	e021      	b.n	8009168 <__sflush_r+0xf4>
 8009124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009128:	b21b      	sxth	r3, r3
 800912a:	e01a      	b.n	8009162 <__sflush_r+0xee>
 800912c:	690f      	ldr	r7, [r1, #16]
 800912e:	2f00      	cmp	r7, #0
 8009130:	d0f6      	beq.n	8009120 <__sflush_r+0xac>
 8009132:	0793      	lsls	r3, r2, #30
 8009134:	bf18      	it	ne
 8009136:	2300      	movne	r3, #0
 8009138:	680e      	ldr	r6, [r1, #0]
 800913a:	bf08      	it	eq
 800913c:	694b      	ldreq	r3, [r1, #20]
 800913e:	1bf6      	subs	r6, r6, r7
 8009140:	600f      	str	r7, [r1, #0]
 8009142:	608b      	str	r3, [r1, #8]
 8009144:	2e00      	cmp	r6, #0
 8009146:	ddeb      	ble.n	8009120 <__sflush_r+0xac>
 8009148:	4633      	mov	r3, r6
 800914a:	463a      	mov	r2, r7
 800914c:	4628      	mov	r0, r5
 800914e:	6a21      	ldr	r1, [r4, #32]
 8009150:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009154:	47e0      	blx	ip
 8009156:	2800      	cmp	r0, #0
 8009158:	dc07      	bgt.n	800916a <__sflush_r+0xf6>
 800915a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800915e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009162:	f04f 30ff 	mov.w	r0, #4294967295
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800916a:	4407      	add	r7, r0
 800916c:	1a36      	subs	r6, r6, r0
 800916e:	e7e9      	b.n	8009144 <__sflush_r+0xd0>
 8009170:	dfbffffe 	.word	0xdfbffffe

08009174 <_fflush_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	690b      	ldr	r3, [r1, #16]
 8009178:	4605      	mov	r5, r0
 800917a:	460c      	mov	r4, r1
 800917c:	b913      	cbnz	r3, 8009184 <_fflush_r+0x10>
 800917e:	2500      	movs	r5, #0
 8009180:	4628      	mov	r0, r5
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	b118      	cbz	r0, 800918e <_fflush_r+0x1a>
 8009186:	6a03      	ldr	r3, [r0, #32]
 8009188:	b90b      	cbnz	r3, 800918e <_fflush_r+0x1a>
 800918a:	f7fd fa7d 	bl	8006688 <__sinit>
 800918e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0f3      	beq.n	800917e <_fflush_r+0xa>
 8009196:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009198:	07d0      	lsls	r0, r2, #31
 800919a:	d404      	bmi.n	80091a6 <_fflush_r+0x32>
 800919c:	0599      	lsls	r1, r3, #22
 800919e:	d402      	bmi.n	80091a6 <_fflush_r+0x32>
 80091a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091a2:	f7fd fb88 	bl	80068b6 <__retarget_lock_acquire_recursive>
 80091a6:	4628      	mov	r0, r5
 80091a8:	4621      	mov	r1, r4
 80091aa:	f7ff ff63 	bl	8009074 <__sflush_r>
 80091ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091b0:	4605      	mov	r5, r0
 80091b2:	07da      	lsls	r2, r3, #31
 80091b4:	d4e4      	bmi.n	8009180 <_fflush_r+0xc>
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	059b      	lsls	r3, r3, #22
 80091ba:	d4e1      	bmi.n	8009180 <_fflush_r+0xc>
 80091bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091be:	f7fd fb7b 	bl	80068b8 <__retarget_lock_release_recursive>
 80091c2:	e7dd      	b.n	8009180 <_fflush_r+0xc>

080091c4 <memmove>:
 80091c4:	4288      	cmp	r0, r1
 80091c6:	b510      	push	{r4, lr}
 80091c8:	eb01 0402 	add.w	r4, r1, r2
 80091cc:	d902      	bls.n	80091d4 <memmove+0x10>
 80091ce:	4284      	cmp	r4, r0
 80091d0:	4623      	mov	r3, r4
 80091d2:	d807      	bhi.n	80091e4 <memmove+0x20>
 80091d4:	1e43      	subs	r3, r0, #1
 80091d6:	42a1      	cmp	r1, r4
 80091d8:	d008      	beq.n	80091ec <memmove+0x28>
 80091da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091e2:	e7f8      	b.n	80091d6 <memmove+0x12>
 80091e4:	4601      	mov	r1, r0
 80091e6:	4402      	add	r2, r0
 80091e8:	428a      	cmp	r2, r1
 80091ea:	d100      	bne.n	80091ee <memmove+0x2a>
 80091ec:	bd10      	pop	{r4, pc}
 80091ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091f6:	e7f7      	b.n	80091e8 <memmove+0x24>

080091f8 <strncmp>:
 80091f8:	b510      	push	{r4, lr}
 80091fa:	b16a      	cbz	r2, 8009218 <strncmp+0x20>
 80091fc:	3901      	subs	r1, #1
 80091fe:	1884      	adds	r4, r0, r2
 8009200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009204:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009208:	429a      	cmp	r2, r3
 800920a:	d103      	bne.n	8009214 <strncmp+0x1c>
 800920c:	42a0      	cmp	r0, r4
 800920e:	d001      	beq.n	8009214 <strncmp+0x1c>
 8009210:	2a00      	cmp	r2, #0
 8009212:	d1f5      	bne.n	8009200 <strncmp+0x8>
 8009214:	1ad0      	subs	r0, r2, r3
 8009216:	bd10      	pop	{r4, pc}
 8009218:	4610      	mov	r0, r2
 800921a:	e7fc      	b.n	8009216 <strncmp+0x1e>

0800921c <_sbrk_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	2300      	movs	r3, #0
 8009220:	4d05      	ldr	r5, [pc, #20]	@ (8009238 <_sbrk_r+0x1c>)
 8009222:	4604      	mov	r4, r0
 8009224:	4608      	mov	r0, r1
 8009226:	602b      	str	r3, [r5, #0]
 8009228:	f7f8 fa3e 	bl	80016a8 <_sbrk>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	d102      	bne.n	8009236 <_sbrk_r+0x1a>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	b103      	cbz	r3, 8009236 <_sbrk_r+0x1a>
 8009234:	6023      	str	r3, [r4, #0]
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	200003e0 	.word	0x200003e0

0800923c <memcpy>:
 800923c:	440a      	add	r2, r1
 800923e:	4291      	cmp	r1, r2
 8009240:	f100 33ff 	add.w	r3, r0, #4294967295
 8009244:	d100      	bne.n	8009248 <memcpy+0xc>
 8009246:	4770      	bx	lr
 8009248:	b510      	push	{r4, lr}
 800924a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800924e:	4291      	cmp	r1, r2
 8009250:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009254:	d1f9      	bne.n	800924a <memcpy+0xe>
 8009256:	bd10      	pop	{r4, pc}

08009258 <nan>:
 8009258:	2000      	movs	r0, #0
 800925a:	4901      	ldr	r1, [pc, #4]	@ (8009260 <nan+0x8>)
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	7ff80000 	.word	0x7ff80000

08009264 <__assert_func>:
 8009264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009266:	4614      	mov	r4, r2
 8009268:	461a      	mov	r2, r3
 800926a:	4b09      	ldr	r3, [pc, #36]	@ (8009290 <__assert_func+0x2c>)
 800926c:	4605      	mov	r5, r0
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68d8      	ldr	r0, [r3, #12]
 8009272:	b954      	cbnz	r4, 800928a <__assert_func+0x26>
 8009274:	4b07      	ldr	r3, [pc, #28]	@ (8009294 <__assert_func+0x30>)
 8009276:	461c      	mov	r4, r3
 8009278:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800927c:	9100      	str	r1, [sp, #0]
 800927e:	462b      	mov	r3, r5
 8009280:	4905      	ldr	r1, [pc, #20]	@ (8009298 <__assert_func+0x34>)
 8009282:	f000 fba7 	bl	80099d4 <fiprintf>
 8009286:	f000 fbb7 	bl	80099f8 <abort>
 800928a:	4b04      	ldr	r3, [pc, #16]	@ (800929c <__assert_func+0x38>)
 800928c:	e7f4      	b.n	8009278 <__assert_func+0x14>
 800928e:	bf00      	nop
 8009290:	2000001c 	.word	0x2000001c
 8009294:	0800a38d 	.word	0x0800a38d
 8009298:	0800a35f 	.word	0x0800a35f
 800929c:	0800a352 	.word	0x0800a352

080092a0 <_calloc_r>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	fba1 5402 	umull	r5, r4, r1, r2
 80092a6:	b93c      	cbnz	r4, 80092b8 <_calloc_r+0x18>
 80092a8:	4629      	mov	r1, r5
 80092aa:	f7fe f9db 	bl	8007664 <_malloc_r>
 80092ae:	4606      	mov	r6, r0
 80092b0:	b928      	cbnz	r0, 80092be <_calloc_r+0x1e>
 80092b2:	2600      	movs	r6, #0
 80092b4:	4630      	mov	r0, r6
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	220c      	movs	r2, #12
 80092ba:	6002      	str	r2, [r0, #0]
 80092bc:	e7f9      	b.n	80092b2 <_calloc_r+0x12>
 80092be:	462a      	mov	r2, r5
 80092c0:	4621      	mov	r1, r4
 80092c2:	f7fd fa7a 	bl	80067ba <memset>
 80092c6:	e7f5      	b.n	80092b4 <_calloc_r+0x14>

080092c8 <rshift>:
 80092c8:	6903      	ldr	r3, [r0, #16]
 80092ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80092d2:	f100 0414 	add.w	r4, r0, #20
 80092d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80092da:	dd46      	ble.n	800936a <rshift+0xa2>
 80092dc:	f011 011f 	ands.w	r1, r1, #31
 80092e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80092e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80092e8:	d10c      	bne.n	8009304 <rshift+0x3c>
 80092ea:	4629      	mov	r1, r5
 80092ec:	f100 0710 	add.w	r7, r0, #16
 80092f0:	42b1      	cmp	r1, r6
 80092f2:	d335      	bcc.n	8009360 <rshift+0x98>
 80092f4:	1a9b      	subs	r3, r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	1eea      	subs	r2, r5, #3
 80092fa:	4296      	cmp	r6, r2
 80092fc:	bf38      	it	cc
 80092fe:	2300      	movcc	r3, #0
 8009300:	4423      	add	r3, r4
 8009302:	e015      	b.n	8009330 <rshift+0x68>
 8009304:	46a1      	mov	r9, r4
 8009306:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800930a:	f1c1 0820 	rsb	r8, r1, #32
 800930e:	40cf      	lsrs	r7, r1
 8009310:	f105 0e04 	add.w	lr, r5, #4
 8009314:	4576      	cmp	r6, lr
 8009316:	46f4      	mov	ip, lr
 8009318:	d816      	bhi.n	8009348 <rshift+0x80>
 800931a:	1a9a      	subs	r2, r3, r2
 800931c:	0092      	lsls	r2, r2, #2
 800931e:	3a04      	subs	r2, #4
 8009320:	3501      	adds	r5, #1
 8009322:	42ae      	cmp	r6, r5
 8009324:	bf38      	it	cc
 8009326:	2200      	movcc	r2, #0
 8009328:	18a3      	adds	r3, r4, r2
 800932a:	50a7      	str	r7, [r4, r2]
 800932c:	b107      	cbz	r7, 8009330 <rshift+0x68>
 800932e:	3304      	adds	r3, #4
 8009330:	42a3      	cmp	r3, r4
 8009332:	eba3 0204 	sub.w	r2, r3, r4
 8009336:	bf08      	it	eq
 8009338:	2300      	moveq	r3, #0
 800933a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800933e:	6102      	str	r2, [r0, #16]
 8009340:	bf08      	it	eq
 8009342:	6143      	streq	r3, [r0, #20]
 8009344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009348:	f8dc c000 	ldr.w	ip, [ip]
 800934c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009350:	ea4c 0707 	orr.w	r7, ip, r7
 8009354:	f849 7b04 	str.w	r7, [r9], #4
 8009358:	f85e 7b04 	ldr.w	r7, [lr], #4
 800935c:	40cf      	lsrs	r7, r1
 800935e:	e7d9      	b.n	8009314 <rshift+0x4c>
 8009360:	f851 cb04 	ldr.w	ip, [r1], #4
 8009364:	f847 cf04 	str.w	ip, [r7, #4]!
 8009368:	e7c2      	b.n	80092f0 <rshift+0x28>
 800936a:	4623      	mov	r3, r4
 800936c:	e7e0      	b.n	8009330 <rshift+0x68>

0800936e <__hexdig_fun>:
 800936e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009372:	2b09      	cmp	r3, #9
 8009374:	d802      	bhi.n	800937c <__hexdig_fun+0xe>
 8009376:	3820      	subs	r0, #32
 8009378:	b2c0      	uxtb	r0, r0
 800937a:	4770      	bx	lr
 800937c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009380:	2b05      	cmp	r3, #5
 8009382:	d801      	bhi.n	8009388 <__hexdig_fun+0x1a>
 8009384:	3847      	subs	r0, #71	@ 0x47
 8009386:	e7f7      	b.n	8009378 <__hexdig_fun+0xa>
 8009388:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800938c:	2b05      	cmp	r3, #5
 800938e:	d801      	bhi.n	8009394 <__hexdig_fun+0x26>
 8009390:	3827      	subs	r0, #39	@ 0x27
 8009392:	e7f1      	b.n	8009378 <__hexdig_fun+0xa>
 8009394:	2000      	movs	r0, #0
 8009396:	4770      	bx	lr

08009398 <__gethex>:
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	468a      	mov	sl, r1
 800939e:	4690      	mov	r8, r2
 80093a0:	b085      	sub	sp, #20
 80093a2:	9302      	str	r3, [sp, #8]
 80093a4:	680b      	ldr	r3, [r1, #0]
 80093a6:	9001      	str	r0, [sp, #4]
 80093a8:	1c9c      	adds	r4, r3, #2
 80093aa:	46a1      	mov	r9, r4
 80093ac:	f814 0b01 	ldrb.w	r0, [r4], #1
 80093b0:	2830      	cmp	r0, #48	@ 0x30
 80093b2:	d0fa      	beq.n	80093aa <__gethex+0x12>
 80093b4:	eba9 0303 	sub.w	r3, r9, r3
 80093b8:	f1a3 0b02 	sub.w	fp, r3, #2
 80093bc:	f7ff ffd7 	bl	800936e <__hexdig_fun>
 80093c0:	4605      	mov	r5, r0
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d168      	bne.n	8009498 <__gethex+0x100>
 80093c6:	2201      	movs	r2, #1
 80093c8:	4648      	mov	r0, r9
 80093ca:	499f      	ldr	r1, [pc, #636]	@ (8009648 <__gethex+0x2b0>)
 80093cc:	f7ff ff14 	bl	80091f8 <strncmp>
 80093d0:	4607      	mov	r7, r0
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d167      	bne.n	80094a6 <__gethex+0x10e>
 80093d6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80093da:	4626      	mov	r6, r4
 80093dc:	f7ff ffc7 	bl	800936e <__hexdig_fun>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d062      	beq.n	80094aa <__gethex+0x112>
 80093e4:	4623      	mov	r3, r4
 80093e6:	7818      	ldrb	r0, [r3, #0]
 80093e8:	4699      	mov	r9, r3
 80093ea:	2830      	cmp	r0, #48	@ 0x30
 80093ec:	f103 0301 	add.w	r3, r3, #1
 80093f0:	d0f9      	beq.n	80093e6 <__gethex+0x4e>
 80093f2:	f7ff ffbc 	bl	800936e <__hexdig_fun>
 80093f6:	fab0 f580 	clz	r5, r0
 80093fa:	f04f 0b01 	mov.w	fp, #1
 80093fe:	096d      	lsrs	r5, r5, #5
 8009400:	464a      	mov	r2, r9
 8009402:	4616      	mov	r6, r2
 8009404:	7830      	ldrb	r0, [r6, #0]
 8009406:	3201      	adds	r2, #1
 8009408:	f7ff ffb1 	bl	800936e <__hexdig_fun>
 800940c:	2800      	cmp	r0, #0
 800940e:	d1f8      	bne.n	8009402 <__gethex+0x6a>
 8009410:	2201      	movs	r2, #1
 8009412:	4630      	mov	r0, r6
 8009414:	498c      	ldr	r1, [pc, #560]	@ (8009648 <__gethex+0x2b0>)
 8009416:	f7ff feef 	bl	80091f8 <strncmp>
 800941a:	2800      	cmp	r0, #0
 800941c:	d13f      	bne.n	800949e <__gethex+0x106>
 800941e:	b944      	cbnz	r4, 8009432 <__gethex+0x9a>
 8009420:	1c74      	adds	r4, r6, #1
 8009422:	4622      	mov	r2, r4
 8009424:	4616      	mov	r6, r2
 8009426:	7830      	ldrb	r0, [r6, #0]
 8009428:	3201      	adds	r2, #1
 800942a:	f7ff ffa0 	bl	800936e <__hexdig_fun>
 800942e:	2800      	cmp	r0, #0
 8009430:	d1f8      	bne.n	8009424 <__gethex+0x8c>
 8009432:	1ba4      	subs	r4, r4, r6
 8009434:	00a7      	lsls	r7, r4, #2
 8009436:	7833      	ldrb	r3, [r6, #0]
 8009438:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800943c:	2b50      	cmp	r3, #80	@ 0x50
 800943e:	d13e      	bne.n	80094be <__gethex+0x126>
 8009440:	7873      	ldrb	r3, [r6, #1]
 8009442:	2b2b      	cmp	r3, #43	@ 0x2b
 8009444:	d033      	beq.n	80094ae <__gethex+0x116>
 8009446:	2b2d      	cmp	r3, #45	@ 0x2d
 8009448:	d034      	beq.n	80094b4 <__gethex+0x11c>
 800944a:	2400      	movs	r4, #0
 800944c:	1c71      	adds	r1, r6, #1
 800944e:	7808      	ldrb	r0, [r1, #0]
 8009450:	f7ff ff8d 	bl	800936e <__hexdig_fun>
 8009454:	1e43      	subs	r3, r0, #1
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b18      	cmp	r3, #24
 800945a:	d830      	bhi.n	80094be <__gethex+0x126>
 800945c:	f1a0 0210 	sub.w	r2, r0, #16
 8009460:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009464:	f7ff ff83 	bl	800936e <__hexdig_fun>
 8009468:	f100 3cff 	add.w	ip, r0, #4294967295
 800946c:	fa5f fc8c 	uxtb.w	ip, ip
 8009470:	f1bc 0f18 	cmp.w	ip, #24
 8009474:	f04f 030a 	mov.w	r3, #10
 8009478:	d91e      	bls.n	80094b8 <__gethex+0x120>
 800947a:	b104      	cbz	r4, 800947e <__gethex+0xe6>
 800947c:	4252      	negs	r2, r2
 800947e:	4417      	add	r7, r2
 8009480:	f8ca 1000 	str.w	r1, [sl]
 8009484:	b1ed      	cbz	r5, 80094c2 <__gethex+0x12a>
 8009486:	f1bb 0f00 	cmp.w	fp, #0
 800948a:	bf0c      	ite	eq
 800948c:	2506      	moveq	r5, #6
 800948e:	2500      	movne	r5, #0
 8009490:	4628      	mov	r0, r5
 8009492:	b005      	add	sp, #20
 8009494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009498:	2500      	movs	r5, #0
 800949a:	462c      	mov	r4, r5
 800949c:	e7b0      	b.n	8009400 <__gethex+0x68>
 800949e:	2c00      	cmp	r4, #0
 80094a0:	d1c7      	bne.n	8009432 <__gethex+0x9a>
 80094a2:	4627      	mov	r7, r4
 80094a4:	e7c7      	b.n	8009436 <__gethex+0x9e>
 80094a6:	464e      	mov	r6, r9
 80094a8:	462f      	mov	r7, r5
 80094aa:	2501      	movs	r5, #1
 80094ac:	e7c3      	b.n	8009436 <__gethex+0x9e>
 80094ae:	2400      	movs	r4, #0
 80094b0:	1cb1      	adds	r1, r6, #2
 80094b2:	e7cc      	b.n	800944e <__gethex+0xb6>
 80094b4:	2401      	movs	r4, #1
 80094b6:	e7fb      	b.n	80094b0 <__gethex+0x118>
 80094b8:	fb03 0002 	mla	r0, r3, r2, r0
 80094bc:	e7ce      	b.n	800945c <__gethex+0xc4>
 80094be:	4631      	mov	r1, r6
 80094c0:	e7de      	b.n	8009480 <__gethex+0xe8>
 80094c2:	4629      	mov	r1, r5
 80094c4:	eba6 0309 	sub.w	r3, r6, r9
 80094c8:	3b01      	subs	r3, #1
 80094ca:	2b07      	cmp	r3, #7
 80094cc:	dc0a      	bgt.n	80094e4 <__gethex+0x14c>
 80094ce:	9801      	ldr	r0, [sp, #4]
 80094d0:	f7fe f954 	bl	800777c <_Balloc>
 80094d4:	4604      	mov	r4, r0
 80094d6:	b940      	cbnz	r0, 80094ea <__gethex+0x152>
 80094d8:	4602      	mov	r2, r0
 80094da:	21e4      	movs	r1, #228	@ 0xe4
 80094dc:	4b5b      	ldr	r3, [pc, #364]	@ (800964c <__gethex+0x2b4>)
 80094de:	485c      	ldr	r0, [pc, #368]	@ (8009650 <__gethex+0x2b8>)
 80094e0:	f7ff fec0 	bl	8009264 <__assert_func>
 80094e4:	3101      	adds	r1, #1
 80094e6:	105b      	asrs	r3, r3, #1
 80094e8:	e7ef      	b.n	80094ca <__gethex+0x132>
 80094ea:	2300      	movs	r3, #0
 80094ec:	f100 0a14 	add.w	sl, r0, #20
 80094f0:	4655      	mov	r5, sl
 80094f2:	469b      	mov	fp, r3
 80094f4:	45b1      	cmp	r9, r6
 80094f6:	d337      	bcc.n	8009568 <__gethex+0x1d0>
 80094f8:	f845 bb04 	str.w	fp, [r5], #4
 80094fc:	eba5 050a 	sub.w	r5, r5, sl
 8009500:	10ad      	asrs	r5, r5, #2
 8009502:	6125      	str	r5, [r4, #16]
 8009504:	4658      	mov	r0, fp
 8009506:	f7fe fa2b 	bl	8007960 <__hi0bits>
 800950a:	016d      	lsls	r5, r5, #5
 800950c:	f8d8 6000 	ldr.w	r6, [r8]
 8009510:	1a2d      	subs	r5, r5, r0
 8009512:	42b5      	cmp	r5, r6
 8009514:	dd54      	ble.n	80095c0 <__gethex+0x228>
 8009516:	1bad      	subs	r5, r5, r6
 8009518:	4629      	mov	r1, r5
 800951a:	4620      	mov	r0, r4
 800951c:	f7fe fdb3 	bl	8008086 <__any_on>
 8009520:	4681      	mov	r9, r0
 8009522:	b178      	cbz	r0, 8009544 <__gethex+0x1ac>
 8009524:	f04f 0901 	mov.w	r9, #1
 8009528:	1e6b      	subs	r3, r5, #1
 800952a:	1159      	asrs	r1, r3, #5
 800952c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009530:	f003 021f 	and.w	r2, r3, #31
 8009534:	fa09 f202 	lsl.w	r2, r9, r2
 8009538:	420a      	tst	r2, r1
 800953a:	d003      	beq.n	8009544 <__gethex+0x1ac>
 800953c:	454b      	cmp	r3, r9
 800953e:	dc36      	bgt.n	80095ae <__gethex+0x216>
 8009540:	f04f 0902 	mov.w	r9, #2
 8009544:	4629      	mov	r1, r5
 8009546:	4620      	mov	r0, r4
 8009548:	f7ff febe 	bl	80092c8 <rshift>
 800954c:	442f      	add	r7, r5
 800954e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009552:	42bb      	cmp	r3, r7
 8009554:	da42      	bge.n	80095dc <__gethex+0x244>
 8009556:	4621      	mov	r1, r4
 8009558:	9801      	ldr	r0, [sp, #4]
 800955a:	f7fe f94f 	bl	80077fc <_Bfree>
 800955e:	2300      	movs	r3, #0
 8009560:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009562:	25a3      	movs	r5, #163	@ 0xa3
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	e793      	b.n	8009490 <__gethex+0xf8>
 8009568:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800956c:	2a2e      	cmp	r2, #46	@ 0x2e
 800956e:	d012      	beq.n	8009596 <__gethex+0x1fe>
 8009570:	2b20      	cmp	r3, #32
 8009572:	d104      	bne.n	800957e <__gethex+0x1e6>
 8009574:	f845 bb04 	str.w	fp, [r5], #4
 8009578:	f04f 0b00 	mov.w	fp, #0
 800957c:	465b      	mov	r3, fp
 800957e:	7830      	ldrb	r0, [r6, #0]
 8009580:	9303      	str	r3, [sp, #12]
 8009582:	f7ff fef4 	bl	800936e <__hexdig_fun>
 8009586:	9b03      	ldr	r3, [sp, #12]
 8009588:	f000 000f 	and.w	r0, r0, #15
 800958c:	4098      	lsls	r0, r3
 800958e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009592:	3304      	adds	r3, #4
 8009594:	e7ae      	b.n	80094f4 <__gethex+0x15c>
 8009596:	45b1      	cmp	r9, r6
 8009598:	d8ea      	bhi.n	8009570 <__gethex+0x1d8>
 800959a:	2201      	movs	r2, #1
 800959c:	4630      	mov	r0, r6
 800959e:	492a      	ldr	r1, [pc, #168]	@ (8009648 <__gethex+0x2b0>)
 80095a0:	9303      	str	r3, [sp, #12]
 80095a2:	f7ff fe29 	bl	80091f8 <strncmp>
 80095a6:	9b03      	ldr	r3, [sp, #12]
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d1e1      	bne.n	8009570 <__gethex+0x1d8>
 80095ac:	e7a2      	b.n	80094f4 <__gethex+0x15c>
 80095ae:	4620      	mov	r0, r4
 80095b0:	1ea9      	subs	r1, r5, #2
 80095b2:	f7fe fd68 	bl	8008086 <__any_on>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	d0c2      	beq.n	8009540 <__gethex+0x1a8>
 80095ba:	f04f 0903 	mov.w	r9, #3
 80095be:	e7c1      	b.n	8009544 <__gethex+0x1ac>
 80095c0:	da09      	bge.n	80095d6 <__gethex+0x23e>
 80095c2:	1b75      	subs	r5, r6, r5
 80095c4:	4621      	mov	r1, r4
 80095c6:	462a      	mov	r2, r5
 80095c8:	9801      	ldr	r0, [sp, #4]
 80095ca:	f7fe fb2d 	bl	8007c28 <__lshift>
 80095ce:	4604      	mov	r4, r0
 80095d0:	1b7f      	subs	r7, r7, r5
 80095d2:	f100 0a14 	add.w	sl, r0, #20
 80095d6:	f04f 0900 	mov.w	r9, #0
 80095da:	e7b8      	b.n	800954e <__gethex+0x1b6>
 80095dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80095e0:	42bd      	cmp	r5, r7
 80095e2:	dd6f      	ble.n	80096c4 <__gethex+0x32c>
 80095e4:	1bed      	subs	r5, r5, r7
 80095e6:	42ae      	cmp	r6, r5
 80095e8:	dc34      	bgt.n	8009654 <__gethex+0x2bc>
 80095ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d022      	beq.n	8009638 <__gethex+0x2a0>
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d024      	beq.n	8009640 <__gethex+0x2a8>
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d115      	bne.n	8009626 <__gethex+0x28e>
 80095fa:	42ae      	cmp	r6, r5
 80095fc:	d113      	bne.n	8009626 <__gethex+0x28e>
 80095fe:	2e01      	cmp	r6, #1
 8009600:	d10b      	bne.n	800961a <__gethex+0x282>
 8009602:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009606:	9a02      	ldr	r2, [sp, #8]
 8009608:	2562      	movs	r5, #98	@ 0x62
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	2301      	movs	r3, #1
 800960e:	6123      	str	r3, [r4, #16]
 8009610:	f8ca 3000 	str.w	r3, [sl]
 8009614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009616:	601c      	str	r4, [r3, #0]
 8009618:	e73a      	b.n	8009490 <__gethex+0xf8>
 800961a:	4620      	mov	r0, r4
 800961c:	1e71      	subs	r1, r6, #1
 800961e:	f7fe fd32 	bl	8008086 <__any_on>
 8009622:	2800      	cmp	r0, #0
 8009624:	d1ed      	bne.n	8009602 <__gethex+0x26a>
 8009626:	4621      	mov	r1, r4
 8009628:	9801      	ldr	r0, [sp, #4]
 800962a:	f7fe f8e7 	bl	80077fc <_Bfree>
 800962e:	2300      	movs	r3, #0
 8009630:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009632:	2550      	movs	r5, #80	@ 0x50
 8009634:	6013      	str	r3, [r2, #0]
 8009636:	e72b      	b.n	8009490 <__gethex+0xf8>
 8009638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1f3      	bne.n	8009626 <__gethex+0x28e>
 800963e:	e7e0      	b.n	8009602 <__gethex+0x26a>
 8009640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1dd      	bne.n	8009602 <__gethex+0x26a>
 8009646:	e7ee      	b.n	8009626 <__gethex+0x28e>
 8009648:	0800a1e0 	.word	0x0800a1e0
 800964c:	0800a077 	.word	0x0800a077
 8009650:	0800a38e 	.word	0x0800a38e
 8009654:	1e6f      	subs	r7, r5, #1
 8009656:	f1b9 0f00 	cmp.w	r9, #0
 800965a:	d130      	bne.n	80096be <__gethex+0x326>
 800965c:	b127      	cbz	r7, 8009668 <__gethex+0x2d0>
 800965e:	4639      	mov	r1, r7
 8009660:	4620      	mov	r0, r4
 8009662:	f7fe fd10 	bl	8008086 <__any_on>
 8009666:	4681      	mov	r9, r0
 8009668:	2301      	movs	r3, #1
 800966a:	4629      	mov	r1, r5
 800966c:	1b76      	subs	r6, r6, r5
 800966e:	2502      	movs	r5, #2
 8009670:	117a      	asrs	r2, r7, #5
 8009672:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009676:	f007 071f 	and.w	r7, r7, #31
 800967a:	40bb      	lsls	r3, r7
 800967c:	4213      	tst	r3, r2
 800967e:	4620      	mov	r0, r4
 8009680:	bf18      	it	ne
 8009682:	f049 0902 	orrne.w	r9, r9, #2
 8009686:	f7ff fe1f 	bl	80092c8 <rshift>
 800968a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800968e:	f1b9 0f00 	cmp.w	r9, #0
 8009692:	d047      	beq.n	8009724 <__gethex+0x38c>
 8009694:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009698:	2b02      	cmp	r3, #2
 800969a:	d015      	beq.n	80096c8 <__gethex+0x330>
 800969c:	2b03      	cmp	r3, #3
 800969e:	d017      	beq.n	80096d0 <__gethex+0x338>
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d109      	bne.n	80096b8 <__gethex+0x320>
 80096a4:	f019 0f02 	tst.w	r9, #2
 80096a8:	d006      	beq.n	80096b8 <__gethex+0x320>
 80096aa:	f8da 3000 	ldr.w	r3, [sl]
 80096ae:	ea49 0903 	orr.w	r9, r9, r3
 80096b2:	f019 0f01 	tst.w	r9, #1
 80096b6:	d10e      	bne.n	80096d6 <__gethex+0x33e>
 80096b8:	f045 0510 	orr.w	r5, r5, #16
 80096bc:	e032      	b.n	8009724 <__gethex+0x38c>
 80096be:	f04f 0901 	mov.w	r9, #1
 80096c2:	e7d1      	b.n	8009668 <__gethex+0x2d0>
 80096c4:	2501      	movs	r5, #1
 80096c6:	e7e2      	b.n	800968e <__gethex+0x2f6>
 80096c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ca:	f1c3 0301 	rsb	r3, r3, #1
 80096ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d0f0      	beq.n	80096b8 <__gethex+0x320>
 80096d6:	f04f 0c00 	mov.w	ip, #0
 80096da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80096de:	f104 0314 	add.w	r3, r4, #20
 80096e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80096e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80096f4:	d01b      	beq.n	800972e <__gethex+0x396>
 80096f6:	3201      	adds	r2, #1
 80096f8:	6002      	str	r2, [r0, #0]
 80096fa:	2d02      	cmp	r5, #2
 80096fc:	f104 0314 	add.w	r3, r4, #20
 8009700:	d13c      	bne.n	800977c <__gethex+0x3e4>
 8009702:	f8d8 2000 	ldr.w	r2, [r8]
 8009706:	3a01      	subs	r2, #1
 8009708:	42b2      	cmp	r2, r6
 800970a:	d109      	bne.n	8009720 <__gethex+0x388>
 800970c:	2201      	movs	r2, #1
 800970e:	1171      	asrs	r1, r6, #5
 8009710:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009714:	f006 061f 	and.w	r6, r6, #31
 8009718:	fa02 f606 	lsl.w	r6, r2, r6
 800971c:	421e      	tst	r6, r3
 800971e:	d13a      	bne.n	8009796 <__gethex+0x3fe>
 8009720:	f045 0520 	orr.w	r5, r5, #32
 8009724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009726:	601c      	str	r4, [r3, #0]
 8009728:	9b02      	ldr	r3, [sp, #8]
 800972a:	601f      	str	r7, [r3, #0]
 800972c:	e6b0      	b.n	8009490 <__gethex+0xf8>
 800972e:	4299      	cmp	r1, r3
 8009730:	f843 cc04 	str.w	ip, [r3, #-4]
 8009734:	d8d9      	bhi.n	80096ea <__gethex+0x352>
 8009736:	68a3      	ldr	r3, [r4, #8]
 8009738:	459b      	cmp	fp, r3
 800973a:	db17      	blt.n	800976c <__gethex+0x3d4>
 800973c:	6861      	ldr	r1, [r4, #4]
 800973e:	9801      	ldr	r0, [sp, #4]
 8009740:	3101      	adds	r1, #1
 8009742:	f7fe f81b 	bl	800777c <_Balloc>
 8009746:	4681      	mov	r9, r0
 8009748:	b918      	cbnz	r0, 8009752 <__gethex+0x3ba>
 800974a:	4602      	mov	r2, r0
 800974c:	2184      	movs	r1, #132	@ 0x84
 800974e:	4b19      	ldr	r3, [pc, #100]	@ (80097b4 <__gethex+0x41c>)
 8009750:	e6c5      	b.n	80094de <__gethex+0x146>
 8009752:	6922      	ldr	r2, [r4, #16]
 8009754:	f104 010c 	add.w	r1, r4, #12
 8009758:	3202      	adds	r2, #2
 800975a:	0092      	lsls	r2, r2, #2
 800975c:	300c      	adds	r0, #12
 800975e:	f7ff fd6d 	bl	800923c <memcpy>
 8009762:	4621      	mov	r1, r4
 8009764:	9801      	ldr	r0, [sp, #4]
 8009766:	f7fe f849 	bl	80077fc <_Bfree>
 800976a:	464c      	mov	r4, r9
 800976c:	6923      	ldr	r3, [r4, #16]
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	6122      	str	r2, [r4, #16]
 8009772:	2201      	movs	r2, #1
 8009774:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009778:	615a      	str	r2, [r3, #20]
 800977a:	e7be      	b.n	80096fa <__gethex+0x362>
 800977c:	6922      	ldr	r2, [r4, #16]
 800977e:	455a      	cmp	r2, fp
 8009780:	dd0b      	ble.n	800979a <__gethex+0x402>
 8009782:	2101      	movs	r1, #1
 8009784:	4620      	mov	r0, r4
 8009786:	f7ff fd9f 	bl	80092c8 <rshift>
 800978a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800978e:	3701      	adds	r7, #1
 8009790:	42bb      	cmp	r3, r7
 8009792:	f6ff aee0 	blt.w	8009556 <__gethex+0x1be>
 8009796:	2501      	movs	r5, #1
 8009798:	e7c2      	b.n	8009720 <__gethex+0x388>
 800979a:	f016 061f 	ands.w	r6, r6, #31
 800979e:	d0fa      	beq.n	8009796 <__gethex+0x3fe>
 80097a0:	4453      	add	r3, sl
 80097a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80097a6:	f7fe f8db 	bl	8007960 <__hi0bits>
 80097aa:	f1c6 0620 	rsb	r6, r6, #32
 80097ae:	42b0      	cmp	r0, r6
 80097b0:	dbe7      	blt.n	8009782 <__gethex+0x3ea>
 80097b2:	e7f0      	b.n	8009796 <__gethex+0x3fe>
 80097b4:	0800a077 	.word	0x0800a077

080097b8 <L_shift>:
 80097b8:	f1c2 0208 	rsb	r2, r2, #8
 80097bc:	0092      	lsls	r2, r2, #2
 80097be:	b570      	push	{r4, r5, r6, lr}
 80097c0:	f1c2 0620 	rsb	r6, r2, #32
 80097c4:	6843      	ldr	r3, [r0, #4]
 80097c6:	6804      	ldr	r4, [r0, #0]
 80097c8:	fa03 f506 	lsl.w	r5, r3, r6
 80097cc:	432c      	orrs	r4, r5
 80097ce:	40d3      	lsrs	r3, r2
 80097d0:	6004      	str	r4, [r0, #0]
 80097d2:	f840 3f04 	str.w	r3, [r0, #4]!
 80097d6:	4288      	cmp	r0, r1
 80097d8:	d3f4      	bcc.n	80097c4 <L_shift+0xc>
 80097da:	bd70      	pop	{r4, r5, r6, pc}

080097dc <__match>:
 80097dc:	b530      	push	{r4, r5, lr}
 80097de:	6803      	ldr	r3, [r0, #0]
 80097e0:	3301      	adds	r3, #1
 80097e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097e6:	b914      	cbnz	r4, 80097ee <__match+0x12>
 80097e8:	6003      	str	r3, [r0, #0]
 80097ea:	2001      	movs	r0, #1
 80097ec:	bd30      	pop	{r4, r5, pc}
 80097ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097f2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80097f6:	2d19      	cmp	r5, #25
 80097f8:	bf98      	it	ls
 80097fa:	3220      	addls	r2, #32
 80097fc:	42a2      	cmp	r2, r4
 80097fe:	d0f0      	beq.n	80097e2 <__match+0x6>
 8009800:	2000      	movs	r0, #0
 8009802:	e7f3      	b.n	80097ec <__match+0x10>

08009804 <__hexnan>:
 8009804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009808:	2500      	movs	r5, #0
 800980a:	680b      	ldr	r3, [r1, #0]
 800980c:	4682      	mov	sl, r0
 800980e:	115e      	asrs	r6, r3, #5
 8009810:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009814:	f013 031f 	ands.w	r3, r3, #31
 8009818:	bf18      	it	ne
 800981a:	3604      	addne	r6, #4
 800981c:	1f37      	subs	r7, r6, #4
 800981e:	4690      	mov	r8, r2
 8009820:	46b9      	mov	r9, r7
 8009822:	463c      	mov	r4, r7
 8009824:	46ab      	mov	fp, r5
 8009826:	b087      	sub	sp, #28
 8009828:	6801      	ldr	r1, [r0, #0]
 800982a:	9301      	str	r3, [sp, #4]
 800982c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009830:	9502      	str	r5, [sp, #8]
 8009832:	784a      	ldrb	r2, [r1, #1]
 8009834:	1c4b      	adds	r3, r1, #1
 8009836:	9303      	str	r3, [sp, #12]
 8009838:	b342      	cbz	r2, 800988c <__hexnan+0x88>
 800983a:	4610      	mov	r0, r2
 800983c:	9105      	str	r1, [sp, #20]
 800983e:	9204      	str	r2, [sp, #16]
 8009840:	f7ff fd95 	bl	800936e <__hexdig_fun>
 8009844:	2800      	cmp	r0, #0
 8009846:	d151      	bne.n	80098ec <__hexnan+0xe8>
 8009848:	9a04      	ldr	r2, [sp, #16]
 800984a:	9905      	ldr	r1, [sp, #20]
 800984c:	2a20      	cmp	r2, #32
 800984e:	d818      	bhi.n	8009882 <__hexnan+0x7e>
 8009850:	9b02      	ldr	r3, [sp, #8]
 8009852:	459b      	cmp	fp, r3
 8009854:	dd13      	ble.n	800987e <__hexnan+0x7a>
 8009856:	454c      	cmp	r4, r9
 8009858:	d206      	bcs.n	8009868 <__hexnan+0x64>
 800985a:	2d07      	cmp	r5, #7
 800985c:	dc04      	bgt.n	8009868 <__hexnan+0x64>
 800985e:	462a      	mov	r2, r5
 8009860:	4649      	mov	r1, r9
 8009862:	4620      	mov	r0, r4
 8009864:	f7ff ffa8 	bl	80097b8 <L_shift>
 8009868:	4544      	cmp	r4, r8
 800986a:	d952      	bls.n	8009912 <__hexnan+0x10e>
 800986c:	2300      	movs	r3, #0
 800986e:	f1a4 0904 	sub.w	r9, r4, #4
 8009872:	f844 3c04 	str.w	r3, [r4, #-4]
 8009876:	461d      	mov	r5, r3
 8009878:	464c      	mov	r4, r9
 800987a:	f8cd b008 	str.w	fp, [sp, #8]
 800987e:	9903      	ldr	r1, [sp, #12]
 8009880:	e7d7      	b.n	8009832 <__hexnan+0x2e>
 8009882:	2a29      	cmp	r2, #41	@ 0x29
 8009884:	d157      	bne.n	8009936 <__hexnan+0x132>
 8009886:	3102      	adds	r1, #2
 8009888:	f8ca 1000 	str.w	r1, [sl]
 800988c:	f1bb 0f00 	cmp.w	fp, #0
 8009890:	d051      	beq.n	8009936 <__hexnan+0x132>
 8009892:	454c      	cmp	r4, r9
 8009894:	d206      	bcs.n	80098a4 <__hexnan+0xa0>
 8009896:	2d07      	cmp	r5, #7
 8009898:	dc04      	bgt.n	80098a4 <__hexnan+0xa0>
 800989a:	462a      	mov	r2, r5
 800989c:	4649      	mov	r1, r9
 800989e:	4620      	mov	r0, r4
 80098a0:	f7ff ff8a 	bl	80097b8 <L_shift>
 80098a4:	4544      	cmp	r4, r8
 80098a6:	d936      	bls.n	8009916 <__hexnan+0x112>
 80098a8:	4623      	mov	r3, r4
 80098aa:	f1a8 0204 	sub.w	r2, r8, #4
 80098ae:	f853 1b04 	ldr.w	r1, [r3], #4
 80098b2:	429f      	cmp	r7, r3
 80098b4:	f842 1f04 	str.w	r1, [r2, #4]!
 80098b8:	d2f9      	bcs.n	80098ae <__hexnan+0xaa>
 80098ba:	1b3b      	subs	r3, r7, r4
 80098bc:	f023 0303 	bic.w	r3, r3, #3
 80098c0:	3304      	adds	r3, #4
 80098c2:	3401      	adds	r4, #1
 80098c4:	3e03      	subs	r6, #3
 80098c6:	42b4      	cmp	r4, r6
 80098c8:	bf88      	it	hi
 80098ca:	2304      	movhi	r3, #4
 80098cc:	2200      	movs	r2, #0
 80098ce:	4443      	add	r3, r8
 80098d0:	f843 2b04 	str.w	r2, [r3], #4
 80098d4:	429f      	cmp	r7, r3
 80098d6:	d2fb      	bcs.n	80098d0 <__hexnan+0xcc>
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	b91b      	cbnz	r3, 80098e4 <__hexnan+0xe0>
 80098dc:	4547      	cmp	r7, r8
 80098de:	d128      	bne.n	8009932 <__hexnan+0x12e>
 80098e0:	2301      	movs	r3, #1
 80098e2:	603b      	str	r3, [r7, #0]
 80098e4:	2005      	movs	r0, #5
 80098e6:	b007      	add	sp, #28
 80098e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ec:	3501      	adds	r5, #1
 80098ee:	2d08      	cmp	r5, #8
 80098f0:	f10b 0b01 	add.w	fp, fp, #1
 80098f4:	dd06      	ble.n	8009904 <__hexnan+0x100>
 80098f6:	4544      	cmp	r4, r8
 80098f8:	d9c1      	bls.n	800987e <__hexnan+0x7a>
 80098fa:	2300      	movs	r3, #0
 80098fc:	2501      	movs	r5, #1
 80098fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009902:	3c04      	subs	r4, #4
 8009904:	6822      	ldr	r2, [r4, #0]
 8009906:	f000 000f 	and.w	r0, r0, #15
 800990a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800990e:	6020      	str	r0, [r4, #0]
 8009910:	e7b5      	b.n	800987e <__hexnan+0x7a>
 8009912:	2508      	movs	r5, #8
 8009914:	e7b3      	b.n	800987e <__hexnan+0x7a>
 8009916:	9b01      	ldr	r3, [sp, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d0dd      	beq.n	80098d8 <__hexnan+0xd4>
 800991c:	f04f 32ff 	mov.w	r2, #4294967295
 8009920:	f1c3 0320 	rsb	r3, r3, #32
 8009924:	40da      	lsrs	r2, r3
 8009926:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800992a:	4013      	ands	r3, r2
 800992c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009930:	e7d2      	b.n	80098d8 <__hexnan+0xd4>
 8009932:	3f04      	subs	r7, #4
 8009934:	e7d0      	b.n	80098d8 <__hexnan+0xd4>
 8009936:	2004      	movs	r0, #4
 8009938:	e7d5      	b.n	80098e6 <__hexnan+0xe2>

0800993a <__ascii_mbtowc>:
 800993a:	b082      	sub	sp, #8
 800993c:	b901      	cbnz	r1, 8009940 <__ascii_mbtowc+0x6>
 800993e:	a901      	add	r1, sp, #4
 8009940:	b142      	cbz	r2, 8009954 <__ascii_mbtowc+0x1a>
 8009942:	b14b      	cbz	r3, 8009958 <__ascii_mbtowc+0x1e>
 8009944:	7813      	ldrb	r3, [r2, #0]
 8009946:	600b      	str	r3, [r1, #0]
 8009948:	7812      	ldrb	r2, [r2, #0]
 800994a:	1e10      	subs	r0, r2, #0
 800994c:	bf18      	it	ne
 800994e:	2001      	movne	r0, #1
 8009950:	b002      	add	sp, #8
 8009952:	4770      	bx	lr
 8009954:	4610      	mov	r0, r2
 8009956:	e7fb      	b.n	8009950 <__ascii_mbtowc+0x16>
 8009958:	f06f 0001 	mvn.w	r0, #1
 800995c:	e7f8      	b.n	8009950 <__ascii_mbtowc+0x16>

0800995e <_realloc_r>:
 800995e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009962:	4680      	mov	r8, r0
 8009964:	4615      	mov	r5, r2
 8009966:	460c      	mov	r4, r1
 8009968:	b921      	cbnz	r1, 8009974 <_realloc_r+0x16>
 800996a:	4611      	mov	r1, r2
 800996c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009970:	f7fd be78 	b.w	8007664 <_malloc_r>
 8009974:	b92a      	cbnz	r2, 8009982 <_realloc_r+0x24>
 8009976:	f7fd fe03 	bl	8007580 <_free_r>
 800997a:	2400      	movs	r4, #0
 800997c:	4620      	mov	r0, r4
 800997e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009982:	f000 f840 	bl	8009a06 <_malloc_usable_size_r>
 8009986:	4285      	cmp	r5, r0
 8009988:	4606      	mov	r6, r0
 800998a:	d802      	bhi.n	8009992 <_realloc_r+0x34>
 800998c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009990:	d8f4      	bhi.n	800997c <_realloc_r+0x1e>
 8009992:	4629      	mov	r1, r5
 8009994:	4640      	mov	r0, r8
 8009996:	f7fd fe65 	bl	8007664 <_malloc_r>
 800999a:	4607      	mov	r7, r0
 800999c:	2800      	cmp	r0, #0
 800999e:	d0ec      	beq.n	800997a <_realloc_r+0x1c>
 80099a0:	42b5      	cmp	r5, r6
 80099a2:	462a      	mov	r2, r5
 80099a4:	4621      	mov	r1, r4
 80099a6:	bf28      	it	cs
 80099a8:	4632      	movcs	r2, r6
 80099aa:	f7ff fc47 	bl	800923c <memcpy>
 80099ae:	4621      	mov	r1, r4
 80099b0:	4640      	mov	r0, r8
 80099b2:	f7fd fde5 	bl	8007580 <_free_r>
 80099b6:	463c      	mov	r4, r7
 80099b8:	e7e0      	b.n	800997c <_realloc_r+0x1e>

080099ba <__ascii_wctomb>:
 80099ba:	4603      	mov	r3, r0
 80099bc:	4608      	mov	r0, r1
 80099be:	b141      	cbz	r1, 80099d2 <__ascii_wctomb+0x18>
 80099c0:	2aff      	cmp	r2, #255	@ 0xff
 80099c2:	d904      	bls.n	80099ce <__ascii_wctomb+0x14>
 80099c4:	228a      	movs	r2, #138	@ 0x8a
 80099c6:	f04f 30ff 	mov.w	r0, #4294967295
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	4770      	bx	lr
 80099ce:	2001      	movs	r0, #1
 80099d0:	700a      	strb	r2, [r1, #0]
 80099d2:	4770      	bx	lr

080099d4 <fiprintf>:
 80099d4:	b40e      	push	{r1, r2, r3}
 80099d6:	b503      	push	{r0, r1, lr}
 80099d8:	4601      	mov	r1, r0
 80099da:	ab03      	add	r3, sp, #12
 80099dc:	4805      	ldr	r0, [pc, #20]	@ (80099f4 <fiprintf+0x20>)
 80099de:	f853 2b04 	ldr.w	r2, [r3], #4
 80099e2:	6800      	ldr	r0, [r0, #0]
 80099e4:	9301      	str	r3, [sp, #4]
 80099e6:	f000 f83d 	bl	8009a64 <_vfiprintf_r>
 80099ea:	b002      	add	sp, #8
 80099ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80099f0:	b003      	add	sp, #12
 80099f2:	4770      	bx	lr
 80099f4:	2000001c 	.word	0x2000001c

080099f8 <abort>:
 80099f8:	2006      	movs	r0, #6
 80099fa:	b508      	push	{r3, lr}
 80099fc:	f000 fa06 	bl	8009e0c <raise>
 8009a00:	2001      	movs	r0, #1
 8009a02:	f7f7 fddc 	bl	80015be <_exit>

08009a06 <_malloc_usable_size_r>:
 8009a06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a0a:	1f18      	subs	r0, r3, #4
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	bfbc      	itt	lt
 8009a10:	580b      	ldrlt	r3, [r1, r0]
 8009a12:	18c0      	addlt	r0, r0, r3
 8009a14:	4770      	bx	lr

08009a16 <__sfputc_r>:
 8009a16:	6893      	ldr	r3, [r2, #8]
 8009a18:	b410      	push	{r4}
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	6093      	str	r3, [r2, #8]
 8009a20:	da07      	bge.n	8009a32 <__sfputc_r+0x1c>
 8009a22:	6994      	ldr	r4, [r2, #24]
 8009a24:	42a3      	cmp	r3, r4
 8009a26:	db01      	blt.n	8009a2c <__sfputc_r+0x16>
 8009a28:	290a      	cmp	r1, #10
 8009a2a:	d102      	bne.n	8009a32 <__sfputc_r+0x1c>
 8009a2c:	bc10      	pop	{r4}
 8009a2e:	f000 b931 	b.w	8009c94 <__swbuf_r>
 8009a32:	6813      	ldr	r3, [r2, #0]
 8009a34:	1c58      	adds	r0, r3, #1
 8009a36:	6010      	str	r0, [r2, #0]
 8009a38:	7019      	strb	r1, [r3, #0]
 8009a3a:	4608      	mov	r0, r1
 8009a3c:	bc10      	pop	{r4}
 8009a3e:	4770      	bx	lr

08009a40 <__sfputs_r>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	4606      	mov	r6, r0
 8009a44:	460f      	mov	r7, r1
 8009a46:	4614      	mov	r4, r2
 8009a48:	18d5      	adds	r5, r2, r3
 8009a4a:	42ac      	cmp	r4, r5
 8009a4c:	d101      	bne.n	8009a52 <__sfputs_r+0x12>
 8009a4e:	2000      	movs	r0, #0
 8009a50:	e007      	b.n	8009a62 <__sfputs_r+0x22>
 8009a52:	463a      	mov	r2, r7
 8009a54:	4630      	mov	r0, r6
 8009a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a5a:	f7ff ffdc 	bl	8009a16 <__sfputc_r>
 8009a5e:	1c43      	adds	r3, r0, #1
 8009a60:	d1f3      	bne.n	8009a4a <__sfputs_r+0xa>
 8009a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a64 <_vfiprintf_r>:
 8009a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	460d      	mov	r5, r1
 8009a6a:	4614      	mov	r4, r2
 8009a6c:	4698      	mov	r8, r3
 8009a6e:	4606      	mov	r6, r0
 8009a70:	b09d      	sub	sp, #116	@ 0x74
 8009a72:	b118      	cbz	r0, 8009a7c <_vfiprintf_r+0x18>
 8009a74:	6a03      	ldr	r3, [r0, #32]
 8009a76:	b90b      	cbnz	r3, 8009a7c <_vfiprintf_r+0x18>
 8009a78:	f7fc fe06 	bl	8006688 <__sinit>
 8009a7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a7e:	07d9      	lsls	r1, r3, #31
 8009a80:	d405      	bmi.n	8009a8e <_vfiprintf_r+0x2a>
 8009a82:	89ab      	ldrh	r3, [r5, #12]
 8009a84:	059a      	lsls	r2, r3, #22
 8009a86:	d402      	bmi.n	8009a8e <_vfiprintf_r+0x2a>
 8009a88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a8a:	f7fc ff14 	bl	80068b6 <__retarget_lock_acquire_recursive>
 8009a8e:	89ab      	ldrh	r3, [r5, #12]
 8009a90:	071b      	lsls	r3, r3, #28
 8009a92:	d501      	bpl.n	8009a98 <_vfiprintf_r+0x34>
 8009a94:	692b      	ldr	r3, [r5, #16]
 8009a96:	b99b      	cbnz	r3, 8009ac0 <_vfiprintf_r+0x5c>
 8009a98:	4629      	mov	r1, r5
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f000 f938 	bl	8009d10 <__swsetup_r>
 8009aa0:	b170      	cbz	r0, 8009ac0 <_vfiprintf_r+0x5c>
 8009aa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009aa4:	07dc      	lsls	r4, r3, #31
 8009aa6:	d504      	bpl.n	8009ab2 <_vfiprintf_r+0x4e>
 8009aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aac:	b01d      	add	sp, #116	@ 0x74
 8009aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab2:	89ab      	ldrh	r3, [r5, #12]
 8009ab4:	0598      	lsls	r0, r3, #22
 8009ab6:	d4f7      	bmi.n	8009aa8 <_vfiprintf_r+0x44>
 8009ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009aba:	f7fc fefd 	bl	80068b8 <__retarget_lock_release_recursive>
 8009abe:	e7f3      	b.n	8009aa8 <_vfiprintf_r+0x44>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ac4:	2320      	movs	r3, #32
 8009ac6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009aca:	2330      	movs	r3, #48	@ 0x30
 8009acc:	f04f 0901 	mov.w	r9, #1
 8009ad0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ad4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009c80 <_vfiprintf_r+0x21c>
 8009ad8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009adc:	4623      	mov	r3, r4
 8009ade:	469a      	mov	sl, r3
 8009ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ae4:	b10a      	cbz	r2, 8009aea <_vfiprintf_r+0x86>
 8009ae6:	2a25      	cmp	r2, #37	@ 0x25
 8009ae8:	d1f9      	bne.n	8009ade <_vfiprintf_r+0x7a>
 8009aea:	ebba 0b04 	subs.w	fp, sl, r4
 8009aee:	d00b      	beq.n	8009b08 <_vfiprintf_r+0xa4>
 8009af0:	465b      	mov	r3, fp
 8009af2:	4622      	mov	r2, r4
 8009af4:	4629      	mov	r1, r5
 8009af6:	4630      	mov	r0, r6
 8009af8:	f7ff ffa2 	bl	8009a40 <__sfputs_r>
 8009afc:	3001      	adds	r0, #1
 8009afe:	f000 80a7 	beq.w	8009c50 <_vfiprintf_r+0x1ec>
 8009b02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b04:	445a      	add	r2, fp
 8009b06:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b08:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 809f 	beq.w	8009c50 <_vfiprintf_r+0x1ec>
 8009b12:	2300      	movs	r3, #0
 8009b14:	f04f 32ff 	mov.w	r2, #4294967295
 8009b18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b1c:	f10a 0a01 	add.w	sl, sl, #1
 8009b20:	9304      	str	r3, [sp, #16]
 8009b22:	9307      	str	r3, [sp, #28]
 8009b24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b28:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b2a:	4654      	mov	r4, sl
 8009b2c:	2205      	movs	r2, #5
 8009b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b32:	4853      	ldr	r0, [pc, #332]	@ (8009c80 <_vfiprintf_r+0x21c>)
 8009b34:	f7fc fec1 	bl	80068ba <memchr>
 8009b38:	9a04      	ldr	r2, [sp, #16]
 8009b3a:	b9d8      	cbnz	r0, 8009b74 <_vfiprintf_r+0x110>
 8009b3c:	06d1      	lsls	r1, r2, #27
 8009b3e:	bf44      	itt	mi
 8009b40:	2320      	movmi	r3, #32
 8009b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b46:	0713      	lsls	r3, r2, #28
 8009b48:	bf44      	itt	mi
 8009b4a:	232b      	movmi	r3, #43	@ 0x2b
 8009b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b50:	f89a 3000 	ldrb.w	r3, [sl]
 8009b54:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b56:	d015      	beq.n	8009b84 <_vfiprintf_r+0x120>
 8009b58:	4654      	mov	r4, sl
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	f04f 0c0a 	mov.w	ip, #10
 8009b60:	9a07      	ldr	r2, [sp, #28]
 8009b62:	4621      	mov	r1, r4
 8009b64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b68:	3b30      	subs	r3, #48	@ 0x30
 8009b6a:	2b09      	cmp	r3, #9
 8009b6c:	d94b      	bls.n	8009c06 <_vfiprintf_r+0x1a2>
 8009b6e:	b1b0      	cbz	r0, 8009b9e <_vfiprintf_r+0x13a>
 8009b70:	9207      	str	r2, [sp, #28]
 8009b72:	e014      	b.n	8009b9e <_vfiprintf_r+0x13a>
 8009b74:	eba0 0308 	sub.w	r3, r0, r8
 8009b78:	fa09 f303 	lsl.w	r3, r9, r3
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	46a2      	mov	sl, r4
 8009b80:	9304      	str	r3, [sp, #16]
 8009b82:	e7d2      	b.n	8009b2a <_vfiprintf_r+0xc6>
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	1d19      	adds	r1, r3, #4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	9103      	str	r1, [sp, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bfbb      	ittet	lt
 8009b90:	425b      	neglt	r3, r3
 8009b92:	f042 0202 	orrlt.w	r2, r2, #2
 8009b96:	9307      	strge	r3, [sp, #28]
 8009b98:	9307      	strlt	r3, [sp, #28]
 8009b9a:	bfb8      	it	lt
 8009b9c:	9204      	strlt	r2, [sp, #16]
 8009b9e:	7823      	ldrb	r3, [r4, #0]
 8009ba0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ba2:	d10a      	bne.n	8009bba <_vfiprintf_r+0x156>
 8009ba4:	7863      	ldrb	r3, [r4, #1]
 8009ba6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ba8:	d132      	bne.n	8009c10 <_vfiprintf_r+0x1ac>
 8009baa:	9b03      	ldr	r3, [sp, #12]
 8009bac:	3402      	adds	r4, #2
 8009bae:	1d1a      	adds	r2, r3, #4
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	9203      	str	r2, [sp, #12]
 8009bb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bb8:	9305      	str	r3, [sp, #20]
 8009bba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009c84 <_vfiprintf_r+0x220>
 8009bbe:	2203      	movs	r2, #3
 8009bc0:	4650      	mov	r0, sl
 8009bc2:	7821      	ldrb	r1, [r4, #0]
 8009bc4:	f7fc fe79 	bl	80068ba <memchr>
 8009bc8:	b138      	cbz	r0, 8009bda <_vfiprintf_r+0x176>
 8009bca:	2240      	movs	r2, #64	@ 0x40
 8009bcc:	9b04      	ldr	r3, [sp, #16]
 8009bce:	eba0 000a 	sub.w	r0, r0, sl
 8009bd2:	4082      	lsls	r2, r0
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	3401      	adds	r4, #1
 8009bd8:	9304      	str	r3, [sp, #16]
 8009bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bde:	2206      	movs	r2, #6
 8009be0:	4829      	ldr	r0, [pc, #164]	@ (8009c88 <_vfiprintf_r+0x224>)
 8009be2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009be6:	f7fc fe68 	bl	80068ba <memchr>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d03f      	beq.n	8009c6e <_vfiprintf_r+0x20a>
 8009bee:	4b27      	ldr	r3, [pc, #156]	@ (8009c8c <_vfiprintf_r+0x228>)
 8009bf0:	bb1b      	cbnz	r3, 8009c3a <_vfiprintf_r+0x1d6>
 8009bf2:	9b03      	ldr	r3, [sp, #12]
 8009bf4:	3307      	adds	r3, #7
 8009bf6:	f023 0307 	bic.w	r3, r3, #7
 8009bfa:	3308      	adds	r3, #8
 8009bfc:	9303      	str	r3, [sp, #12]
 8009bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c00:	443b      	add	r3, r7
 8009c02:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c04:	e76a      	b.n	8009adc <_vfiprintf_r+0x78>
 8009c06:	460c      	mov	r4, r1
 8009c08:	2001      	movs	r0, #1
 8009c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c0e:	e7a8      	b.n	8009b62 <_vfiprintf_r+0xfe>
 8009c10:	2300      	movs	r3, #0
 8009c12:	f04f 0c0a 	mov.w	ip, #10
 8009c16:	4619      	mov	r1, r3
 8009c18:	3401      	adds	r4, #1
 8009c1a:	9305      	str	r3, [sp, #20]
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c22:	3a30      	subs	r2, #48	@ 0x30
 8009c24:	2a09      	cmp	r2, #9
 8009c26:	d903      	bls.n	8009c30 <_vfiprintf_r+0x1cc>
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d0c6      	beq.n	8009bba <_vfiprintf_r+0x156>
 8009c2c:	9105      	str	r1, [sp, #20]
 8009c2e:	e7c4      	b.n	8009bba <_vfiprintf_r+0x156>
 8009c30:	4604      	mov	r4, r0
 8009c32:	2301      	movs	r3, #1
 8009c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c38:	e7f0      	b.n	8009c1c <_vfiprintf_r+0x1b8>
 8009c3a:	ab03      	add	r3, sp, #12
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	462a      	mov	r2, r5
 8009c40:	4630      	mov	r0, r6
 8009c42:	4b13      	ldr	r3, [pc, #76]	@ (8009c90 <_vfiprintf_r+0x22c>)
 8009c44:	a904      	add	r1, sp, #16
 8009c46:	f7fb fec5 	bl	80059d4 <_printf_float>
 8009c4a:	4607      	mov	r7, r0
 8009c4c:	1c78      	adds	r0, r7, #1
 8009c4e:	d1d6      	bne.n	8009bfe <_vfiprintf_r+0x19a>
 8009c50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c52:	07d9      	lsls	r1, r3, #31
 8009c54:	d405      	bmi.n	8009c62 <_vfiprintf_r+0x1fe>
 8009c56:	89ab      	ldrh	r3, [r5, #12]
 8009c58:	059a      	lsls	r2, r3, #22
 8009c5a:	d402      	bmi.n	8009c62 <_vfiprintf_r+0x1fe>
 8009c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c5e:	f7fc fe2b 	bl	80068b8 <__retarget_lock_release_recursive>
 8009c62:	89ab      	ldrh	r3, [r5, #12]
 8009c64:	065b      	lsls	r3, r3, #25
 8009c66:	f53f af1f 	bmi.w	8009aa8 <_vfiprintf_r+0x44>
 8009c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c6c:	e71e      	b.n	8009aac <_vfiprintf_r+0x48>
 8009c6e:	ab03      	add	r3, sp, #12
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	462a      	mov	r2, r5
 8009c74:	4630      	mov	r0, r6
 8009c76:	4b06      	ldr	r3, [pc, #24]	@ (8009c90 <_vfiprintf_r+0x22c>)
 8009c78:	a904      	add	r1, sp, #16
 8009c7a:	f7fc f949 	bl	8005f10 <_printf_i>
 8009c7e:	e7e4      	b.n	8009c4a <_vfiprintf_r+0x1e6>
 8009c80:	0800a339 	.word	0x0800a339
 8009c84:	0800a33f 	.word	0x0800a33f
 8009c88:	0800a343 	.word	0x0800a343
 8009c8c:	080059d5 	.word	0x080059d5
 8009c90:	08009a41 	.word	0x08009a41

08009c94 <__swbuf_r>:
 8009c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c96:	460e      	mov	r6, r1
 8009c98:	4614      	mov	r4, r2
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	b118      	cbz	r0, 8009ca6 <__swbuf_r+0x12>
 8009c9e:	6a03      	ldr	r3, [r0, #32]
 8009ca0:	b90b      	cbnz	r3, 8009ca6 <__swbuf_r+0x12>
 8009ca2:	f7fc fcf1 	bl	8006688 <__sinit>
 8009ca6:	69a3      	ldr	r3, [r4, #24]
 8009ca8:	60a3      	str	r3, [r4, #8]
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	071a      	lsls	r2, r3, #28
 8009cae:	d501      	bpl.n	8009cb4 <__swbuf_r+0x20>
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	b943      	cbnz	r3, 8009cc6 <__swbuf_r+0x32>
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f000 f82a 	bl	8009d10 <__swsetup_r>
 8009cbc:	b118      	cbz	r0, 8009cc6 <__swbuf_r+0x32>
 8009cbe:	f04f 37ff 	mov.w	r7, #4294967295
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	6922      	ldr	r2, [r4, #16]
 8009cca:	b2f6      	uxtb	r6, r6
 8009ccc:	1a98      	subs	r0, r3, r2
 8009cce:	6963      	ldr	r3, [r4, #20]
 8009cd0:	4637      	mov	r7, r6
 8009cd2:	4283      	cmp	r3, r0
 8009cd4:	dc05      	bgt.n	8009ce2 <__swbuf_r+0x4e>
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	4628      	mov	r0, r5
 8009cda:	f7ff fa4b 	bl	8009174 <_fflush_r>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d1ed      	bne.n	8009cbe <__swbuf_r+0x2a>
 8009ce2:	68a3      	ldr	r3, [r4, #8]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	60a3      	str	r3, [r4, #8]
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	6022      	str	r2, [r4, #0]
 8009cee:	701e      	strb	r6, [r3, #0]
 8009cf0:	6962      	ldr	r2, [r4, #20]
 8009cf2:	1c43      	adds	r3, r0, #1
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d004      	beq.n	8009d02 <__swbuf_r+0x6e>
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	07db      	lsls	r3, r3, #31
 8009cfc:	d5e1      	bpl.n	8009cc2 <__swbuf_r+0x2e>
 8009cfe:	2e0a      	cmp	r6, #10
 8009d00:	d1df      	bne.n	8009cc2 <__swbuf_r+0x2e>
 8009d02:	4621      	mov	r1, r4
 8009d04:	4628      	mov	r0, r5
 8009d06:	f7ff fa35 	bl	8009174 <_fflush_r>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d0d9      	beq.n	8009cc2 <__swbuf_r+0x2e>
 8009d0e:	e7d6      	b.n	8009cbe <__swbuf_r+0x2a>

08009d10 <__swsetup_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4b29      	ldr	r3, [pc, #164]	@ (8009db8 <__swsetup_r+0xa8>)
 8009d14:	4605      	mov	r5, r0
 8009d16:	6818      	ldr	r0, [r3, #0]
 8009d18:	460c      	mov	r4, r1
 8009d1a:	b118      	cbz	r0, 8009d24 <__swsetup_r+0x14>
 8009d1c:	6a03      	ldr	r3, [r0, #32]
 8009d1e:	b90b      	cbnz	r3, 8009d24 <__swsetup_r+0x14>
 8009d20:	f7fc fcb2 	bl	8006688 <__sinit>
 8009d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d28:	0719      	lsls	r1, r3, #28
 8009d2a:	d422      	bmi.n	8009d72 <__swsetup_r+0x62>
 8009d2c:	06da      	lsls	r2, r3, #27
 8009d2e:	d407      	bmi.n	8009d40 <__swsetup_r+0x30>
 8009d30:	2209      	movs	r2, #9
 8009d32:	602a      	str	r2, [r5, #0]
 8009d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d38:	f04f 30ff 	mov.w	r0, #4294967295
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	e033      	b.n	8009da8 <__swsetup_r+0x98>
 8009d40:	0758      	lsls	r0, r3, #29
 8009d42:	d512      	bpl.n	8009d6a <__swsetup_r+0x5a>
 8009d44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d46:	b141      	cbz	r1, 8009d5a <__swsetup_r+0x4a>
 8009d48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d4c:	4299      	cmp	r1, r3
 8009d4e:	d002      	beq.n	8009d56 <__swsetup_r+0x46>
 8009d50:	4628      	mov	r0, r5
 8009d52:	f7fd fc15 	bl	8007580 <_free_r>
 8009d56:	2300      	movs	r3, #0
 8009d58:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d60:	81a3      	strh	r3, [r4, #12]
 8009d62:	2300      	movs	r3, #0
 8009d64:	6063      	str	r3, [r4, #4]
 8009d66:	6923      	ldr	r3, [r4, #16]
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	89a3      	ldrh	r3, [r4, #12]
 8009d6c:	f043 0308 	orr.w	r3, r3, #8
 8009d70:	81a3      	strh	r3, [r4, #12]
 8009d72:	6923      	ldr	r3, [r4, #16]
 8009d74:	b94b      	cbnz	r3, 8009d8a <__swsetup_r+0x7a>
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d80:	d003      	beq.n	8009d8a <__swsetup_r+0x7a>
 8009d82:	4621      	mov	r1, r4
 8009d84:	4628      	mov	r0, r5
 8009d86:	f000 f882 	bl	8009e8e <__smakebuf_r>
 8009d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8e:	f013 0201 	ands.w	r2, r3, #1
 8009d92:	d00a      	beq.n	8009daa <__swsetup_r+0x9a>
 8009d94:	2200      	movs	r2, #0
 8009d96:	60a2      	str	r2, [r4, #8]
 8009d98:	6962      	ldr	r2, [r4, #20]
 8009d9a:	4252      	negs	r2, r2
 8009d9c:	61a2      	str	r2, [r4, #24]
 8009d9e:	6922      	ldr	r2, [r4, #16]
 8009da0:	b942      	cbnz	r2, 8009db4 <__swsetup_r+0xa4>
 8009da2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009da6:	d1c5      	bne.n	8009d34 <__swsetup_r+0x24>
 8009da8:	bd38      	pop	{r3, r4, r5, pc}
 8009daa:	0799      	lsls	r1, r3, #30
 8009dac:	bf58      	it	pl
 8009dae:	6962      	ldrpl	r2, [r4, #20]
 8009db0:	60a2      	str	r2, [r4, #8]
 8009db2:	e7f4      	b.n	8009d9e <__swsetup_r+0x8e>
 8009db4:	2000      	movs	r0, #0
 8009db6:	e7f7      	b.n	8009da8 <__swsetup_r+0x98>
 8009db8:	2000001c 	.word	0x2000001c

08009dbc <_raise_r>:
 8009dbc:	291f      	cmp	r1, #31
 8009dbe:	b538      	push	{r3, r4, r5, lr}
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	d904      	bls.n	8009dd0 <_raise_r+0x14>
 8009dc6:	2316      	movs	r3, #22
 8009dc8:	6003      	str	r3, [r0, #0]
 8009dca:	f04f 30ff 	mov.w	r0, #4294967295
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009dd2:	b112      	cbz	r2, 8009dda <_raise_r+0x1e>
 8009dd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dd8:	b94b      	cbnz	r3, 8009dee <_raise_r+0x32>
 8009dda:	4628      	mov	r0, r5
 8009ddc:	f000 f830 	bl	8009e40 <_getpid_r>
 8009de0:	4622      	mov	r2, r4
 8009de2:	4601      	mov	r1, r0
 8009de4:	4628      	mov	r0, r5
 8009de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dea:	f000 b817 	b.w	8009e1c <_kill_r>
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d00a      	beq.n	8009e08 <_raise_r+0x4c>
 8009df2:	1c59      	adds	r1, r3, #1
 8009df4:	d103      	bne.n	8009dfe <_raise_r+0x42>
 8009df6:	2316      	movs	r3, #22
 8009df8:	6003      	str	r3, [r0, #0]
 8009dfa:	2001      	movs	r0, #1
 8009dfc:	e7e7      	b.n	8009dce <_raise_r+0x12>
 8009dfe:	2100      	movs	r1, #0
 8009e00:	4620      	mov	r0, r4
 8009e02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e06:	4798      	blx	r3
 8009e08:	2000      	movs	r0, #0
 8009e0a:	e7e0      	b.n	8009dce <_raise_r+0x12>

08009e0c <raise>:
 8009e0c:	4b02      	ldr	r3, [pc, #8]	@ (8009e18 <raise+0xc>)
 8009e0e:	4601      	mov	r1, r0
 8009e10:	6818      	ldr	r0, [r3, #0]
 8009e12:	f7ff bfd3 	b.w	8009dbc <_raise_r>
 8009e16:	bf00      	nop
 8009e18:	2000001c 	.word	0x2000001c

08009e1c <_kill_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	2300      	movs	r3, #0
 8009e20:	4d06      	ldr	r5, [pc, #24]	@ (8009e3c <_kill_r+0x20>)
 8009e22:	4604      	mov	r4, r0
 8009e24:	4608      	mov	r0, r1
 8009e26:	4611      	mov	r1, r2
 8009e28:	602b      	str	r3, [r5, #0]
 8009e2a:	f7f7 fbb8 	bl	800159e <_kill>
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	d102      	bne.n	8009e38 <_kill_r+0x1c>
 8009e32:	682b      	ldr	r3, [r5, #0]
 8009e34:	b103      	cbz	r3, 8009e38 <_kill_r+0x1c>
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	bd38      	pop	{r3, r4, r5, pc}
 8009e3a:	bf00      	nop
 8009e3c:	200003e0 	.word	0x200003e0

08009e40 <_getpid_r>:
 8009e40:	f7f7 bba6 	b.w	8001590 <_getpid>

08009e44 <__swhatbuf_r>:
 8009e44:	b570      	push	{r4, r5, r6, lr}
 8009e46:	460c      	mov	r4, r1
 8009e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4c:	4615      	mov	r5, r2
 8009e4e:	2900      	cmp	r1, #0
 8009e50:	461e      	mov	r6, r3
 8009e52:	b096      	sub	sp, #88	@ 0x58
 8009e54:	da0c      	bge.n	8009e70 <__swhatbuf_r+0x2c>
 8009e56:	89a3      	ldrh	r3, [r4, #12]
 8009e58:	2100      	movs	r1, #0
 8009e5a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e5e:	bf14      	ite	ne
 8009e60:	2340      	movne	r3, #64	@ 0x40
 8009e62:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e66:	2000      	movs	r0, #0
 8009e68:	6031      	str	r1, [r6, #0]
 8009e6a:	602b      	str	r3, [r5, #0]
 8009e6c:	b016      	add	sp, #88	@ 0x58
 8009e6e:	bd70      	pop	{r4, r5, r6, pc}
 8009e70:	466a      	mov	r2, sp
 8009e72:	f000 f849 	bl	8009f08 <_fstat_r>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	dbed      	blt.n	8009e56 <__swhatbuf_r+0x12>
 8009e7a:	9901      	ldr	r1, [sp, #4]
 8009e7c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e80:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e84:	4259      	negs	r1, r3
 8009e86:	4159      	adcs	r1, r3
 8009e88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e8c:	e7eb      	b.n	8009e66 <__swhatbuf_r+0x22>

08009e8e <__smakebuf_r>:
 8009e8e:	898b      	ldrh	r3, [r1, #12]
 8009e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e92:	079d      	lsls	r5, r3, #30
 8009e94:	4606      	mov	r6, r0
 8009e96:	460c      	mov	r4, r1
 8009e98:	d507      	bpl.n	8009eaa <__smakebuf_r+0x1c>
 8009e9a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e9e:	6023      	str	r3, [r4, #0]
 8009ea0:	6123      	str	r3, [r4, #16]
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	6163      	str	r3, [r4, #20]
 8009ea6:	b003      	add	sp, #12
 8009ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eaa:	466a      	mov	r2, sp
 8009eac:	ab01      	add	r3, sp, #4
 8009eae:	f7ff ffc9 	bl	8009e44 <__swhatbuf_r>
 8009eb2:	9f00      	ldr	r7, [sp, #0]
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	4639      	mov	r1, r7
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f7fd fbd3 	bl	8007664 <_malloc_r>
 8009ebe:	b948      	cbnz	r0, 8009ed4 <__smakebuf_r+0x46>
 8009ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ec4:	059a      	lsls	r2, r3, #22
 8009ec6:	d4ee      	bmi.n	8009ea6 <__smakebuf_r+0x18>
 8009ec8:	f023 0303 	bic.w	r3, r3, #3
 8009ecc:	f043 0302 	orr.w	r3, r3, #2
 8009ed0:	81a3      	strh	r3, [r4, #12]
 8009ed2:	e7e2      	b.n	8009e9a <__smakebuf_r+0xc>
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ede:	81a3      	strh	r3, [r4, #12]
 8009ee0:	9b01      	ldr	r3, [sp, #4]
 8009ee2:	6020      	str	r0, [r4, #0]
 8009ee4:	b15b      	cbz	r3, 8009efe <__smakebuf_r+0x70>
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eec:	f000 f81e 	bl	8009f2c <_isatty_r>
 8009ef0:	b128      	cbz	r0, 8009efe <__smakebuf_r+0x70>
 8009ef2:	89a3      	ldrh	r3, [r4, #12]
 8009ef4:	f023 0303 	bic.w	r3, r3, #3
 8009ef8:	f043 0301 	orr.w	r3, r3, #1
 8009efc:	81a3      	strh	r3, [r4, #12]
 8009efe:	89a3      	ldrh	r3, [r4, #12]
 8009f00:	431d      	orrs	r5, r3
 8009f02:	81a5      	strh	r5, [r4, #12]
 8009f04:	e7cf      	b.n	8009ea6 <__smakebuf_r+0x18>
	...

08009f08 <_fstat_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	4d06      	ldr	r5, [pc, #24]	@ (8009f28 <_fstat_r+0x20>)
 8009f0e:	4604      	mov	r4, r0
 8009f10:	4608      	mov	r0, r1
 8009f12:	4611      	mov	r1, r2
 8009f14:	602b      	str	r3, [r5, #0]
 8009f16:	f7f7 fba1 	bl	800165c <_fstat>
 8009f1a:	1c43      	adds	r3, r0, #1
 8009f1c:	d102      	bne.n	8009f24 <_fstat_r+0x1c>
 8009f1e:	682b      	ldr	r3, [r5, #0]
 8009f20:	b103      	cbz	r3, 8009f24 <_fstat_r+0x1c>
 8009f22:	6023      	str	r3, [r4, #0]
 8009f24:	bd38      	pop	{r3, r4, r5, pc}
 8009f26:	bf00      	nop
 8009f28:	200003e0 	.word	0x200003e0

08009f2c <_isatty_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	2300      	movs	r3, #0
 8009f30:	4d05      	ldr	r5, [pc, #20]	@ (8009f48 <_isatty_r+0x1c>)
 8009f32:	4604      	mov	r4, r0
 8009f34:	4608      	mov	r0, r1
 8009f36:	602b      	str	r3, [r5, #0]
 8009f38:	f7f7 fb9f 	bl	800167a <_isatty>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_isatty_r+0x1a>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_isatty_r+0x1a>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	200003e0 	.word	0x200003e0

08009f4c <_init>:
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4e:	bf00      	nop
 8009f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f52:	bc08      	pop	{r3}
 8009f54:	469e      	mov	lr, r3
 8009f56:	4770      	bx	lr

08009f58 <_fini>:
 8009f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5a:	bf00      	nop
 8009f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f5e:	bc08      	pop	{r3}
 8009f60:	469e      	mov	lr, r3
 8009f62:	4770      	bx	lr
