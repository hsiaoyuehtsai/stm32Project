
proj10_tim_external_input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  080032d0  080032d0  000042d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d8  080039d8  00005060  2**0
                  CONTENTS
  4 .ARM          00000000  080039d8  080039d8  00005060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d8  080039d8  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d8  080039d8  000049d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039dc  080039dc  000049dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080039e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  20000060  08003a40  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  08003a40  000056f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baf1  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbe  00000000  00000000  00010b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00012b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001847d  00000000  00000000  00013890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010a49  00000000  00000000  0002bd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008b19b  00000000  00000000  0003c756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000c78f1  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000a63  00000000  00000000  000c7934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ca4  00000000  00000000  000c8398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000cc03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080032b8 	.word	0x080032b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080032b8 	.word	0x080032b8

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000152:	4b0e      	ldr	r3, [pc, #56]	@ (800018c <MX_GPIO_Init+0x40>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a0d      	ldr	r2, [pc, #52]	@ (800018c <MX_GPIO_Init+0x40>)
 8000158:	f043 0304 	orr.w	r3, r3, #4
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b0b      	ldr	r3, [pc, #44]	@ (800018c <MX_GPIO_Init+0x40>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0304 	and.w	r3, r3, #4
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800016a:	4b08      	ldr	r3, [pc, #32]	@ (800018c <MX_GPIO_Init+0x40>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a07      	ldr	r2, [pc, #28]	@ (800018c <MX_GPIO_Init+0x40>)
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b05      	ldr	r3, [pc, #20]	@ (800018c <MX_GPIO_Init+0x40>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0308 	and.w	r3, r3, #8
 800017e:	603b      	str	r3, [r7, #0]
 8000180:	683b      	ldr	r3, [r7, #0]

}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	40021000 	.word	0x40021000

08000190 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000194:	4b12      	ldr	r3, [pc, #72]	@ (80001e0 <MX_I2C1_Init+0x50>)
 8000196:	4a13      	ldr	r2, [pc, #76]	@ (80001e4 <MX_I2C1_Init+0x54>)
 8000198:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800019a:	4b11      	ldr	r3, [pc, #68]	@ (80001e0 <MX_I2C1_Init+0x50>)
 800019c:	4a12      	ldr	r2, [pc, #72]	@ (80001e8 <MX_I2C1_Init+0x58>)
 800019e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001a0:	4b0f      	ldr	r3, [pc, #60]	@ (80001e0 <MX_I2C1_Init+0x50>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001a6:	4b0e      	ldr	r3, [pc, #56]	@ (80001e0 <MX_I2C1_Init+0x50>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001ac:	4b0c      	ldr	r3, [pc, #48]	@ (80001e0 <MX_I2C1_Init+0x50>)
 80001ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80001b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001b4:	4b0a      	ldr	r3, [pc, #40]	@ (80001e0 <MX_I2C1_Init+0x50>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80001ba:	4b09      	ldr	r3, [pc, #36]	@ (80001e0 <MX_I2C1_Init+0x50>)
 80001bc:	2200      	movs	r2, #0
 80001be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80001c0:	4b07      	ldr	r3, [pc, #28]	@ (80001e0 <MX_I2C1_Init+0x50>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80001c6:	4b06      	ldr	r3, [pc, #24]	@ (80001e0 <MX_I2C1_Init+0x50>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <MX_I2C1_Init+0x50>)
 80001ce:	f001 f85d 	bl	800128c <HAL_I2C_Init>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80001d8:	f000 f8cb 	bl	8000372 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	2000007c 	.word	0x2000007c
 80001e4:	40005400 	.word	0x40005400
 80001e8:	000186a0 	.word	0x000186a0

080001ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a15      	ldr	r2, [pc, #84]	@ (800025c <HAL_I2C_MspInit+0x70>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d123      	bne.n	8000254 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800020c:	4b14      	ldr	r3, [pc, #80]	@ (8000260 <HAL_I2C_MspInit+0x74>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a13      	ldr	r2, [pc, #76]	@ (8000260 <HAL_I2C_MspInit+0x74>)
 8000212:	f043 0308 	orr.w	r3, r3, #8
 8000216:	6193      	str	r3, [r2, #24]
 8000218:	4b11      	ldr	r3, [pc, #68]	@ (8000260 <HAL_I2C_MspInit+0x74>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	f003 0308 	and.w	r3, r3, #8
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000224:	23c0      	movs	r3, #192	@ 0xc0
 8000226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000228:	2312      	movs	r3, #18
 800022a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800022c:	2303      	movs	r3, #3
 800022e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	480b      	ldr	r0, [pc, #44]	@ (8000264 <HAL_I2C_MspInit+0x78>)
 8000238:	f000 fea4 	bl	8000f84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800023c:	4b08      	ldr	r3, [pc, #32]	@ (8000260 <HAL_I2C_MspInit+0x74>)
 800023e:	69db      	ldr	r3, [r3, #28]
 8000240:	4a07      	ldr	r2, [pc, #28]	@ (8000260 <HAL_I2C_MspInit+0x74>)
 8000242:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000246:	61d3      	str	r3, [r2, #28]
 8000248:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <HAL_I2C_MspInit+0x74>)
 800024a:	69db      	ldr	r3, [r3, #28]
 800024c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000250:	60bb      	str	r3, [r7, #8]
 8000252:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000254:	bf00      	nop
 8000256:	3720      	adds	r7, #32
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40005400 	.word	0x40005400
 8000260:	40021000 	.word	0x40021000
 8000264:	40010c00 	.word	0x40010c00

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b088      	sub	sp, #32
 800026c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026e:	f000 fd1f 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000272:	f000 f843 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000276:	f7ff ff69 	bl	800014c <MX_GPIO_Init>
  MX_I2C1_Init();
 800027a:	f7ff ff89 	bl	8000190 <MX_I2C1_Init>
  MX_TIM2_Init();
 800027e:	f000 fc63 	bl	8000b48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(20);
 8000282:	2014      	movs	r0, #20
 8000284:	f000 fd76 	bl	8000d74 <HAL_Delay>
  OLED_Init();
 8000288:	f000 f8a2 	bl	80003d0 <OLED_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800028c:	4817      	ldr	r0, [pc, #92]	@ (80002ec <main+0x84>)
 800028e:	f002 f8e5 	bl	800245c <HAL_TIM_Base_Start_IT>

  int counter = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]

  char message[20] = "";
 8000296:	2300      	movs	r3, #0
 8000298:	603b      	str	r3, [r7, #0]
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  OLED_NewFrame();
 80002a6:	f000 f8e9 	bl	800047c <OLED_NewFrame>

	  counter = loop * Period + __HAL_TIM_GET_COUNTER(&htim2);
 80002aa:	4b11      	ldr	r3, [pc, #68]	@ (80002f0 <main+0x88>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4613      	mov	r3, r2
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	4413      	add	r3, r2
 80002b4:	461a      	mov	r2, r3
 80002b6:	4b0d      	ldr	r3, [pc, #52]	@ (80002ec <main+0x84>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002bc:	4413      	add	r3, r2
 80002be:	617b      	str	r3, [r7, #20]
	  sprintf(message,"counter : %d",counter);
 80002c0:	463b      	mov	r3, r7
 80002c2:	697a      	ldr	r2, [r7, #20]
 80002c4:	490b      	ldr	r1, [pc, #44]	@ (80002f4 <main+0x8c>)
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 fb36 	bl	8002938 <siprintf>
	  OLED_PrintString(0, 0, message, &font16x16, OLED_COLOR_NORMAL);
 80002cc:	463a      	mov	r2, r7
 80002ce:	2300      	movs	r3, #0
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <main+0x90>)
 80002d4:	2100      	movs	r1, #0
 80002d6:	2000      	movs	r0, #0
 80002d8:	f000 faf5 	bl	80008c6 <OLED_PrintString>

	  OLED_ShowFrame();
 80002dc:	f000 f8da 	bl	8000494 <OLED_ShowFrame>

	  HAL_Delay(100);
 80002e0:	2064      	movs	r0, #100	@ 0x64
 80002e2:	f000 fd47 	bl	8000d74 <HAL_Delay>
	  OLED_NewFrame();
 80002e6:	bf00      	nop
 80002e8:	e7dd      	b.n	80002a6 <main+0x3e>
 80002ea:	bf00      	nop
 80002ec:	2000055c 	.word	0x2000055c
 80002f0:	20000000 	.word	0x20000000
 80002f4:	080032d0 	.word	0x080032d0
 80002f8:	08003968 	.word	0x08003968

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b090      	sub	sp, #64	@ 0x40
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	2228      	movs	r2, #40	@ 0x28
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fb44 	bl	8002998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800031e:	2302      	movs	r3, #2
 8000320:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000322:	2301      	movs	r3, #1
 8000324:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000326:	2310      	movs	r3, #16
 8000328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800032a:	2300      	movs	r3, #0
 800032c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	4618      	mov	r0, r3
 8000334:	f001 fc46 	bl	8001bc4 <HAL_RCC_OscConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800033e:	f000 f818 	bl	8000372 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	230f      	movs	r3, #15
 8000344:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000346:	2300      	movs	r3, #0
 8000348:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f001 feb4 	bl	80020c8 <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000366:	f000 f804 	bl	8000372 <Error_Handler>
  }
}
 800036a:	bf00      	nop
 800036c:	3740      	adds	r7, #64	@ 0x40
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000376:	b672      	cpsid	i
}
 8000378:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800037a:	bf00      	nop
 800037c:	e7fd      	b.n	800037a <Error_Handler+0x8>
	...

08000380 <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af02      	add	r7, sp, #8
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 800038c:	78fb      	ldrb	r3, [r7, #3]
 800038e:	b29b      	uxth	r3, r3
 8000390:	f04f 32ff 	mov.w	r2, #4294967295
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	217a      	movs	r1, #122	@ 0x7a
 800039a:	4803      	ldr	r0, [pc, #12]	@ (80003a8 <OLED_Send+0x28>)
 800039c:	f001 f8ba 	bl	8001514 <HAL_I2C_Master_Transmit>
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	2000007c 	.word	0x2000007c

080003ac <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 80003b6:	4a05      	ldr	r2, [pc, #20]	@ (80003cc <OLED_SendCmd+0x20>)
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 80003bc:	2102      	movs	r1, #2
 80003be:	4803      	ldr	r0, [pc, #12]	@ (80003cc <OLED_SendCmd+0x20>)
 80003c0:	f7ff ffde 	bl	8000380 <OLED_Send>
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	200004d0 	.word	0x200004d0

080003d0 <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 80003d4:	20ae      	movs	r0, #174	@ 0xae
 80003d6:	f7ff ffe9 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 80003da:	2002      	movs	r0, #2
 80003dc:	f7ff ffe6 	bl	80003ac <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 80003e0:	2010      	movs	r0, #16
 80003e2:	f7ff ffe3 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 80003e6:	2040      	movs	r0, #64	@ 0x40
 80003e8:	f7ff ffe0 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 80003ec:	20b0      	movs	r0, #176	@ 0xb0
 80003ee:	f7ff ffdd 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 80003f2:	2081      	movs	r0, #129	@ 0x81
 80003f4:	f7ff ffda 	bl	80003ac <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 80003f8:	20cf      	movs	r0, #207	@ 0xcf
 80003fa:	f7ff ffd7 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 80003fe:	20a1      	movs	r0, #161	@ 0xa1
 8000400:	f7ff ffd4 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 8000404:	20a6      	movs	r0, #166	@ 0xa6
 8000406:	f7ff ffd1 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 800040a:	20a8      	movs	r0, #168	@ 0xa8
 800040c:	f7ff ffce 	bl	80003ac <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 8000410:	203f      	movs	r0, #63	@ 0x3f
 8000412:	f7ff ffcb 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 8000416:	20ad      	movs	r0, #173	@ 0xad
 8000418:	f7ff ffc8 	bl	80003ac <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 800041c:	208b      	movs	r0, #139	@ 0x8b
 800041e:	f7ff ffc5 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 8000422:	2033      	movs	r0, #51	@ 0x33
 8000424:	f7ff ffc2 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 8000428:	20c8      	movs	r0, #200	@ 0xc8
 800042a:	f7ff ffbf 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 800042e:	20d3      	movs	r0, #211	@ 0xd3
 8000430:	f7ff ffbc 	bl	80003ac <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 8000434:	2000      	movs	r0, #0
 8000436:	f7ff ffb9 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 800043a:	20d5      	movs	r0, #213	@ 0xd5
 800043c:	f7ff ffb6 	bl	80003ac <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 8000440:	20c0      	movs	r0, #192	@ 0xc0
 8000442:	f7ff ffb3 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 8000446:	20d9      	movs	r0, #217	@ 0xd9
 8000448:	f7ff ffb0 	bl	80003ac <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 800044c:	201f      	movs	r0, #31
 800044e:	f7ff ffad 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 8000452:	20da      	movs	r0, #218	@ 0xda
 8000454:	f7ff ffaa 	bl	80003ac <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8000458:	2012      	movs	r0, #18
 800045a:	f7ff ffa7 	bl	80003ac <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 800045e:	20db      	movs	r0, #219	@ 0xdb
 8000460:	f7ff ffa4 	bl	80003ac <OLED_SendCmd>
  OLED_SendCmd(0x40);
 8000464:	2040      	movs	r0, #64	@ 0x40
 8000466:	f7ff ffa1 	bl	80003ac <OLED_SendCmd>

  OLED_NewFrame();
 800046a:	f000 f807 	bl	800047c <OLED_NewFrame>
  OLED_ShowFrame();
 800046e:	f000 f811 	bl	8000494 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8000472:	20af      	movs	r0, #175	@ 0xaf
 8000474:	f7ff ff9a 	bl	80003ac <OLED_SendCmd>
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8000480:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000484:	2100      	movs	r1, #0
 8000486:	4802      	ldr	r0, [pc, #8]	@ (8000490 <OLED_NewFrame+0x14>)
 8000488:	f002 fa86 	bl	8002998 <memset>
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	200000d0 	.word	0x200000d0

08000494 <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 800049a:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <OLED_ShowFrame+0x5c>)
 800049c:	2240      	movs	r2, #64	@ 0x40
 800049e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80004a0:	2300      	movs	r3, #0
 80004a2:	71fb      	strb	r3, [r7, #7]
 80004a4:	e01b      	b.n	80004de <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	3b50      	subs	r3, #80	@ 0x50
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff ff7d 	bl	80003ac <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 80004b2:	2002      	movs	r0, #2
 80004b4:	f7ff ff7a 	bl	80003ac <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 80004b8:	2010      	movs	r0, #16
 80004ba:	f7ff ff77 	bl	80003ac <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 80004be:	480d      	ldr	r0, [pc, #52]	@ (80004f4 <OLED_ShowFrame+0x60>)
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	01db      	lsls	r3, r3, #7
 80004c4:	4a0c      	ldr	r2, [pc, #48]	@ (80004f8 <OLED_ShowFrame+0x64>)
 80004c6:	4413      	add	r3, r2
 80004c8:	2280      	movs	r2, #128	@ 0x80
 80004ca:	4619      	mov	r1, r3
 80004cc:	f002 fa98 	bl	8002a00 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 80004d0:	2181      	movs	r1, #129	@ 0x81
 80004d2:	4807      	ldr	r0, [pc, #28]	@ (80004f0 <OLED_ShowFrame+0x5c>)
 80004d4:	f7ff ff54 	bl	8000380 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	3301      	adds	r3, #1
 80004dc:	71fb      	strb	r3, [r7, #7]
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b07      	cmp	r3, #7
 80004e2:	d9e0      	bls.n	80004a6 <OLED_ShowFrame+0x12>
  }
}
 80004e4:	bf00      	nop
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	200004d4 	.word	0x200004d4
 80004f4:	200004d5 	.word	0x200004d5
 80004f8:	200000d0 	.word	0x200000d0

080004fc <OLED_SetByte_Fine>:
 * @param color 颜色
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color) {
 80004fc:	b490      	push	{r4, r7}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4604      	mov	r4, r0
 8000504:	4608      	mov	r0, r1
 8000506:	4611      	mov	r1, r2
 8000508:	461a      	mov	r2, r3
 800050a:	4623      	mov	r3, r4
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	4603      	mov	r3, r0
 8000510:	71bb      	strb	r3, [r7, #6]
 8000512:	460b      	mov	r3, r1
 8000514:	717b      	strb	r3, [r7, #5]
 8000516:	4613      	mov	r3, r2
 8000518:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b07      	cmp	r3, #7
 800051e:	d860      	bhi.n	80005e2 <OLED_SetByte_Fine+0xe6>
 8000520:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000524:	2b00      	cmp	r3, #0
 8000526:	db5c      	blt.n	80005e2 <OLED_SetByte_Fine+0xe6>
  if (color) data = ~data;
 8000528:	7d3b      	ldrb	r3, [r7, #20]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <OLED_SetByte_Fine+0x38>
 800052e:	797b      	ldrb	r3, [r7, #5]
 8000530:	43db      	mvns	r3, r3
 8000532:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8000534:	7c3b      	ldrb	r3, [r7, #16]
 8000536:	3301      	adds	r3, #1
 8000538:	22ff      	movs	r2, #255	@ 0xff
 800053a:	fa02 f303 	lsl.w	r3, r2, r3
 800053e:	b25a      	sxtb	r2, r3
 8000540:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000544:	4313      	orrs	r3, r2
 8000546:	b25a      	sxtb	r2, r3
 8000548:	793b      	ldrb	r3, [r7, #4]
 800054a:	f1c3 0308 	rsb	r3, r3, #8
 800054e:	21ff      	movs	r1, #255	@ 0xff
 8000550:	fa41 f303 	asr.w	r3, r1, r3
 8000554:	b25b      	sxtb	r3, r3
 8000556:	4313      	orrs	r3, r2
 8000558:	b25b      	sxtb	r3, r3
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b23      	ldr	r3, [pc, #140]	@ (80005ec <OLED_SetByte_Fine+0xf0>)
 800055e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8000560:	79fa      	ldrb	r2, [r7, #7]
 8000562:	79bb      	ldrb	r3, [r7, #6]
 8000564:	4922      	ldr	r1, [pc, #136]	@ (80005f0 <OLED_SetByte_Fine+0xf4>)
 8000566:	01d2      	lsls	r2, r2, #7
 8000568:	440a      	add	r2, r1
 800056a:	4413      	add	r3, r2
 800056c:	7818      	ldrb	r0, [r3, #0]
 800056e:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <OLED_SetByte_Fine+0xf0>)
 8000570:	7819      	ldrb	r1, [r3, #0]
 8000572:	79fa      	ldrb	r2, [r7, #7]
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	4001      	ands	r1, r0
 8000578:	b2c8      	uxtb	r0, r1
 800057a:	491d      	ldr	r1, [pc, #116]	@ (80005f0 <OLED_SetByte_Fine+0xf4>)
 800057c:	01d2      	lsls	r2, r2, #7
 800057e:	440a      	add	r2, r1
 8000580:	4413      	add	r3, r2
 8000582:	4602      	mov	r2, r0
 8000584:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8000586:	7c3b      	ldrb	r3, [r7, #16]
 8000588:	3301      	adds	r3, #1
 800058a:	22ff      	movs	r2, #255	@ 0xff
 800058c:	fa02 f303 	lsl.w	r3, r2, r3
 8000590:	b25b      	sxtb	r3, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	b25a      	sxtb	r2, r3
 8000596:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800059a:	4013      	ands	r3, r2
 800059c:	b25a      	sxtb	r2, r3
 800059e:	793b      	ldrb	r3, [r7, #4]
 80005a0:	f1c3 0308 	rsb	r3, r3, #8
 80005a4:	21ff      	movs	r1, #255	@ 0xff
 80005a6:	fa41 f303 	asr.w	r3, r1, r3
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	43db      	mvns	r3, r3
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	4013      	ands	r3, r2
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b0d      	ldr	r3, [pc, #52]	@ (80005ec <OLED_SetByte_Fine+0xf0>)
 80005b8:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 80005ba:	79fa      	ldrb	r2, [r7, #7]
 80005bc:	79bb      	ldrb	r3, [r7, #6]
 80005be:	490c      	ldr	r1, [pc, #48]	@ (80005f0 <OLED_SetByte_Fine+0xf4>)
 80005c0:	01d2      	lsls	r2, r2, #7
 80005c2:	440a      	add	r2, r1
 80005c4:	4413      	add	r3, r2
 80005c6:	7818      	ldrb	r0, [r3, #0]
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <OLED_SetByte_Fine+0xf0>)
 80005ca:	7819      	ldrb	r1, [r3, #0]
 80005cc:	79fa      	ldrb	r2, [r7, #7]
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	4301      	orrs	r1, r0
 80005d2:	b2c8      	uxtb	r0, r1
 80005d4:	4906      	ldr	r1, [pc, #24]	@ (80005f0 <OLED_SetByte_Fine+0xf4>)
 80005d6:	01d2      	lsls	r2, r2, #7
 80005d8:	440a      	add	r2, r1
 80005da:	4413      	add	r3, r2
 80005dc:	4602      	mov	r2, r0
 80005de:	701a      	strb	r2, [r3, #0]
 80005e0:	e000      	b.n	80005e4 <OLED_SetByte_Fine+0xe8>
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 80005e2:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc90      	pop	{r4, r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000555 	.word	0x20000555
 80005f0:	200000d0 	.word	0x200000d0

080005f4 <OLED_SetBits_Fine>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color) {
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	4604      	mov	r4, r0
 80005fc:	4608      	mov	r0, r1
 80005fe:	4611      	mov	r1, r2
 8000600:	461a      	mov	r2, r3
 8000602:	4623      	mov	r3, r4
 8000604:	71fb      	strb	r3, [r7, #7]
 8000606:	4603      	mov	r3, r0
 8000608:	71bb      	strb	r3, [r7, #6]
 800060a:	460b      	mov	r3, r1
 800060c:	717b      	strb	r3, [r7, #5]
 800060e:	4613      	mov	r3, r2
 8000610:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	08db      	lsrs	r3, r3, #3
 8000616:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000618:	79bb      	ldrb	r3, [r7, #6]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8) {
 8000620:	7bba      	ldrb	r2, [r7, #14]
 8000622:	793b      	ldrb	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	2b08      	cmp	r3, #8
 8000628:	dd29      	ble.n	800067e <OLED_SetBits_Fine+0x8a>
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800062a:	797a      	ldrb	r2, [r7, #5]
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	b2da      	uxtb	r2, r3
 8000634:	7bbc      	ldrb	r4, [r7, #14]
 8000636:	79f9      	ldrb	r1, [r7, #7]
 8000638:	7bf8      	ldrb	r0, [r7, #15]
 800063a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2307      	movs	r3, #7
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	4623      	mov	r3, r4
 8000646:	f7ff ff59 	bl	80004fc <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	3301      	adds	r3, #1
 800064e:	b2d8      	uxtb	r0, r3
 8000650:	797a      	ldrb	r2, [r7, #5]
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	f1c3 0308 	rsb	r3, r3, #8
 8000658:	fa42 f303 	asr.w	r3, r2, r3
 800065c:	b2dc      	uxtb	r4, r3
 800065e:	793a      	ldrb	r2, [r7, #4]
 8000660:	7bbb      	ldrb	r3, [r7, #14]
 8000662:	4413      	add	r3, r2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	3b09      	subs	r3, #9
 8000668:	b2db      	uxtb	r3, r3
 800066a:	79f9      	ldrb	r1, [r7, #7]
 800066c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000670:	9201      	str	r2, [sp, #4]
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2300      	movs	r3, #0
 8000676:	4622      	mov	r2, r4
 8000678:	f7ff ff40 	bl	80004fc <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 800067c:	e015      	b.n	80006aa <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 800067e:	797a      	ldrb	r2, [r7, #5]
 8000680:	7bbb      	ldrb	r3, [r7, #14]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	b2dc      	uxtb	r4, r3
 8000688:	7bba      	ldrb	r2, [r7, #14]
 800068a:	793b      	ldrb	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	b2db      	uxtb	r3, r3
 8000690:	3b01      	subs	r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	7bbd      	ldrb	r5, [r7, #14]
 8000696:	79f9      	ldrb	r1, [r7, #7]
 8000698:	7bf8      	ldrb	r0, [r7, #15]
 800069a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800069e:	9201      	str	r2, [sp, #4]
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	462b      	mov	r3, r5
 80006a4:	4622      	mov	r2, r4
 80006a6:	f7ff ff29 	bl	80004fc <OLED_SetByte_Fine>
}
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bdb0      	pop	{r4, r5, r7, pc}

080006b2 <OLED_SetBits>:
 * @param data 数据
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color) {
 80006b2:	b590      	push	{r4, r7, lr}
 80006b4:	b087      	sub	sp, #28
 80006b6:	af02      	add	r7, sp, #8
 80006b8:	4604      	mov	r4, r0
 80006ba:	4608      	mov	r0, r1
 80006bc:	4611      	mov	r1, r2
 80006be:	461a      	mov	r2, r3
 80006c0:	4623      	mov	r3, r4
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	4603      	mov	r3, r0
 80006c6:	71bb      	strb	r3, [r7, #6]
 80006c8:	460b      	mov	r3, r1
 80006ca:	717b      	strb	r3, [r7, #5]
 80006cc:	4613      	mov	r3, r2
 80006ce:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	08db      	lsrs	r3, r3, #3
 80006d4:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	f003 0307 	and.w	r3, r3, #7
 80006dc:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80006de:	797a      	ldrb	r2, [r7, #5]
 80006e0:	7bbb      	ldrb	r3, [r7, #14]
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	7bbc      	ldrb	r4, [r7, #14]
 80006ea:	79f9      	ldrb	r1, [r7, #7]
 80006ec:	7bf8      	ldrb	r0, [r7, #15]
 80006ee:	793b      	ldrb	r3, [r7, #4]
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	2307      	movs	r3, #7
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	4623      	mov	r3, r4
 80006f8:	f7ff ff00 	bl	80004fc <OLED_SetByte_Fine>
  if (bit) {
 80006fc:	7bbb      	ldrb	r3, [r7, #14]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d014      	beq.n	800072c <OLED_SetBits+0x7a>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	3301      	adds	r3, #1
 8000706:	b2d8      	uxtb	r0, r3
 8000708:	797a      	ldrb	r2, [r7, #5]
 800070a:	7bbb      	ldrb	r3, [r7, #14]
 800070c:	f1c3 0308 	rsb	r3, r3, #8
 8000710:	fa42 f303 	asr.w	r3, r2, r3
 8000714:	b2dc      	uxtb	r4, r3
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	3b01      	subs	r3, #1
 800071a:	b2db      	uxtb	r3, r3
 800071c:	79f9      	ldrb	r1, [r7, #7]
 800071e:	793a      	ldrb	r2, [r7, #4]
 8000720:	9201      	str	r2, [sp, #4]
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2300      	movs	r3, #0
 8000726:	4622      	mov	r2, r4
 8000728:	f7ff fee8 	bl	80004fc <OLED_SetByte_Fine>
  }
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	bd90      	pop	{r4, r7, pc}

08000734 <OLED_SetBlock>:
 * @param h 高度
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color) {
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b087      	sub	sp, #28
 8000738:	af02      	add	r7, sp, #8
 800073a:	603a      	str	r2, [r7, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
 8000742:	460b      	mov	r3, r1
 8000744:	71bb      	strb	r3, [r7, #6]
 8000746:	4613      	mov	r3, r2
 8000748:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 800074a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800074e:	08db      	lsrs	r3, r3, #3
 8000750:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8000752:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++) {
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	e025      	b.n	80007ae <OLED_SetBlock+0x7a>
    for (uint8_t j = 0; j < fullRow; j++) {
 8000762:	2300      	movs	r3, #0
 8000764:	73bb      	strb	r3, [r7, #14]
 8000766:	e01b      	b.n	80007a0 <OLED_SetBlock+0x6c>
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	4413      	add	r3, r2
 800076e:	b2d8      	uxtb	r0, r3
 8000770:	7bbb      	ldrb	r3, [r7, #14]
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	b2da      	uxtb	r2, r3
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	4413      	add	r3, r2
 800077a:	b2dc      	uxtb	r4, r3
 800077c:	7bfa      	ldrb	r2, [r7, #15]
 800077e:	7bbb      	ldrb	r3, [r7, #14]
 8000780:	7979      	ldrb	r1, [r7, #5]
 8000782:	fb01 f303 	mul.w	r3, r1, r3
 8000786:	4413      	add	r3, r2
 8000788:	461a      	mov	r2, r3
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	4413      	add	r3, r2
 800078e:	781a      	ldrb	r2, [r3, #0]
 8000790:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000794:	4621      	mov	r1, r4
 8000796:	f7ff ff8c 	bl	80006b2 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++) {
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	3301      	adds	r3, #1
 800079e:	73bb      	strb	r3, [r7, #14]
 80007a0:	7bba      	ldrb	r2, [r7, #14]
 80007a2:	7b3b      	ldrb	r3, [r7, #12]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d3df      	bcc.n	8000768 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++) {
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	3301      	adds	r3, #1
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	797b      	ldrb	r3, [r7, #5]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d3d5      	bcc.n	8000762 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit) {
 80007b6:	7afb      	ldrb	r3, [r7, #11]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d028      	beq.n	800080e <OLED_SetBlock+0xda>
    uint16_t fullNum = w * fullRow; // 完整的字节数
 80007bc:	797b      	ldrb	r3, [r7, #5]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	7b3a      	ldrb	r2, [r7, #12]
 80007c2:	b292      	uxth	r2, r2
 80007c4:	fb02 f303 	mul.w	r3, r2, r3
 80007c8:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	737b      	strb	r3, [r7, #13]
 80007ce:	e01a      	b.n	8000806 <OLED_SetBlock+0xd2>
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 80007d0:	79fa      	ldrb	r2, [r7, #7]
 80007d2:	7b7b      	ldrb	r3, [r7, #13]
 80007d4:	4413      	add	r3, r2
 80007d6:	b2d8      	uxtb	r0, r3
 80007d8:	7b3b      	ldrb	r3, [r7, #12]
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	79bb      	ldrb	r3, [r7, #6]
 80007e0:	4413      	add	r3, r2
 80007e2:	b2d9      	uxtb	r1, r3
 80007e4:	893a      	ldrh	r2, [r7, #8]
 80007e6:	7b7b      	ldrb	r3, [r7, #13]
 80007e8:	4413      	add	r3, r2
 80007ea:	461a      	mov	r2, r3
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	7afc      	ldrb	r4, [r7, #11]
 80007f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	4623      	mov	r3, r4
 80007fc:	f7ff fefa 	bl	80005f4 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++) {
 8000800:	7b7b      	ldrb	r3, [r7, #13]
 8000802:	3301      	adds	r3, #1
 8000804:	737b      	strb	r3, [r7, #13]
 8000806:	7b7a      	ldrb	r2, [r7, #13]
 8000808:	797b      	ldrb	r3, [r7, #5]
 800080a:	429a      	cmp	r2, r3
 800080c:	d3e0      	bcc.n	80007d0 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bd90      	pop	{r4, r7, pc}

08000816 <OLED_PrintASCIIChar>:
 * @param y 起始点纵坐标
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color) {
 8000816:	b5b0      	push	{r4, r5, r7, lr}
 8000818:	b084      	sub	sp, #16
 800081a:	af02      	add	r7, sp, #8
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
 8000822:	460b      	mov	r3, r1
 8000824:	71bb      	strb	r3, [r7, #6]
 8000826:	4613      	mov	r3, r2
 8000828:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	797b      	ldrb	r3, [r7, #5]
 8000830:	f1a3 0120 	sub.w	r1, r3, #32
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	3307      	adds	r3, #7
 800083a:	2b00      	cmp	r3, #0
 800083c:	da00      	bge.n	8000840 <OLED_PrintASCIIChar+0x2a>
 800083e:	3307      	adds	r3, #7
 8000840:	10db      	asrs	r3, r3, #3
 8000842:	4618      	mov	r0, r3
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	785b      	ldrb	r3, [r3, #1]
 8000848:	fb00 f303 	mul.w	r3, r0, r3
 800084c:	fb01 f303 	mul.w	r3, r1, r3
 8000850:	18d4      	adds	r4, r2, r3
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	785d      	ldrb	r5, [r3, #1]
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	79b9      	ldrb	r1, [r7, #6]
 800085c:	79f8      	ldrb	r0, [r7, #7]
 800085e:	7e3a      	ldrb	r2, [r7, #24]
 8000860:	9201      	str	r2, [sp, #4]
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	462b      	mov	r3, r5
 8000866:	4622      	mov	r2, r4
 8000868:	f7ff ff64 	bl	8000734 <OLED_SetBlock>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bdb0      	pop	{r4, r5, r7, pc}

08000874 <_OLED_GetUTF8Len>:
}

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string) {
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b25b      	sxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	db01      	blt.n	800088a <_OLED_GetUTF8Len+0x16>
    return 1;
 8000886:	2301      	movs	r3, #1
 8000888:	e018      	b.n	80008bc <_OLED_GetUTF8Len+0x48>
  } else if ((string[0] & 0xE0) == 0xC0) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000892:	2bc0      	cmp	r3, #192	@ 0xc0
 8000894:	d101      	bne.n	800089a <_OLED_GetUTF8Len+0x26>
    return 2;
 8000896:	2302      	movs	r3, #2
 8000898:	e010      	b.n	80008bc <_OLED_GetUTF8Len+0x48>
  } else if ((string[0] & 0xF0) == 0xE0) {
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80008a2:	2be0      	cmp	r3, #224	@ 0xe0
 80008a4:	d101      	bne.n	80008aa <_OLED_GetUTF8Len+0x36>
    return 3;
 80008a6:	2303      	movs	r3, #3
 80008a8:	e008      	b.n	80008bc <_OLED_GetUTF8Len+0x48>
  } else if ((string[0] & 0xF8) == 0xF0) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80008b2:	2bf0      	cmp	r3, #240	@ 0xf0
 80008b4:	d101      	bne.n	80008ba <_OLED_GetUTF8Len+0x46>
    return 4;
 80008b6:	2304      	movs	r3, #4
 80008b8:	e000      	b.n	80008bc <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <OLED_PrintString>:
 *
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color) {
 80008c6:	b5b0      	push	{r4, r5, r7, lr}
 80008c8:	b08a      	sub	sp, #40	@ 0x28
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	60ba      	str	r2, [r7, #8]
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	4603      	mov	r3, r0
 80008d2:	73fb      	strb	r3, [r7, #15]
 80008d4:	460b      	mov	r3, r1
 80008d6:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 80008d8:	2300      	movs	r3, #0
 80008da:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	3307      	adds	r3, #7
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	da00      	bge.n	80008e8 <OLED_PrintString+0x22>
 80008e6:	3307      	adds	r3, #7
 80008e8:	10db      	asrs	r3, r3, #3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	7852      	ldrb	r2, [r2, #1]
 80008f0:	fb02 f303 	mul.w	r3, r2, r3
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	3304      	adds	r3, #4
 80008f8:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i]) {
 80008fa:	e07d      	b.n	80009f8 <OLED_PrintString+0x132>
    found = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8000900:	8bfb      	ldrh	r3, [r7, #30]
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	4413      	add	r3, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ffb4 	bl	8000874 <_OLED_GetUTF8Len>
 800090c:	4603      	mov	r3, r0
 800090e:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0) break; // 有问题的UTF-8编码
 8000910:	7ebb      	ldrb	r3, [r7, #26]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d078      	beq.n	8000a08 <OLED_PrintString+0x142>

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++) {
 8000916:	2300      	movs	r3, #0
 8000918:	773b      	strb	r3, [r7, #28]
 800091a:	e032      	b.n	8000982 <OLED_PrintString+0xbc>
      head = (uint8_t *)(font->chars) + (j * oneLen);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	7f3a      	ldrb	r2, [r7, #28]
 8000922:	7ef9      	ldrb	r1, [r7, #27]
 8000924:	fb01 f202 	mul.w	r2, r1, r2
 8000928:	4413      	add	r3, r2
 800092a:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0) {
 800092c:	8bfb      	ldrh	r3, [r7, #30]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	4413      	add	r3, r2
 8000932:	7eba      	ldrb	r2, [r7, #26]
 8000934:	6979      	ldr	r1, [r7, #20]
 8000936:	4618      	mov	r0, r3
 8000938:	f002 f81e 	bl	8002978 <memcmp>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d11c      	bne.n	800097c <OLED_PrintString+0xb6>
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	1d1c      	adds	r4, r3, #4
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	785d      	ldrb	r5, [r3, #1]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	7bb9      	ldrb	r1, [r7, #14]
 8000950:	7bf8      	ldrb	r0, [r7, #15]
 8000952:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000956:	9201      	str	r2, [sp, #4]
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	462b      	mov	r3, r5
 800095c:	4622      	mov	r2, r4
 800095e:	f7ff fee9 	bl	8000734 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	785a      	ldrb	r2, [r3, #1]
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	4413      	add	r3, r2
 800096a:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800096c:	7ebb      	ldrb	r3, [r7, #26]
 800096e:	b29a      	uxth	r2, r3
 8000970:	8bfb      	ldrh	r3, [r7, #30]
 8000972:	4413      	add	r3, r2
 8000974:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8000976:	2301      	movs	r3, #1
 8000978:	777b      	strb	r3, [r7, #29]
        break;
 800097a:	e007      	b.n	800098c <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++) {
 800097c:	7f3b      	ldrb	r3, [r7, #28]
 800097e:	3301      	adds	r3, #1
 8000980:	773b      	strb	r3, [r7, #28]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7a1b      	ldrb	r3, [r3, #8]
 8000986:	7f3a      	ldrb	r2, [r7, #28]
 8000988:	429a      	cmp	r2, r3
 800098a:	d3c7      	bcc.n	800091c <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0) {
 800098c:	7f7b      	ldrb	r3, [r7, #29]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d132      	bne.n	80009f8 <OLED_PrintString+0x132>
      if (utf8Len == 1) {
 8000992:	7ebb      	ldrb	r3, [r7, #26]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d119      	bne.n	80009cc <OLED_PrintString+0x106>
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8000998:	8bfb      	ldrh	r3, [r7, #30]
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	4413      	add	r3, r2
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	68dc      	ldr	r4, [r3, #12]
 80009a4:	7bb9      	ldrb	r1, [r7, #14]
 80009a6:	7bf8      	ldrb	r0, [r7, #15]
 80009a8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	4623      	mov	r3, r4
 80009b0:	f7ff ff31 	bl	8000816 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	785a      	ldrb	r2, [r3, #1]
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	4413      	add	r3, r2
 80009be:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80009c0:	7ebb      	ldrb	r3, [r7, #26]
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	8bfb      	ldrh	r3, [r7, #30]
 80009c6:	4413      	add	r3, r2
 80009c8:	83fb      	strh	r3, [r7, #30]
 80009ca:	e015      	b.n	80009f8 <OLED_PrintString+0x132>
      } else {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	7bb9      	ldrb	r1, [r7, #14]
 80009d2:	7bf8      	ldrb	r0, [r7, #15]
 80009d4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	4613      	mov	r3, r2
 80009dc:	2220      	movs	r2, #32
 80009de:	f7ff ff1a 	bl	8000816 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	785a      	ldrb	r2, [r3, #1]
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	4413      	add	r3, r2
 80009ec:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80009ee:	7ebb      	ldrb	r3, [r7, #26]
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	8bfb      	ldrh	r3, [r7, #30]
 80009f4:	4413      	add	r3, r2
 80009f6:	83fb      	strh	r3, [r7, #30]
  while (str[i]) {
 80009f8:	8bfb      	ldrh	r3, [r7, #30]
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	f47f af7b 	bne.w	80008fc <OLED_PrintString+0x36>
      }
    }
  }
}
 8000a06:	e000      	b.n	8000a0a <OLED_PrintString+0x144>
    if (utf8Len == 0) break; // 有问题的UTF-8编码
 8000a08:	bf00      	nop
}
 8000a0a:	bf00      	nop
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <HAL_MspInit+0x5c>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a14      	ldr	r2, [pc, #80]	@ (8000a70 <HAL_MspInit+0x5c>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6193      	str	r3, [r2, #24]
 8000a26:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <HAL_MspInit+0x5c>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <HAL_MspInit+0x5c>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	4a0e      	ldr	r2, [pc, #56]	@ (8000a70 <HAL_MspInit+0x5c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	61d3      	str	r3, [r2, #28]
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <HAL_MspInit+0x5c>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <HAL_MspInit+0x60>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <HAL_MspInit+0x60>)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010000 	.word	0x40010000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MemManage_Handler+0x4>

08000a90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <UsageFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f938 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad8:	4a14      	ldr	r2, [pc, #80]	@ (8000b2c <_sbrk+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <_sbrk+0x60>)
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aec:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <_sbrk+0x64>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	@ (8000b38 <_sbrk+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d207      	bcs.n	8000b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b00:	f001 ff52 	bl	80029a8 <__errno>
 8000b04:	4603      	mov	r3, r0
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b07      	ldr	r3, [pc, #28]	@ (8000b34 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <_sbrk+0x64>)
 8000b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20005000 	.word	0x20005000
 8000b30:	00000400 	.word	0x00000400
 8000b34:	20000558 	.word	0x20000558
 8000b38:	200006f0 	.word	0x200006f0

08000b3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b66:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <MX_TIM2_Init+0xa0>)
 8000b68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <MX_TIM2_Init+0xa0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <MX_TIM2_Init+0xa0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <MX_TIM2_Init+0xa0>)
 8000b7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <MX_TIM2_Init+0xa0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <MX_TIM2_Init+0xa0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8e:	4816      	ldr	r0, [pc, #88]	@ (8000be8 <MX_TIM2_Init+0xa0>)
 8000b90:	f001 fc14 	bl	80023bc <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b9a:	f7ff fbea 	bl	8000372 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000ba2:	2350      	movs	r3, #80	@ 0x50
 8000ba4:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 15;
 8000baa:	230f      	movs	r3, #15
 8000bac:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <MX_TIM2_Init+0xa0>)
 8000bb6:	f001 fca3 	bl	8002500 <HAL_TIM_SlaveConfigSynchro>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000bc0:	f7ff fbd7 	bl	8000372 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_TIM2_Init+0xa0>)
 8000bd2:	f001 fe53 	bl	800287c <HAL_TIMEx_MasterConfigSynchronization>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000bdc:	f7ff fbc9 	bl	8000372 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	3720      	adds	r7, #32
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000055c 	.word	0x2000055c

08000bec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c0a:	d123      	bne.n	8000c54 <HAL_TIM_Base_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <HAL_TIM_Base_MspInit+0x70>)
 8000c0e:	69db      	ldr	r3, [r3, #28]
 8000c10:	4a12      	ldr	r2, [pc, #72]	@ (8000c5c <HAL_TIM_Base_MspInit+0x70>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	61d3      	str	r3, [r2, #28]
 8000c18:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <HAL_TIM_Base_MspInit+0x70>)
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <HAL_TIM_Base_MspInit+0x70>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a0c      	ldr	r2, [pc, #48]	@ (8000c5c <HAL_TIM_Base_MspInit+0x70>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_TIM_Base_MspInit+0x70>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <HAL_TIM_Base_MspInit+0x74>)
 8000c50:	f000 f998 	bl	8000f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010800 	.word	0x40010800

08000c64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c64:	f7ff ff6a 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c68:	480b      	ldr	r0, [pc, #44]	@ (8000c98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c6a:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c80:	4c09      	ldr	r4, [pc, #36]	@ (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f001 fe91 	bl	80029b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c92:	f7ff fae9 	bl	8000268 <main>
  bx lr
 8000c96:	4770      	bx	lr
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ca0:	080039e0 	.word	0x080039e0
  ldr r2, =_sbss
 8000ca4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ca8:	200006f0 	.word	0x200006f0

08000cac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_2_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <HAL_Init+0x28>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <HAL_Init+0x28>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f92b 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fea2 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f935 	bl	8000f6a <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f90b 	bl	8000f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	@ (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000004 	.word	0x20000004
 8000d34:	2000000c 	.word	0x2000000c
 8000d38:	20000008 	.word	0x20000008

08000d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <HAL_IncTick+0x1c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <HAL_IncTick+0x20>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a03      	ldr	r2, [pc, #12]	@ (8000d5c <HAL_IncTick+0x20>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	2000000c 	.word	0x2000000c
 8000d5c:	200005a4 	.word	0x200005a4

08000d60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b02      	ldr	r3, [pc, #8]	@ (8000d70 <HAL_GetTick+0x10>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	200005a4 	.word	0x200005a4

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff fff0 	bl	8000d60 <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d005      	beq.n	8000d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <HAL_Delay+0x44>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9a:	bf00      	nop
 8000d9c:	f7ff ffe0 	bl	8000d60 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f7      	bhi.n	8000d9c <HAL_Delay+0x28>
  {
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000000c 	.word	0x2000000c

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	@ (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	@ (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	@ 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	@ 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee8:	d301      	bcc.n	8000eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <SysTick_Config+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f7ff ff90 	bl	8000e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <SysTick_Config+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <SysTick_Config+0x40>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff49 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f44:	f7ff ff5e 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6978      	ldr	r0, [r7, #20]
 8000f50:	f7ff ff90 	bl	8000e74 <NVIC_EncodePriority>
 8000f54:	4602      	mov	r2, r0
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff5f 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ffb0 	bl	8000ed8 <SysTick_Config>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b08b      	sub	sp, #44	@ 0x2c
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f96:	e169      	b.n	800126c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	f040 8158 	bne.w	8001266 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	4a9a      	ldr	r2, [pc, #616]	@ (8001224 <HAL_GPIO_Init+0x2a0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d05e      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fc0:	4a98      	ldr	r2, [pc, #608]	@ (8001224 <HAL_GPIO_Init+0x2a0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d875      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fc6:	4a98      	ldr	r2, [pc, #608]	@ (8001228 <HAL_GPIO_Init+0x2a4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d058      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fcc:	4a96      	ldr	r2, [pc, #600]	@ (8001228 <HAL_GPIO_Init+0x2a4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d86f      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fd2:	4a96      	ldr	r2, [pc, #600]	@ (800122c <HAL_GPIO_Init+0x2a8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d052      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fd8:	4a94      	ldr	r2, [pc, #592]	@ (800122c <HAL_GPIO_Init+0x2a8>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d869      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fde:	4a94      	ldr	r2, [pc, #592]	@ (8001230 <HAL_GPIO_Init+0x2ac>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d04c      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fe4:	4a92      	ldr	r2, [pc, #584]	@ (8001230 <HAL_GPIO_Init+0x2ac>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d863      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fea:	4a92      	ldr	r2, [pc, #584]	@ (8001234 <HAL_GPIO_Init+0x2b0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d046      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000ff0:	4a90      	ldr	r2, [pc, #576]	@ (8001234 <HAL_GPIO_Init+0x2b0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d85d      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000ff6:	2b12      	cmp	r3, #18
 8000ff8:	d82a      	bhi.n	8001050 <HAL_GPIO_Init+0xcc>
 8000ffa:	2b12      	cmp	r3, #18
 8000ffc:	d859      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8001004 <HAL_GPIO_Init+0x80>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	0800107f 	.word	0x0800107f
 8001008:	08001059 	.word	0x08001059
 800100c:	0800106b 	.word	0x0800106b
 8001010:	080010ad 	.word	0x080010ad
 8001014:	080010b3 	.word	0x080010b3
 8001018:	080010b3 	.word	0x080010b3
 800101c:	080010b3 	.word	0x080010b3
 8001020:	080010b3 	.word	0x080010b3
 8001024:	080010b3 	.word	0x080010b3
 8001028:	080010b3 	.word	0x080010b3
 800102c:	080010b3 	.word	0x080010b3
 8001030:	080010b3 	.word	0x080010b3
 8001034:	080010b3 	.word	0x080010b3
 8001038:	080010b3 	.word	0x080010b3
 800103c:	080010b3 	.word	0x080010b3
 8001040:	080010b3 	.word	0x080010b3
 8001044:	080010b3 	.word	0x080010b3
 8001048:	08001061 	.word	0x08001061
 800104c:	08001075 	.word	0x08001075
 8001050:	4a79      	ldr	r2, [pc, #484]	@ (8001238 <HAL_GPIO_Init+0x2b4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001056:	e02c      	b.n	80010b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	623b      	str	r3, [r7, #32]
          break;
 800105e:	e029      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	3304      	adds	r3, #4
 8001066:	623b      	str	r3, [r7, #32]
          break;
 8001068:	e024      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	3308      	adds	r3, #8
 8001070:	623b      	str	r3, [r7, #32]
          break;
 8001072:	e01f      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	330c      	adds	r3, #12
 800107a:	623b      	str	r3, [r7, #32]
          break;
 800107c:	e01a      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001086:	2304      	movs	r3, #4
 8001088:	623b      	str	r3, [r7, #32]
          break;
 800108a:	e013      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d105      	bne.n	80010a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001094:	2308      	movs	r3, #8
 8001096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	611a      	str	r2, [r3, #16]
          break;
 800109e:	e009      	b.n	80010b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a0:	2308      	movs	r3, #8
 80010a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	615a      	str	r2, [r3, #20]
          break;
 80010aa:	e003      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
          break;
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          break;
 80010b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2bff      	cmp	r3, #255	@ 0xff
 80010b8:	d801      	bhi.n	80010be <HAL_GPIO_Init+0x13a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	e001      	b.n	80010c2 <HAL_GPIO_Init+0x13e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3304      	adds	r3, #4
 80010c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2bff      	cmp	r3, #255	@ 0xff
 80010c8:	d802      	bhi.n	80010d0 <HAL_GPIO_Init+0x14c>
 80010ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	e002      	b.n	80010d6 <HAL_GPIO_Init+0x152>
 80010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d2:	3b08      	subs	r3, #8
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	210f      	movs	r1, #15
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	6a39      	ldr	r1, [r7, #32]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	431a      	orrs	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 80b1 	beq.w	8001266 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001104:	4b4d      	ldr	r3, [pc, #308]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a4c      	ldr	r2, [pc, #304]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b4a      	ldr	r3, [pc, #296]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800111c:	4a48      	ldr	r2, [pc, #288]	@ (8001240 <HAL_GPIO_Init+0x2bc>)
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001128:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a40      	ldr	r2, [pc, #256]	@ (8001244 <HAL_GPIO_Init+0x2c0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d013      	beq.n	8001170 <HAL_GPIO_Init+0x1ec>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a3f      	ldr	r2, [pc, #252]	@ (8001248 <HAL_GPIO_Init+0x2c4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d00d      	beq.n	800116c <HAL_GPIO_Init+0x1e8>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3e      	ldr	r2, [pc, #248]	@ (800124c <HAL_GPIO_Init+0x2c8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d007      	beq.n	8001168 <HAL_GPIO_Init+0x1e4>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a3d      	ldr	r2, [pc, #244]	@ (8001250 <HAL_GPIO_Init+0x2cc>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d101      	bne.n	8001164 <HAL_GPIO_Init+0x1e0>
 8001160:	2303      	movs	r3, #3
 8001162:	e006      	b.n	8001172 <HAL_GPIO_Init+0x1ee>
 8001164:	2304      	movs	r3, #4
 8001166:	e004      	b.n	8001172 <HAL_GPIO_Init+0x1ee>
 8001168:	2302      	movs	r3, #2
 800116a:	e002      	b.n	8001172 <HAL_GPIO_Init+0x1ee>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_GPIO_Init+0x1ee>
 8001170:	2300      	movs	r3, #0
 8001172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001174:	f002 0203 	and.w	r2, r2, #3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4093      	lsls	r3, r2
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001182:	492f      	ldr	r1, [pc, #188]	@ (8001240 <HAL_GPIO_Init+0x2bc>)
 8001184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d006      	beq.n	80011aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800119c:	4b2d      	ldr	r3, [pc, #180]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	492c      	ldr	r1, [pc, #176]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	608b      	str	r3, [r1, #8]
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	4928      	ldr	r1, [pc, #160]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d006      	beq.n	80011d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011c4:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	4922      	ldr	r1, [pc, #136]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	60cb      	str	r3, [r1, #12]
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011d2:	4b20      	ldr	r3, [pc, #128]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	43db      	mvns	r3, r3
 80011da:	491e      	ldr	r1, [pc, #120]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011dc:	4013      	ands	r3, r2
 80011de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011ec:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	4918      	ldr	r1, [pc, #96]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011fa:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	43db      	mvns	r3, r3
 8001202:	4914      	ldr	r1, [pc, #80]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 8001204:	4013      	ands	r3, r2
 8001206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d021      	beq.n	8001258 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	490e      	ldr	r1, [pc, #56]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e021      	b.n	8001266 <HAL_GPIO_Init+0x2e2>
 8001222:	bf00      	nop
 8001224:	10320000 	.word	0x10320000
 8001228:	10310000 	.word	0x10310000
 800122c:	10220000 	.word	0x10220000
 8001230:	10210000 	.word	0x10210000
 8001234:	10120000 	.word	0x10120000
 8001238:	10110000 	.word	0x10110000
 800123c:	40021000 	.word	0x40021000
 8001240:	40010000 	.word	0x40010000
 8001244:	40010800 	.word	0x40010800
 8001248:	40010c00 	.word	0x40010c00
 800124c:	40011000 	.word	0x40011000
 8001250:	40011400 	.word	0x40011400
 8001254:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_GPIO_Init+0x304>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	43db      	mvns	r3, r3
 8001260:	4909      	ldr	r1, [pc, #36]	@ (8001288 <HAL_GPIO_Init+0x304>)
 8001262:	4013      	ands	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001268:	3301      	adds	r3, #1
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001272:	fa22 f303 	lsr.w	r3, r2, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	f47f ae8e 	bne.w	8000f98 <HAL_GPIO_Init+0x14>
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	372c      	adds	r7, #44	@ 0x2c
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	40010400 	.word	0x40010400

0800128c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e12b      	b.n	80014f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d106      	bne.n	80012b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7fe ff9a 	bl	80001ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2224      	movs	r2, #36	@ 0x24
 80012bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0201 	bic.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012f0:	f001 f832 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 80012f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4a81      	ldr	r2, [pc, #516]	@ (8001500 <HAL_I2C_Init+0x274>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d807      	bhi.n	8001310 <HAL_I2C_Init+0x84>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4a80      	ldr	r2, [pc, #512]	@ (8001504 <HAL_I2C_Init+0x278>)
 8001304:	4293      	cmp	r3, r2
 8001306:	bf94      	ite	ls
 8001308:	2301      	movls	r3, #1
 800130a:	2300      	movhi	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	e006      	b.n	800131e <HAL_I2C_Init+0x92>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4a7d      	ldr	r2, [pc, #500]	@ (8001508 <HAL_I2C_Init+0x27c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	bf94      	ite	ls
 8001318:	2301      	movls	r3, #1
 800131a:	2300      	movhi	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e0e7      	b.n	80014f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4a78      	ldr	r2, [pc, #480]	@ (800150c <HAL_I2C_Init+0x280>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	0c9b      	lsrs	r3, r3, #18
 8001330:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	430a      	orrs	r2, r1
 8001344:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4a6a      	ldr	r2, [pc, #424]	@ (8001500 <HAL_I2C_Init+0x274>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d802      	bhi.n	8001360 <HAL_I2C_Init+0xd4>
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3301      	adds	r3, #1
 800135e:	e009      	b.n	8001374 <HAL_I2C_Init+0xe8>
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001366:	fb02 f303 	mul.w	r3, r2, r3
 800136a:	4a69      	ldr	r2, [pc, #420]	@ (8001510 <HAL_I2C_Init+0x284>)
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	099b      	lsrs	r3, r3, #6
 8001372:	3301      	adds	r3, #1
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	430b      	orrs	r3, r1
 800137a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001386:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	495c      	ldr	r1, [pc, #368]	@ (8001500 <HAL_I2C_Init+0x274>)
 8001390:	428b      	cmp	r3, r1
 8001392:	d819      	bhi.n	80013c8 <HAL_I2C_Init+0x13c>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	1e59      	subs	r1, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fbb1 f3f3 	udiv	r3, r1, r3
 80013a2:	1c59      	adds	r1, r3, #1
 80013a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80013a8:	400b      	ands	r3, r1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00a      	beq.n	80013c4 <HAL_I2C_Init+0x138>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1e59      	subs	r1, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013bc:	3301      	adds	r3, #1
 80013be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c2:	e051      	b.n	8001468 <HAL_I2C_Init+0x1dc>
 80013c4:	2304      	movs	r3, #4
 80013c6:	e04f      	b.n	8001468 <HAL_I2C_Init+0x1dc>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d111      	bne.n	80013f4 <HAL_I2C_Init+0x168>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	1e58      	subs	r0, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6859      	ldr	r1, [r3, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	440b      	add	r3, r1
 80013de:	fbb0 f3f3 	udiv	r3, r0, r3
 80013e2:	3301      	adds	r3, #1
 80013e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf0c      	ite	eq
 80013ec:	2301      	moveq	r3, #1
 80013ee:	2300      	movne	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	e012      	b.n	800141a <HAL_I2C_Init+0x18e>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	1e58      	subs	r0, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6859      	ldr	r1, [r3, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	0099      	lsls	r1, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	fbb0 f3f3 	udiv	r3, r0, r3
 800140a:	3301      	adds	r3, #1
 800140c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001410:	2b00      	cmp	r3, #0
 8001412:	bf0c      	ite	eq
 8001414:	2301      	moveq	r3, #1
 8001416:	2300      	movne	r3, #0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_I2C_Init+0x196>
 800141e:	2301      	movs	r3, #1
 8001420:	e022      	b.n	8001468 <HAL_I2C_Init+0x1dc>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10e      	bne.n	8001448 <HAL_I2C_Init+0x1bc>
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	1e58      	subs	r0, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6859      	ldr	r1, [r3, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	440b      	add	r3, r1
 8001438:	fbb0 f3f3 	udiv	r3, r0, r3
 800143c:	3301      	adds	r3, #1
 800143e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001446:	e00f      	b.n	8001468 <HAL_I2C_Init+0x1dc>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	1e58      	subs	r0, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6859      	ldr	r1, [r3, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	0099      	lsls	r1, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	fbb0 f3f3 	udiv	r3, r0, r3
 800145e:	3301      	adds	r3, #1
 8001460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001464:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	6809      	ldr	r1, [r1, #0]
 800146c:	4313      	orrs	r3, r2
 800146e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69da      	ldr	r2, [r3, #28]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001496:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6911      	ldr	r1, [r2, #16]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68d2      	ldr	r2, [r2, #12]
 80014a2:	4311      	orrs	r1, r2
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	430b      	orrs	r3, r1
 80014aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0201 	orr.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2220      	movs	r2, #32
 80014e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	000186a0 	.word	0x000186a0
 8001504:	001e847f 	.word	0x001e847f
 8001508:	003d08ff 	.word	0x003d08ff
 800150c:	431bde83 	.word	0x431bde83
 8001510:	10624dd3 	.word	0x10624dd3

08001514 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af02      	add	r7, sp, #8
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	461a      	mov	r2, r3
 8001520:	460b      	mov	r3, r1
 8001522:	817b      	strh	r3, [r7, #10]
 8001524:	4613      	mov	r3, r2
 8001526:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff fc1a 	bl	8000d60 <HAL_GetTick>
 800152c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b20      	cmp	r3, #32
 8001538:	f040 80e0 	bne.w	80016fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2319      	movs	r3, #25
 8001542:	2201      	movs	r2, #1
 8001544:	4970      	ldr	r1, [pc, #448]	@ (8001708 <HAL_I2C_Master_Transmit+0x1f4>)
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f964 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001552:	2302      	movs	r3, #2
 8001554:	e0d3      	b.n	80016fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_I2C_Master_Transmit+0x50>
 8001560:	2302      	movs	r3, #2
 8001562:	e0cc      	b.n	80016fe <HAL_I2C_Master_Transmit+0x1ea>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b01      	cmp	r3, #1
 8001578:	d007      	beq.n	800158a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 0201 	orr.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001598:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2221      	movs	r2, #33	@ 0x21
 800159e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2210      	movs	r2, #16
 80015a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	893a      	ldrh	r2, [r7, #8]
 80015ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4a50      	ldr	r2, [pc, #320]	@ (800170c <HAL_I2C_Master_Transmit+0x1f8>)
 80015ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015cc:	8979      	ldrh	r1, [r7, #10]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	6a3a      	ldr	r2, [r7, #32]
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 f89c 	bl	8001710 <I2C_MasterRequestWrite>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e08d      	b.n	80016fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015f8:	e066      	b.n	80016c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	6a39      	ldr	r1, [r7, #32]
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 fa22 	bl	8001a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00d      	beq.n	8001626 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	2b04      	cmp	r3, #4
 8001610:	d107      	bne.n	8001622 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001620:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e06b      	b.n	80016fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	781a      	ldrb	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001640:	b29b      	uxth	r3, r3
 8001642:	3b01      	subs	r3, #1
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800164e:	3b01      	subs	r3, #1
 8001650:	b29a      	uxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b04      	cmp	r3, #4
 8001662:	d11b      	bne.n	800169c <HAL_I2C_Master_Transmit+0x188>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001668:	2b00      	cmp	r3, #0
 800166a:	d017      	beq.n	800169c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	781a      	ldrb	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001686:	b29b      	uxth	r3, r3
 8001688:	3b01      	subs	r3, #1
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001694:	3b01      	subs	r3, #1
 8001696:	b29a      	uxth	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	6a39      	ldr	r1, [r7, #32]
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 fa19 	bl	8001ad8 <I2C_WaitOnBTFFlagUntilTimeout>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00d      	beq.n	80016c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d107      	bne.n	80016c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e01a      	b.n	80016fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d194      	bne.n	80015fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2220      	movs	r2, #32
 80016e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e000      	b.n	80016fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016fc:	2302      	movs	r3, #2
  }
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	00100002 	.word	0x00100002
 800170c:	ffff0000 	.word	0xffff0000

08001710 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af02      	add	r7, sp, #8
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	460b      	mov	r3, r1
 800171e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001724:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2b08      	cmp	r3, #8
 800172a:	d006      	beq.n	800173a <I2C_MasterRequestWrite+0x2a>
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d003      	beq.n	800173a <I2C_MasterRequestWrite+0x2a>
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001738:	d108      	bne.n	800174c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e00b      	b.n	8001764 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001750:	2b12      	cmp	r3, #18
 8001752:	d107      	bne.n	8001764 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001762:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f84f 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00d      	beq.n	8001798 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800178a:	d103      	bne.n	8001794 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001792:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e035      	b.n	8001804 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017a0:	d108      	bne.n	80017b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017a2:	897b      	ldrh	r3, [r7, #10]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80017b0:	611a      	str	r2, [r3, #16]
 80017b2:	e01b      	b.n	80017ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017b4:	897b      	ldrh	r3, [r7, #10]
 80017b6:	11db      	asrs	r3, r3, #7
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f003 0306 	and.w	r3, r3, #6
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f063 030f 	orn	r3, r3, #15
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	490e      	ldr	r1, [pc, #56]	@ (800180c <I2C_MasterRequestWrite+0xfc>)
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f898 	bl	8001908 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e010      	b.n	8001804 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017e2:	897b      	ldrh	r3, [r7, #10]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	4907      	ldr	r1, [pc, #28]	@ (8001810 <I2C_MasterRequestWrite+0x100>)
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f888 	bl	8001908 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	00010008 	.word	0x00010008
 8001810:	00010002 	.word	0x00010002

08001814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	4613      	mov	r3, r2
 8001822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001824:	e048      	b.n	80018b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d044      	beq.n	80018b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800182e:	f7ff fa97 	bl	8000d60 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d302      	bcc.n	8001844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d139      	bne.n	80018b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	0c1b      	lsrs	r3, r3, #16
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d10d      	bne.n	800186a <I2C_WaitOnFlagUntilTimeout+0x56>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	43da      	mvns	r2, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	4013      	ands	r3, r2
 800185a:	b29b      	uxth	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	bf0c      	ite	eq
 8001860:	2301      	moveq	r3, #1
 8001862:	2300      	movne	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	e00c      	b.n	8001884 <I2C_WaitOnFlagUntilTimeout+0x70>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	43da      	mvns	r2, r3
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	4013      	ands	r3, r2
 8001876:	b29b      	uxth	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	429a      	cmp	r2, r3
 8001888:	d116      	bne.n	80018b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2220      	movs	r2, #32
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	f043 0220 	orr.w	r2, r3, #32
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e023      	b.n	8001900 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	0c1b      	lsrs	r3, r3, #16
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d10d      	bne.n	80018de <I2C_WaitOnFlagUntilTimeout+0xca>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	43da      	mvns	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	4013      	ands	r3, r2
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf0c      	ite	eq
 80018d4:	2301      	moveq	r3, #1
 80018d6:	2300      	movne	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	e00c      	b.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	43da      	mvns	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	4013      	ands	r3, r2
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf0c      	ite	eq
 80018f0:	2301      	moveq	r3, #1
 80018f2:	2300      	movne	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d093      	beq.n	8001826 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001916:	e071      	b.n	80019fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001926:	d123      	bne.n	8001970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001936:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001940:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2220      	movs	r2, #32
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	f043 0204 	orr.w	r2, r3, #4
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e067      	b.n	8001a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001976:	d041      	beq.n	80019fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001978:	f7ff f9f2 	bl	8000d60 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	d302      	bcc.n	800198e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d136      	bne.n	80019fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	0c1b      	lsrs	r3, r3, #16
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d10c      	bne.n	80019b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4013      	ands	r3, r2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bf14      	ite	ne
 80019aa:	2301      	movne	r3, #1
 80019ac:	2300      	moveq	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	e00b      	b.n	80019ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	4013      	ands	r3, r2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf14      	ite	ne
 80019c4:	2301      	movne	r3, #1
 80019c6:	2300      	moveq	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d016      	beq.n	80019fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2220      	movs	r2, #32
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	f043 0220 	orr.w	r2, r3, #32
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e021      	b.n	8001a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	0c1b      	lsrs	r3, r3, #16
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d10c      	bne.n	8001a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	43da      	mvns	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	4013      	ands	r3, r2
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf14      	ite	ne
 8001a18:	2301      	movne	r3, #1
 8001a1a:	2300      	moveq	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	e00b      	b.n	8001a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf14      	ite	ne
 8001a32:	2301      	movne	r3, #1
 8001a34:	2300      	moveq	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f47f af6d 	bne.w	8001918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a54:	e034      	b.n	8001ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 f886 	bl	8001b68 <I2C_IsAcknowledgeFailed>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e034      	b.n	8001ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6c:	d028      	beq.n	8001ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a6e:	f7ff f977 	bl	8000d60 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d302      	bcc.n	8001a84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d11d      	bne.n	8001ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a8e:	2b80      	cmp	r3, #128	@ 0x80
 8001a90:	d016      	beq.n	8001ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	f043 0220 	orr.w	r2, r3, #32
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e007      	b.n	8001ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aca:	2b80      	cmp	r3, #128	@ 0x80
 8001acc:	d1c3      	bne.n	8001a56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ae4:	e034      	b.n	8001b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f83e 	bl	8001b68 <I2C_IsAcknowledgeFailed>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e034      	b.n	8001b60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d028      	beq.n	8001b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001afe:	f7ff f92f 	bl	8000d60 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d302      	bcc.n	8001b14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d11d      	bne.n	8001b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d016      	beq.n	8001b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	f043 0220 	orr.w	r2, r3, #32
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e007      	b.n	8001b60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d1c3      	bne.n	8001ae6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b7e:	d11b      	bne.n	8001bb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2220      	movs	r2, #32
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	f043 0204 	orr.w	r2, r3, #4
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e272      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8087 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be4:	4b92      	ldr	r3, [pc, #584]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d00c      	beq.n	8001c0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf0:	4b8f      	ldr	r3, [pc, #572]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d112      	bne.n	8001c22 <HAL_RCC_OscConfig+0x5e>
 8001bfc:	4b8c      	ldr	r3, [pc, #560]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c08:	d10b      	bne.n	8001c22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0a:	4b89      	ldr	r3, [pc, #548]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d06c      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x12c>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d168      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e24c      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x76>
 8001c2c:	4b80      	ldr	r3, [pc, #512]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a7f      	ldr	r2, [pc, #508]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	e02e      	b.n	8001c98 <HAL_RCC_OscConfig+0xd4>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x98>
 8001c42:	4b7b      	ldr	r3, [pc, #492]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a7a      	ldr	r2, [pc, #488]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b78      	ldr	r3, [pc, #480]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a77      	ldr	r2, [pc, #476]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e01d      	b.n	8001c98 <HAL_RCC_OscConfig+0xd4>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0xbc>
 8001c66:	4b72      	ldr	r3, [pc, #456]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a71      	ldr	r2, [pc, #452]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b6f      	ldr	r3, [pc, #444]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a6e      	ldr	r2, [pc, #440]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_OscConfig+0xd4>
 8001c80:	4b6b      	ldr	r3, [pc, #428]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a6a      	ldr	r2, [pc, #424]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b68      	ldr	r3, [pc, #416]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a67      	ldr	r2, [pc, #412]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d013      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f85e 	bl	8000d60 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f85a 	bl	8000d60 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	@ 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e200      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b5d      	ldr	r3, [pc, #372]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0xe4>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff f84a 	bl	8000d60 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff f846 	bl	8000d60 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	@ 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e1ec      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	4b53      	ldr	r3, [pc, #332]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x10c>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d063      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00b      	beq.n	8001d22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d0a:	4b49      	ldr	r3, [pc, #292]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d11c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x18c>
 8001d16:	4b46      	ldr	r3, [pc, #280]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d116      	bne.n	8001d50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d22:	4b43      	ldr	r3, [pc, #268]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <HAL_RCC_OscConfig+0x176>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d001      	beq.n	8001d3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e1c0      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4939      	ldr	r1, [pc, #228]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4e:	e03a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d58:	4b36      	ldr	r3, [pc, #216]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7fe ffff 	bl	8000d60 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d66:	f7fe fffb 	bl	8000d60 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e1a1      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d78:	4b2d      	ldr	r3, [pc, #180]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d84:	4b2a      	ldr	r3, [pc, #168]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4927      	ldr	r1, [pc, #156]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
 8001d98:	e015      	b.n	8001dc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d9a:	4b26      	ldr	r3, [pc, #152]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7fe ffde 	bl	8000d60 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da8:	f7fe ffda 	bl	8000d60 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e180      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dba:	4b1d      	ldr	r3, [pc, #116]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d03a      	beq.n	8001e48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d019      	beq.n	8001e0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dda:	4b17      	ldr	r3, [pc, #92]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de0:	f7fe ffbe 	bl	8000d60 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de8:	f7fe ffba 	bl	8000d60 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e160      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e06:	2001      	movs	r0, #1
 8001e08:	f000 faba 	bl	8002380 <RCC_Delay>
 8001e0c:	e01c      	b.n	8001e48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e14:	f7fe ffa4 	bl	8000d60 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1a:	e00f      	b.n	8001e3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1c:	f7fe ffa0 	bl	8000d60 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d908      	bls.n	8001e3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e146      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	42420000 	.word	0x42420000
 8001e38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	4b92      	ldr	r3, [pc, #584]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1e9      	bne.n	8001e1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80a6 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5a:	4b8b      	ldr	r3, [pc, #556]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	4b88      	ldr	r3, [pc, #544]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a87      	ldr	r2, [pc, #540]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	61d3      	str	r3, [r2, #28]
 8001e72:	4b85      	ldr	r3, [pc, #532]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e82:	4b82      	ldr	r3, [pc, #520]	@ (800208c <HAL_RCC_OscConfig+0x4c8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d118      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8e:	4b7f      	ldr	r3, [pc, #508]	@ (800208c <HAL_RCC_OscConfig+0x4c8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a7e      	ldr	r2, [pc, #504]	@ (800208c <HAL_RCC_OscConfig+0x4c8>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9a:	f7fe ff61 	bl	8000d60 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea2:	f7fe ff5d 	bl	8000d60 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b64      	cmp	r3, #100	@ 0x64
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e103      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb4:	4b75      	ldr	r3, [pc, #468]	@ (800208c <HAL_RCC_OscConfig+0x4c8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x312>
 8001ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4a6e      	ldr	r2, [pc, #440]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6213      	str	r3, [r2, #32]
 8001ed4:	e02d      	b.n	8001f32 <HAL_RCC_OscConfig+0x36e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x334>
 8001ede:	4b6a      	ldr	r3, [pc, #424]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4a69      	ldr	r2, [pc, #420]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	6213      	str	r3, [r2, #32]
 8001eea:	4b67      	ldr	r3, [pc, #412]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a66      	ldr	r2, [pc, #408]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	6213      	str	r3, [r2, #32]
 8001ef6:	e01c      	b.n	8001f32 <HAL_RCC_OscConfig+0x36e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d10c      	bne.n	8001f1a <HAL_RCC_OscConfig+0x356>
 8001f00:	4b61      	ldr	r3, [pc, #388]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4a60      	ldr	r2, [pc, #384]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	6213      	str	r3, [r2, #32]
 8001f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a5d      	ldr	r2, [pc, #372]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e00b      	b.n	8001f32 <HAL_RCC_OscConfig+0x36e>
 8001f1a:	4b5b      	ldr	r3, [pc, #364]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4a5a      	ldr	r2, [pc, #360]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	6213      	str	r3, [r2, #32]
 8001f26:	4b58      	ldr	r3, [pc, #352]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a57      	ldr	r2, [pc, #348]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	f023 0304 	bic.w	r3, r3, #4
 8001f30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d015      	beq.n	8001f66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7fe ff11 	bl	8000d60 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7fe ff0d 	bl	8000d60 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e0b1      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f58:	4b4b      	ldr	r3, [pc, #300]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0ee      	beq.n	8001f42 <HAL_RCC_OscConfig+0x37e>
 8001f64:	e014      	b.n	8001f90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f66:	f7fe fefb 	bl	8000d60 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7fe fef7 	bl	8000d60 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e09b      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f84:	4b40      	ldr	r3, [pc, #256]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1ee      	bne.n	8001f6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d105      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f96:	4b3c      	ldr	r3, [pc, #240]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4a3b      	ldr	r2, [pc, #236]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 8087 	beq.w	80020ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fac:	4b36      	ldr	r3, [pc, #216]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d061      	beq.n	800207c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d146      	bne.n	800204e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc0:	4b33      	ldr	r3, [pc, #204]	@ (8002090 <HAL_RCC_OscConfig+0x4cc>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fecb 	bl	8000d60 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7fe fec7 	bl	8000d60 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e06d      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe0:	4b29      	ldr	r3, [pc, #164]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ff4:	d108      	bne.n	8002008 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ff6:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4921      	ldr	r1, [pc, #132]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002008:	4b1f      	ldr	r3, [pc, #124]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a19      	ldr	r1, [r3, #32]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	430b      	orrs	r3, r1
 800201a:	491b      	ldr	r1, [pc, #108]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002020:	4b1b      	ldr	r3, [pc, #108]	@ (8002090 <HAL_RCC_OscConfig+0x4cc>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7fe fe9b 	bl	8000d60 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202e:	f7fe fe97 	bl	8000d60 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e03d      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x46a>
 800204c:	e035      	b.n	80020ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <HAL_RCC_OscConfig+0x4cc>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7fe fe84 	bl	8000d60 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7fe fe80 	bl	8000d60 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e026      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206e:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x498>
 800207a:	e01e      	b.n	80020ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d107      	bne.n	8002094 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e019      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
 8002088:	40021000 	.word	0x40021000
 800208c:	40007000 	.word	0x40007000
 8002090:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002094:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <HAL_RCC_OscConfig+0x500>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d001      	beq.n	80020ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000

080020c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0d0      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d910      	bls.n	800210c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b67      	ldr	r3, [pc, #412]	@ (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 0207 	bic.w	r2, r3, #7
 80020f2:	4965      	ldr	r1, [pc, #404]	@ (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b63      	ldr	r3, [pc, #396]	@ (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0b8      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d020      	beq.n	800215a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002124:	4b59      	ldr	r3, [pc, #356]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4a58      	ldr	r2, [pc, #352]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800212e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800213c:	4b53      	ldr	r3, [pc, #332]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	4a52      	ldr	r2, [pc, #328]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002146:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002148:	4b50      	ldr	r3, [pc, #320]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	494d      	ldr	r1, [pc, #308]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d040      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d107      	bne.n	800217e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	4b47      	ldr	r3, [pc, #284]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d115      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e07f      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d107      	bne.n	8002196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002186:	4b41      	ldr	r3, [pc, #260]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e073      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002196:	4b3d      	ldr	r3, [pc, #244]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e06b      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a6:	4b39      	ldr	r3, [pc, #228]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f023 0203 	bic.w	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4936      	ldr	r1, [pc, #216]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b8:	f7fe fdd2 	bl	8000d60 <HAL_GetTick>
 80021bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c0:	f7fe fdce 	bl	8000d60 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e053      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	4b2d      	ldr	r3, [pc, #180]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 020c 	and.w	r2, r3, #12
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d1eb      	bne.n	80021c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e8:	4b27      	ldr	r3, [pc, #156]	@ (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d210      	bcs.n	8002218 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 0207 	bic.w	r2, r3, #7
 80021fe:	4922      	ldr	r1, [pc, #136]	@ (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e032      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002224:	4b19      	ldr	r3, [pc, #100]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4916      	ldr	r1, [pc, #88]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	4313      	orrs	r3, r2
 8002234:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d009      	beq.n	8002256 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002242:	4b12      	ldr	r3, [pc, #72]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	490e      	ldr	r1, [pc, #56]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002256:	f000 f821 	bl	800229c <HAL_RCC_GetSysClockFreq>
 800225a:	4602      	mov	r2, r0
 800225c:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	490a      	ldr	r1, [pc, #40]	@ (8002290 <HAL_RCC_ClockConfig+0x1c8>)
 8002268:	5ccb      	ldrb	r3, [r1, r3]
 800226a:	fa22 f303 	lsr.w	r3, r2, r3
 800226e:	4a09      	ldr	r2, [pc, #36]	@ (8002294 <HAL_RCC_ClockConfig+0x1cc>)
 8002270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <HAL_RCC_ClockConfig+0x1d0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fd30 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40022000 	.word	0x40022000
 800228c:	40021000 	.word	0x40021000
 8002290:	08003978 	.word	0x08003978
 8002294:	20000004 	.word	0x20000004
 8002298:	20000008 	.word	0x20000008

0800229c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002330 <HAL_RCC_GetSysClockFreq+0x94>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d002      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x30>
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d003      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x36>
 80022ca:	e027      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022cc:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ce:	613b      	str	r3, [r7, #16]
      break;
 80022d0:	e027      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	0c9b      	lsrs	r3, r3, #18
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	4a17      	ldr	r2, [pc, #92]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022dc:	5cd3      	ldrb	r3, [r2, r3]
 80022de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d010      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ea:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <HAL_RCC_GetSysClockFreq+0x94>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	0c5b      	lsrs	r3, r3, #17
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	4a11      	ldr	r2, [pc, #68]	@ (800233c <HAL_RCC_GetSysClockFreq+0xa0>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x98>)
 80022fe:	fb03 f202 	mul.w	r2, r3, r2
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e004      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a0c      	ldr	r2, [pc, #48]	@ (8002340 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002310:	fb02 f303 	mul.w	r3, r2, r3
 8002314:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	613b      	str	r3, [r7, #16]
      break;
 800231a:	e002      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800231c:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x98>)
 800231e:	613b      	str	r3, [r7, #16]
      break;
 8002320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002322:	693b      	ldr	r3, [r7, #16]
}
 8002324:	4618      	mov	r0, r3
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	007a1200 	.word	0x007a1200
 8002338:	08003990 	.word	0x08003990
 800233c:	080039a0 	.word	0x080039a0
 8002340:	003d0900 	.word	0x003d0900

08002344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002348:	4b02      	ldr	r3, [pc, #8]	@ (8002354 <HAL_RCC_GetHCLKFreq+0x10>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800235c:	f7ff fff2 	bl	8002344 <HAL_RCC_GetHCLKFreq>
 8002360:	4602      	mov	r2, r0
 8002362:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	4903      	ldr	r1, [pc, #12]	@ (800237c <HAL_RCC_GetPCLK1Freq+0x24>)
 800236e:	5ccb      	ldrb	r3, [r1, r3]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	08003988 	.word	0x08003988

08002380 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002388:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <RCC_Delay+0x34>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0a      	ldr	r2, [pc, #40]	@ (80023b8 <RCC_Delay+0x38>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0a5b      	lsrs	r3, r3, #9
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800239c:	bf00      	nop
  }
  while (Delay --);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	60fa      	str	r2, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f9      	bne.n	800239c <RCC_Delay+0x1c>
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	20000004 	.word	0x20000004
 80023b8:	10624dd3 	.word	0x10624dd3

080023bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e041      	b.n	8002452 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7fe fc02 	bl	8000bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3304      	adds	r3, #4
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f000 f8c2 	bl	8002584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d001      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e03a      	b.n	80024ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a18      	ldr	r2, [pc, #96]	@ (80024f4 <HAL_TIM_Base_Start_IT+0x98>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00e      	beq.n	80024b4 <HAL_TIM_Base_Start_IT+0x58>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800249e:	d009      	beq.n	80024b4 <HAL_TIM_Base_Start_IT+0x58>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a14      	ldr	r2, [pc, #80]	@ (80024f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d004      	beq.n	80024b4 <HAL_TIM_Base_Start_IT+0x58>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a13      	ldr	r2, [pc, #76]	@ (80024fc <HAL_TIM_Base_Start_IT+0xa0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d111      	bne.n	80024d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d010      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d6:	e007      	b.n	80024e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40000400 	.word	0x40000400
 80024fc:	40000800 	.word	0x40000800

08002500 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002514:	2302      	movs	r3, #2
 8002516:	e031      	b.n	800257c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002528:	6839      	ldr	r1, [r7, #0]
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f898 	bl	8002660 <TIM_SlaveTimer_SetConfig>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e018      	b.n	800257c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002558:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002568:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a2f      	ldr	r2, [pc, #188]	@ (8002654 <TIM_Base_SetConfig+0xd0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00b      	beq.n	80025b4 <TIM_Base_SetConfig+0x30>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a2:	d007      	beq.n	80025b4 <TIM_Base_SetConfig+0x30>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002658 <TIM_Base_SetConfig+0xd4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d003      	beq.n	80025b4 <TIM_Base_SetConfig+0x30>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a2b      	ldr	r2, [pc, #172]	@ (800265c <TIM_Base_SetConfig+0xd8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d108      	bne.n	80025c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a22      	ldr	r2, [pc, #136]	@ (8002654 <TIM_Base_SetConfig+0xd0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00b      	beq.n	80025e6 <TIM_Base_SetConfig+0x62>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d4:	d007      	beq.n	80025e6 <TIM_Base_SetConfig+0x62>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002658 <TIM_Base_SetConfig+0xd4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d003      	beq.n	80025e6 <TIM_Base_SetConfig+0x62>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a1e      	ldr	r2, [pc, #120]	@ (800265c <TIM_Base_SetConfig+0xd8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d108      	bne.n	80025f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a0d      	ldr	r2, [pc, #52]	@ (8002654 <TIM_Base_SetConfig+0xd0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d103      	bne.n	800262c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f023 0201 	bic.w	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	611a      	str	r2, [r3, #16]
  }
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	40012c00 	.word	0x40012c00
 8002658:	40000400 	.word	0x40000400
 800265c:	40000800 	.word	0x40000800

08002660 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800267c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f023 0307 	bic.w	r3, r3, #7
 800268e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b70      	cmp	r3, #112	@ 0x70
 80026a8:	d01a      	beq.n	80026e0 <TIM_SlaveTimer_SetConfig+0x80>
 80026aa:	2b70      	cmp	r3, #112	@ 0x70
 80026ac:	d860      	bhi.n	8002770 <TIM_SlaveTimer_SetConfig+0x110>
 80026ae:	2b60      	cmp	r3, #96	@ 0x60
 80026b0:	d054      	beq.n	800275c <TIM_SlaveTimer_SetConfig+0xfc>
 80026b2:	2b60      	cmp	r3, #96	@ 0x60
 80026b4:	d85c      	bhi.n	8002770 <TIM_SlaveTimer_SetConfig+0x110>
 80026b6:	2b50      	cmp	r3, #80	@ 0x50
 80026b8:	d046      	beq.n	8002748 <TIM_SlaveTimer_SetConfig+0xe8>
 80026ba:	2b50      	cmp	r3, #80	@ 0x50
 80026bc:	d858      	bhi.n	8002770 <TIM_SlaveTimer_SetConfig+0x110>
 80026be:	2b40      	cmp	r3, #64	@ 0x40
 80026c0:	d019      	beq.n	80026f6 <TIM_SlaveTimer_SetConfig+0x96>
 80026c2:	2b40      	cmp	r3, #64	@ 0x40
 80026c4:	d854      	bhi.n	8002770 <TIM_SlaveTimer_SetConfig+0x110>
 80026c6:	2b30      	cmp	r3, #48	@ 0x30
 80026c8:	d055      	beq.n	8002776 <TIM_SlaveTimer_SetConfig+0x116>
 80026ca:	2b30      	cmp	r3, #48	@ 0x30
 80026cc:	d850      	bhi.n	8002770 <TIM_SlaveTimer_SetConfig+0x110>
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d051      	beq.n	8002776 <TIM_SlaveTimer_SetConfig+0x116>
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d84c      	bhi.n	8002770 <TIM_SlaveTimer_SetConfig+0x110>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d04d      	beq.n	8002776 <TIM_SlaveTimer_SetConfig+0x116>
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d04b      	beq.n	8002776 <TIM_SlaveTimer_SetConfig+0x116>
 80026de:	e047      	b.n	8002770 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80026f0:	f000 f8a4 	bl	800283c <TIM_ETR_SetConfig>
      break;
 80026f4:	e040      	b.n	8002778 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b05      	cmp	r3, #5
 80026fc:	d101      	bne.n	8002702 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e03b      	b.n	800277a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a1a      	ldr	r2, [r3, #32]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0201 	bic.w	r2, r2, #1
 8002718:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002728:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	4313      	orrs	r3, r2
 8002734:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	621a      	str	r2, [r3, #32]
      break;
 8002746:	e017      	b.n	8002778 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002754:	461a      	mov	r2, r3
 8002756:	f000 f814 	bl	8002782 <TIM_TI1_ConfigInputStage>
      break;
 800275a:	e00d      	b.n	8002778 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002768:	461a      	mov	r2, r3
 800276a:	f000 f838 	bl	80027de <TIM_TI2_ConfigInputStage>
      break;
 800276e:	e003      	b.n	8002778 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	75fb      	strb	r3, [r7, #23]
      break;
 8002774:	e000      	b.n	8002778 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002776:	bf00      	nop
  }

  return status;
 8002778:	7dfb      	ldrb	r3, [r7, #23]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002782:	b480      	push	{r7}
 8002784:	b087      	sub	sp, #28
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f023 0201 	bic.w	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f023 030a 	bic.w	r3, r3, #10
 80027be:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	621a      	str	r2, [r3, #32]
}
 80027d4:	bf00      	nop
 80027d6:	371c      	adds	r7, #28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027de:	b480      	push	{r7}
 80027e0:	b087      	sub	sp, #28
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f023 0210 	bic.w	r2, r3, #16
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002808:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	031b      	lsls	r3, r3, #12
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800281a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	621a      	str	r2, [r3, #32]
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002856:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	021a      	lsls	r2, r3, #8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	431a      	orrs	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	4313      	orrs	r3, r2
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	609a      	str	r2, [r3, #8]
}
 8002870:	bf00      	nop
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
	...

0800287c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002890:	2302      	movs	r3, #2
 8002892:	e046      	b.n	8002922 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a16      	ldr	r2, [pc, #88]	@ (800292c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00e      	beq.n	80028f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e0:	d009      	beq.n	80028f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a12      	ldr	r2, [pc, #72]	@ (8002930 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d004      	beq.n	80028f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a10      	ldr	r2, [pc, #64]	@ (8002934 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10c      	bne.n	8002910 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	4313      	orrs	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800

08002938 <siprintf>:
 8002938:	b40e      	push	{r1, r2, r3}
 800293a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800293e:	b500      	push	{lr}
 8002940:	b09c      	sub	sp, #112	@ 0x70
 8002942:	ab1d      	add	r3, sp, #116	@ 0x74
 8002944:	9002      	str	r0, [sp, #8]
 8002946:	9006      	str	r0, [sp, #24]
 8002948:	9107      	str	r1, [sp, #28]
 800294a:	9104      	str	r1, [sp, #16]
 800294c:	4808      	ldr	r0, [pc, #32]	@ (8002970 <siprintf+0x38>)
 800294e:	4909      	ldr	r1, [pc, #36]	@ (8002974 <siprintf+0x3c>)
 8002950:	f853 2b04 	ldr.w	r2, [r3], #4
 8002954:	9105      	str	r1, [sp, #20]
 8002956:	6800      	ldr	r0, [r0, #0]
 8002958:	a902      	add	r1, sp, #8
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	f000 f9b0 	bl	8002cc0 <_svfiprintf_r>
 8002960:	2200      	movs	r2, #0
 8002962:	9b02      	ldr	r3, [sp, #8]
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	b01c      	add	sp, #112	@ 0x70
 8002968:	f85d eb04 	ldr.w	lr, [sp], #4
 800296c:	b003      	add	sp, #12
 800296e:	4770      	bx	lr
 8002970:	20000010 	.word	0x20000010
 8002974:	ffff0208 	.word	0xffff0208

08002978 <memcmp>:
 8002978:	b510      	push	{r4, lr}
 800297a:	3901      	subs	r1, #1
 800297c:	4402      	add	r2, r0
 800297e:	4290      	cmp	r0, r2
 8002980:	d101      	bne.n	8002986 <memcmp+0xe>
 8002982:	2000      	movs	r0, #0
 8002984:	e005      	b.n	8002992 <memcmp+0x1a>
 8002986:	7803      	ldrb	r3, [r0, #0]
 8002988:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800298c:	42a3      	cmp	r3, r4
 800298e:	d001      	beq.n	8002994 <memcmp+0x1c>
 8002990:	1b18      	subs	r0, r3, r4
 8002992:	bd10      	pop	{r4, pc}
 8002994:	3001      	adds	r0, #1
 8002996:	e7f2      	b.n	800297e <memcmp+0x6>

08002998 <memset>:
 8002998:	4603      	mov	r3, r0
 800299a:	4402      	add	r2, r0
 800299c:	4293      	cmp	r3, r2
 800299e:	d100      	bne.n	80029a2 <memset+0xa>
 80029a0:	4770      	bx	lr
 80029a2:	f803 1b01 	strb.w	r1, [r3], #1
 80029a6:	e7f9      	b.n	800299c <memset+0x4>

080029a8 <__errno>:
 80029a8:	4b01      	ldr	r3, [pc, #4]	@ (80029b0 <__errno+0x8>)
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	20000010 	.word	0x20000010

080029b4 <__libc_init_array>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	2600      	movs	r6, #0
 80029b8:	4d0c      	ldr	r5, [pc, #48]	@ (80029ec <__libc_init_array+0x38>)
 80029ba:	4c0d      	ldr	r4, [pc, #52]	@ (80029f0 <__libc_init_array+0x3c>)
 80029bc:	1b64      	subs	r4, r4, r5
 80029be:	10a4      	asrs	r4, r4, #2
 80029c0:	42a6      	cmp	r6, r4
 80029c2:	d109      	bne.n	80029d8 <__libc_init_array+0x24>
 80029c4:	f000 fc78 	bl	80032b8 <_init>
 80029c8:	2600      	movs	r6, #0
 80029ca:	4d0a      	ldr	r5, [pc, #40]	@ (80029f4 <__libc_init_array+0x40>)
 80029cc:	4c0a      	ldr	r4, [pc, #40]	@ (80029f8 <__libc_init_array+0x44>)
 80029ce:	1b64      	subs	r4, r4, r5
 80029d0:	10a4      	asrs	r4, r4, #2
 80029d2:	42a6      	cmp	r6, r4
 80029d4:	d105      	bne.n	80029e2 <__libc_init_array+0x2e>
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
 80029d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029dc:	4798      	blx	r3
 80029de:	3601      	adds	r6, #1
 80029e0:	e7ee      	b.n	80029c0 <__libc_init_array+0xc>
 80029e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e6:	4798      	blx	r3
 80029e8:	3601      	adds	r6, #1
 80029ea:	e7f2      	b.n	80029d2 <__libc_init_array+0x1e>
 80029ec:	080039d8 	.word	0x080039d8
 80029f0:	080039d8 	.word	0x080039d8
 80029f4:	080039d8 	.word	0x080039d8
 80029f8:	080039dc 	.word	0x080039dc

080029fc <__retarget_lock_acquire_recursive>:
 80029fc:	4770      	bx	lr

080029fe <__retarget_lock_release_recursive>:
 80029fe:	4770      	bx	lr

08002a00 <memcpy>:
 8002a00:	440a      	add	r2, r1
 8002a02:	4291      	cmp	r1, r2
 8002a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a08:	d100      	bne.n	8002a0c <memcpy+0xc>
 8002a0a:	4770      	bx	lr
 8002a0c:	b510      	push	{r4, lr}
 8002a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a12:	4291      	cmp	r1, r2
 8002a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a18:	d1f9      	bne.n	8002a0e <memcpy+0xe>
 8002a1a:	bd10      	pop	{r4, pc}

08002a1c <_free_r>:
 8002a1c:	b538      	push	{r3, r4, r5, lr}
 8002a1e:	4605      	mov	r5, r0
 8002a20:	2900      	cmp	r1, #0
 8002a22:	d040      	beq.n	8002aa6 <_free_r+0x8a>
 8002a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a28:	1f0c      	subs	r4, r1, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	bfb8      	it	lt
 8002a2e:	18e4      	addlt	r4, r4, r3
 8002a30:	f000 f8de 	bl	8002bf0 <__malloc_lock>
 8002a34:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa8 <_free_r+0x8c>)
 8002a36:	6813      	ldr	r3, [r2, #0]
 8002a38:	b933      	cbnz	r3, 8002a48 <_free_r+0x2c>
 8002a3a:	6063      	str	r3, [r4, #4]
 8002a3c:	6014      	str	r4, [r2, #0]
 8002a3e:	4628      	mov	r0, r5
 8002a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a44:	f000 b8da 	b.w	8002bfc <__malloc_unlock>
 8002a48:	42a3      	cmp	r3, r4
 8002a4a:	d908      	bls.n	8002a5e <_free_r+0x42>
 8002a4c:	6820      	ldr	r0, [r4, #0]
 8002a4e:	1821      	adds	r1, r4, r0
 8002a50:	428b      	cmp	r3, r1
 8002a52:	bf01      	itttt	eq
 8002a54:	6819      	ldreq	r1, [r3, #0]
 8002a56:	685b      	ldreq	r3, [r3, #4]
 8002a58:	1809      	addeq	r1, r1, r0
 8002a5a:	6021      	streq	r1, [r4, #0]
 8002a5c:	e7ed      	b.n	8002a3a <_free_r+0x1e>
 8002a5e:	461a      	mov	r2, r3
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	b10b      	cbz	r3, 8002a68 <_free_r+0x4c>
 8002a64:	42a3      	cmp	r3, r4
 8002a66:	d9fa      	bls.n	8002a5e <_free_r+0x42>
 8002a68:	6811      	ldr	r1, [r2, #0]
 8002a6a:	1850      	adds	r0, r2, r1
 8002a6c:	42a0      	cmp	r0, r4
 8002a6e:	d10b      	bne.n	8002a88 <_free_r+0x6c>
 8002a70:	6820      	ldr	r0, [r4, #0]
 8002a72:	4401      	add	r1, r0
 8002a74:	1850      	adds	r0, r2, r1
 8002a76:	4283      	cmp	r3, r0
 8002a78:	6011      	str	r1, [r2, #0]
 8002a7a:	d1e0      	bne.n	8002a3e <_free_r+0x22>
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4408      	add	r0, r1
 8002a82:	6010      	str	r0, [r2, #0]
 8002a84:	6053      	str	r3, [r2, #4]
 8002a86:	e7da      	b.n	8002a3e <_free_r+0x22>
 8002a88:	d902      	bls.n	8002a90 <_free_r+0x74>
 8002a8a:	230c      	movs	r3, #12
 8002a8c:	602b      	str	r3, [r5, #0]
 8002a8e:	e7d6      	b.n	8002a3e <_free_r+0x22>
 8002a90:	6820      	ldr	r0, [r4, #0]
 8002a92:	1821      	adds	r1, r4, r0
 8002a94:	428b      	cmp	r3, r1
 8002a96:	bf01      	itttt	eq
 8002a98:	6819      	ldreq	r1, [r3, #0]
 8002a9a:	685b      	ldreq	r3, [r3, #4]
 8002a9c:	1809      	addeq	r1, r1, r0
 8002a9e:	6021      	streq	r1, [r4, #0]
 8002aa0:	6063      	str	r3, [r4, #4]
 8002aa2:	6054      	str	r4, [r2, #4]
 8002aa4:	e7cb      	b.n	8002a3e <_free_r+0x22>
 8002aa6:	bd38      	pop	{r3, r4, r5, pc}
 8002aa8:	200006ec 	.word	0x200006ec

08002aac <sbrk_aligned>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	4e0f      	ldr	r6, [pc, #60]	@ (8002aec <sbrk_aligned+0x40>)
 8002ab0:	460c      	mov	r4, r1
 8002ab2:	6831      	ldr	r1, [r6, #0]
 8002ab4:	4605      	mov	r5, r0
 8002ab6:	b911      	cbnz	r1, 8002abe <sbrk_aligned+0x12>
 8002ab8:	f000 fbaa 	bl	8003210 <_sbrk_r>
 8002abc:	6030      	str	r0, [r6, #0]
 8002abe:	4621      	mov	r1, r4
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	f000 fba5 	bl	8003210 <_sbrk_r>
 8002ac6:	1c43      	adds	r3, r0, #1
 8002ac8:	d103      	bne.n	8002ad2 <sbrk_aligned+0x26>
 8002aca:	f04f 34ff 	mov.w	r4, #4294967295
 8002ace:	4620      	mov	r0, r4
 8002ad0:	bd70      	pop	{r4, r5, r6, pc}
 8002ad2:	1cc4      	adds	r4, r0, #3
 8002ad4:	f024 0403 	bic.w	r4, r4, #3
 8002ad8:	42a0      	cmp	r0, r4
 8002ada:	d0f8      	beq.n	8002ace <sbrk_aligned+0x22>
 8002adc:	1a21      	subs	r1, r4, r0
 8002ade:	4628      	mov	r0, r5
 8002ae0:	f000 fb96 	bl	8003210 <_sbrk_r>
 8002ae4:	3001      	adds	r0, #1
 8002ae6:	d1f2      	bne.n	8002ace <sbrk_aligned+0x22>
 8002ae8:	e7ef      	b.n	8002aca <sbrk_aligned+0x1e>
 8002aea:	bf00      	nop
 8002aec:	200006e8 	.word	0x200006e8

08002af0 <_malloc_r>:
 8002af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002af4:	1ccd      	adds	r5, r1, #3
 8002af6:	f025 0503 	bic.w	r5, r5, #3
 8002afa:	3508      	adds	r5, #8
 8002afc:	2d0c      	cmp	r5, #12
 8002afe:	bf38      	it	cc
 8002b00:	250c      	movcc	r5, #12
 8002b02:	2d00      	cmp	r5, #0
 8002b04:	4606      	mov	r6, r0
 8002b06:	db01      	blt.n	8002b0c <_malloc_r+0x1c>
 8002b08:	42a9      	cmp	r1, r5
 8002b0a:	d904      	bls.n	8002b16 <_malloc_r+0x26>
 8002b0c:	230c      	movs	r3, #12
 8002b0e:	6033      	str	r3, [r6, #0]
 8002b10:	2000      	movs	r0, #0
 8002b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002bec <_malloc_r+0xfc>
 8002b1a:	f000 f869 	bl	8002bf0 <__malloc_lock>
 8002b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8002b22:	461c      	mov	r4, r3
 8002b24:	bb44      	cbnz	r4, 8002b78 <_malloc_r+0x88>
 8002b26:	4629      	mov	r1, r5
 8002b28:	4630      	mov	r0, r6
 8002b2a:	f7ff ffbf 	bl	8002aac <sbrk_aligned>
 8002b2e:	1c43      	adds	r3, r0, #1
 8002b30:	4604      	mov	r4, r0
 8002b32:	d158      	bne.n	8002be6 <_malloc_r+0xf6>
 8002b34:	f8d8 4000 	ldr.w	r4, [r8]
 8002b38:	4627      	mov	r7, r4
 8002b3a:	2f00      	cmp	r7, #0
 8002b3c:	d143      	bne.n	8002bc6 <_malloc_r+0xd6>
 8002b3e:	2c00      	cmp	r4, #0
 8002b40:	d04b      	beq.n	8002bda <_malloc_r+0xea>
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	4639      	mov	r1, r7
 8002b46:	4630      	mov	r0, r6
 8002b48:	eb04 0903 	add.w	r9, r4, r3
 8002b4c:	f000 fb60 	bl	8003210 <_sbrk_r>
 8002b50:	4581      	cmp	r9, r0
 8002b52:	d142      	bne.n	8002bda <_malloc_r+0xea>
 8002b54:	6821      	ldr	r1, [r4, #0]
 8002b56:	4630      	mov	r0, r6
 8002b58:	1a6d      	subs	r5, r5, r1
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	f7ff ffa6 	bl	8002aac <sbrk_aligned>
 8002b60:	3001      	adds	r0, #1
 8002b62:	d03a      	beq.n	8002bda <_malloc_r+0xea>
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	442b      	add	r3, r5
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	bb62      	cbnz	r2, 8002bcc <_malloc_r+0xdc>
 8002b72:	f8c8 7000 	str.w	r7, [r8]
 8002b76:	e00f      	b.n	8002b98 <_malloc_r+0xa8>
 8002b78:	6822      	ldr	r2, [r4, #0]
 8002b7a:	1b52      	subs	r2, r2, r5
 8002b7c:	d420      	bmi.n	8002bc0 <_malloc_r+0xd0>
 8002b7e:	2a0b      	cmp	r2, #11
 8002b80:	d917      	bls.n	8002bb2 <_malloc_r+0xc2>
 8002b82:	1961      	adds	r1, r4, r5
 8002b84:	42a3      	cmp	r3, r4
 8002b86:	6025      	str	r5, [r4, #0]
 8002b88:	bf18      	it	ne
 8002b8a:	6059      	strne	r1, [r3, #4]
 8002b8c:	6863      	ldr	r3, [r4, #4]
 8002b8e:	bf08      	it	eq
 8002b90:	f8c8 1000 	streq.w	r1, [r8]
 8002b94:	5162      	str	r2, [r4, r5]
 8002b96:	604b      	str	r3, [r1, #4]
 8002b98:	4630      	mov	r0, r6
 8002b9a:	f000 f82f 	bl	8002bfc <__malloc_unlock>
 8002b9e:	f104 000b 	add.w	r0, r4, #11
 8002ba2:	1d23      	adds	r3, r4, #4
 8002ba4:	f020 0007 	bic.w	r0, r0, #7
 8002ba8:	1ac2      	subs	r2, r0, r3
 8002baa:	bf1c      	itt	ne
 8002bac:	1a1b      	subne	r3, r3, r0
 8002bae:	50a3      	strne	r3, [r4, r2]
 8002bb0:	e7af      	b.n	8002b12 <_malloc_r+0x22>
 8002bb2:	6862      	ldr	r2, [r4, #4]
 8002bb4:	42a3      	cmp	r3, r4
 8002bb6:	bf0c      	ite	eq
 8002bb8:	f8c8 2000 	streq.w	r2, [r8]
 8002bbc:	605a      	strne	r2, [r3, #4]
 8002bbe:	e7eb      	b.n	8002b98 <_malloc_r+0xa8>
 8002bc0:	4623      	mov	r3, r4
 8002bc2:	6864      	ldr	r4, [r4, #4]
 8002bc4:	e7ae      	b.n	8002b24 <_malloc_r+0x34>
 8002bc6:	463c      	mov	r4, r7
 8002bc8:	687f      	ldr	r7, [r7, #4]
 8002bca:	e7b6      	b.n	8002b3a <_malloc_r+0x4a>
 8002bcc:	461a      	mov	r2, r3
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	42a3      	cmp	r3, r4
 8002bd2:	d1fb      	bne.n	8002bcc <_malloc_r+0xdc>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	6053      	str	r3, [r2, #4]
 8002bd8:	e7de      	b.n	8002b98 <_malloc_r+0xa8>
 8002bda:	230c      	movs	r3, #12
 8002bdc:	4630      	mov	r0, r6
 8002bde:	6033      	str	r3, [r6, #0]
 8002be0:	f000 f80c 	bl	8002bfc <__malloc_unlock>
 8002be4:	e794      	b.n	8002b10 <_malloc_r+0x20>
 8002be6:	6005      	str	r5, [r0, #0]
 8002be8:	e7d6      	b.n	8002b98 <_malloc_r+0xa8>
 8002bea:	bf00      	nop
 8002bec:	200006ec 	.word	0x200006ec

08002bf0 <__malloc_lock>:
 8002bf0:	4801      	ldr	r0, [pc, #4]	@ (8002bf8 <__malloc_lock+0x8>)
 8002bf2:	f7ff bf03 	b.w	80029fc <__retarget_lock_acquire_recursive>
 8002bf6:	bf00      	nop
 8002bf8:	200006e4 	.word	0x200006e4

08002bfc <__malloc_unlock>:
 8002bfc:	4801      	ldr	r0, [pc, #4]	@ (8002c04 <__malloc_unlock+0x8>)
 8002bfe:	f7ff befe 	b.w	80029fe <__retarget_lock_release_recursive>
 8002c02:	bf00      	nop
 8002c04:	200006e4 	.word	0x200006e4

08002c08 <__ssputs_r>:
 8002c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c0c:	461f      	mov	r7, r3
 8002c0e:	688e      	ldr	r6, [r1, #8]
 8002c10:	4682      	mov	sl, r0
 8002c12:	42be      	cmp	r6, r7
 8002c14:	460c      	mov	r4, r1
 8002c16:	4690      	mov	r8, r2
 8002c18:	680b      	ldr	r3, [r1, #0]
 8002c1a:	d82d      	bhi.n	8002c78 <__ssputs_r+0x70>
 8002c1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002c20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002c24:	d026      	beq.n	8002c74 <__ssputs_r+0x6c>
 8002c26:	6965      	ldr	r5, [r4, #20]
 8002c28:	6909      	ldr	r1, [r1, #16]
 8002c2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c2e:	eba3 0901 	sub.w	r9, r3, r1
 8002c32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c36:	1c7b      	adds	r3, r7, #1
 8002c38:	444b      	add	r3, r9
 8002c3a:	106d      	asrs	r5, r5, #1
 8002c3c:	429d      	cmp	r5, r3
 8002c3e:	bf38      	it	cc
 8002c40:	461d      	movcc	r5, r3
 8002c42:	0553      	lsls	r3, r2, #21
 8002c44:	d527      	bpl.n	8002c96 <__ssputs_r+0x8e>
 8002c46:	4629      	mov	r1, r5
 8002c48:	f7ff ff52 	bl	8002af0 <_malloc_r>
 8002c4c:	4606      	mov	r6, r0
 8002c4e:	b360      	cbz	r0, 8002caa <__ssputs_r+0xa2>
 8002c50:	464a      	mov	r2, r9
 8002c52:	6921      	ldr	r1, [r4, #16]
 8002c54:	f7ff fed4 	bl	8002a00 <memcpy>
 8002c58:	89a3      	ldrh	r3, [r4, #12]
 8002c5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c62:	81a3      	strh	r3, [r4, #12]
 8002c64:	6126      	str	r6, [r4, #16]
 8002c66:	444e      	add	r6, r9
 8002c68:	6026      	str	r6, [r4, #0]
 8002c6a:	463e      	mov	r6, r7
 8002c6c:	6165      	str	r5, [r4, #20]
 8002c6e:	eba5 0509 	sub.w	r5, r5, r9
 8002c72:	60a5      	str	r5, [r4, #8]
 8002c74:	42be      	cmp	r6, r7
 8002c76:	d900      	bls.n	8002c7a <__ssputs_r+0x72>
 8002c78:	463e      	mov	r6, r7
 8002c7a:	4632      	mov	r2, r6
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	6820      	ldr	r0, [r4, #0]
 8002c80:	f000 faac 	bl	80031dc <memmove>
 8002c84:	2000      	movs	r0, #0
 8002c86:	68a3      	ldr	r3, [r4, #8]
 8002c88:	1b9b      	subs	r3, r3, r6
 8002c8a:	60a3      	str	r3, [r4, #8]
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	4433      	add	r3, r6
 8002c90:	6023      	str	r3, [r4, #0]
 8002c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c96:	462a      	mov	r2, r5
 8002c98:	f000 fad8 	bl	800324c <_realloc_r>
 8002c9c:	4606      	mov	r6, r0
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d1e0      	bne.n	8002c64 <__ssputs_r+0x5c>
 8002ca2:	4650      	mov	r0, sl
 8002ca4:	6921      	ldr	r1, [r4, #16]
 8002ca6:	f7ff feb9 	bl	8002a1c <_free_r>
 8002caa:	230c      	movs	r3, #12
 8002cac:	f8ca 3000 	str.w	r3, [sl]
 8002cb0:	89a3      	ldrh	r3, [r4, #12]
 8002cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cba:	81a3      	strh	r3, [r4, #12]
 8002cbc:	e7e9      	b.n	8002c92 <__ssputs_r+0x8a>
	...

08002cc0 <_svfiprintf_r>:
 8002cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc4:	4698      	mov	r8, r3
 8002cc6:	898b      	ldrh	r3, [r1, #12]
 8002cc8:	4607      	mov	r7, r0
 8002cca:	061b      	lsls	r3, r3, #24
 8002ccc:	460d      	mov	r5, r1
 8002cce:	4614      	mov	r4, r2
 8002cd0:	b09d      	sub	sp, #116	@ 0x74
 8002cd2:	d510      	bpl.n	8002cf6 <_svfiprintf_r+0x36>
 8002cd4:	690b      	ldr	r3, [r1, #16]
 8002cd6:	b973      	cbnz	r3, 8002cf6 <_svfiprintf_r+0x36>
 8002cd8:	2140      	movs	r1, #64	@ 0x40
 8002cda:	f7ff ff09 	bl	8002af0 <_malloc_r>
 8002cde:	6028      	str	r0, [r5, #0]
 8002ce0:	6128      	str	r0, [r5, #16]
 8002ce2:	b930      	cbnz	r0, 8002cf2 <_svfiprintf_r+0x32>
 8002ce4:	230c      	movs	r3, #12
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cec:	b01d      	add	sp, #116	@ 0x74
 8002cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cf2:	2340      	movs	r3, #64	@ 0x40
 8002cf4:	616b      	str	r3, [r5, #20]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d00:	2330      	movs	r3, #48	@ 0x30
 8002d02:	f04f 0901 	mov.w	r9, #1
 8002d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d0a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002ea4 <_svfiprintf_r+0x1e4>
 8002d0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d12:	4623      	mov	r3, r4
 8002d14:	469a      	mov	sl, r3
 8002d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d1a:	b10a      	cbz	r2, 8002d20 <_svfiprintf_r+0x60>
 8002d1c:	2a25      	cmp	r2, #37	@ 0x25
 8002d1e:	d1f9      	bne.n	8002d14 <_svfiprintf_r+0x54>
 8002d20:	ebba 0b04 	subs.w	fp, sl, r4
 8002d24:	d00b      	beq.n	8002d3e <_svfiprintf_r+0x7e>
 8002d26:	465b      	mov	r3, fp
 8002d28:	4622      	mov	r2, r4
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	4638      	mov	r0, r7
 8002d2e:	f7ff ff6b 	bl	8002c08 <__ssputs_r>
 8002d32:	3001      	adds	r0, #1
 8002d34:	f000 80a7 	beq.w	8002e86 <_svfiprintf_r+0x1c6>
 8002d38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d3a:	445a      	add	r2, fp
 8002d3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 809f 	beq.w	8002e86 <_svfiprintf_r+0x1c6>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d52:	f10a 0a01 	add.w	sl, sl, #1
 8002d56:	9304      	str	r3, [sp, #16]
 8002d58:	9307      	str	r3, [sp, #28]
 8002d5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d60:	4654      	mov	r4, sl
 8002d62:	2205      	movs	r2, #5
 8002d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d68:	484e      	ldr	r0, [pc, #312]	@ (8002ea4 <_svfiprintf_r+0x1e4>)
 8002d6a:	f000 fa61 	bl	8003230 <memchr>
 8002d6e:	9a04      	ldr	r2, [sp, #16]
 8002d70:	b9d8      	cbnz	r0, 8002daa <_svfiprintf_r+0xea>
 8002d72:	06d0      	lsls	r0, r2, #27
 8002d74:	bf44      	itt	mi
 8002d76:	2320      	movmi	r3, #32
 8002d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d7c:	0711      	lsls	r1, r2, #28
 8002d7e:	bf44      	itt	mi
 8002d80:	232b      	movmi	r3, #43	@ 0x2b
 8002d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d86:	f89a 3000 	ldrb.w	r3, [sl]
 8002d8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d8c:	d015      	beq.n	8002dba <_svfiprintf_r+0xfa>
 8002d8e:	4654      	mov	r4, sl
 8002d90:	2000      	movs	r0, #0
 8002d92:	f04f 0c0a 	mov.w	ip, #10
 8002d96:	9a07      	ldr	r2, [sp, #28]
 8002d98:	4621      	mov	r1, r4
 8002d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d9e:	3b30      	subs	r3, #48	@ 0x30
 8002da0:	2b09      	cmp	r3, #9
 8002da2:	d94b      	bls.n	8002e3c <_svfiprintf_r+0x17c>
 8002da4:	b1b0      	cbz	r0, 8002dd4 <_svfiprintf_r+0x114>
 8002da6:	9207      	str	r2, [sp, #28]
 8002da8:	e014      	b.n	8002dd4 <_svfiprintf_r+0x114>
 8002daa:	eba0 0308 	sub.w	r3, r0, r8
 8002dae:	fa09 f303 	lsl.w	r3, r9, r3
 8002db2:	4313      	orrs	r3, r2
 8002db4:	46a2      	mov	sl, r4
 8002db6:	9304      	str	r3, [sp, #16]
 8002db8:	e7d2      	b.n	8002d60 <_svfiprintf_r+0xa0>
 8002dba:	9b03      	ldr	r3, [sp, #12]
 8002dbc:	1d19      	adds	r1, r3, #4
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	9103      	str	r1, [sp, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bfbb      	ittet	lt
 8002dc6:	425b      	neglt	r3, r3
 8002dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8002dcc:	9307      	strge	r3, [sp, #28]
 8002dce:	9307      	strlt	r3, [sp, #28]
 8002dd0:	bfb8      	it	lt
 8002dd2:	9204      	strlt	r2, [sp, #16]
 8002dd4:	7823      	ldrb	r3, [r4, #0]
 8002dd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002dd8:	d10a      	bne.n	8002df0 <_svfiprintf_r+0x130>
 8002dda:	7863      	ldrb	r3, [r4, #1]
 8002ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dde:	d132      	bne.n	8002e46 <_svfiprintf_r+0x186>
 8002de0:	9b03      	ldr	r3, [sp, #12]
 8002de2:	3402      	adds	r4, #2
 8002de4:	1d1a      	adds	r2, r3, #4
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	9203      	str	r2, [sp, #12]
 8002dea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002dee:	9305      	str	r3, [sp, #20]
 8002df0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002ea8 <_svfiprintf_r+0x1e8>
 8002df4:	2203      	movs	r2, #3
 8002df6:	4650      	mov	r0, sl
 8002df8:	7821      	ldrb	r1, [r4, #0]
 8002dfa:	f000 fa19 	bl	8003230 <memchr>
 8002dfe:	b138      	cbz	r0, 8002e10 <_svfiprintf_r+0x150>
 8002e00:	2240      	movs	r2, #64	@ 0x40
 8002e02:	9b04      	ldr	r3, [sp, #16]
 8002e04:	eba0 000a 	sub.w	r0, r0, sl
 8002e08:	4082      	lsls	r2, r0
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	3401      	adds	r4, #1
 8002e0e:	9304      	str	r3, [sp, #16]
 8002e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e14:	2206      	movs	r2, #6
 8002e16:	4825      	ldr	r0, [pc, #148]	@ (8002eac <_svfiprintf_r+0x1ec>)
 8002e18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e1c:	f000 fa08 	bl	8003230 <memchr>
 8002e20:	2800      	cmp	r0, #0
 8002e22:	d036      	beq.n	8002e92 <_svfiprintf_r+0x1d2>
 8002e24:	4b22      	ldr	r3, [pc, #136]	@ (8002eb0 <_svfiprintf_r+0x1f0>)
 8002e26:	bb1b      	cbnz	r3, 8002e70 <_svfiprintf_r+0x1b0>
 8002e28:	9b03      	ldr	r3, [sp, #12]
 8002e2a:	3307      	adds	r3, #7
 8002e2c:	f023 0307 	bic.w	r3, r3, #7
 8002e30:	3308      	adds	r3, #8
 8002e32:	9303      	str	r3, [sp, #12]
 8002e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e36:	4433      	add	r3, r6
 8002e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e3a:	e76a      	b.n	8002d12 <_svfiprintf_r+0x52>
 8002e3c:	460c      	mov	r4, r1
 8002e3e:	2001      	movs	r0, #1
 8002e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e44:	e7a8      	b.n	8002d98 <_svfiprintf_r+0xd8>
 8002e46:	2300      	movs	r3, #0
 8002e48:	f04f 0c0a 	mov.w	ip, #10
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	3401      	adds	r4, #1
 8002e50:	9305      	str	r3, [sp, #20]
 8002e52:	4620      	mov	r0, r4
 8002e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e58:	3a30      	subs	r2, #48	@ 0x30
 8002e5a:	2a09      	cmp	r2, #9
 8002e5c:	d903      	bls.n	8002e66 <_svfiprintf_r+0x1a6>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0c6      	beq.n	8002df0 <_svfiprintf_r+0x130>
 8002e62:	9105      	str	r1, [sp, #20]
 8002e64:	e7c4      	b.n	8002df0 <_svfiprintf_r+0x130>
 8002e66:	4604      	mov	r4, r0
 8002e68:	2301      	movs	r3, #1
 8002e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e6e:	e7f0      	b.n	8002e52 <_svfiprintf_r+0x192>
 8002e70:	ab03      	add	r3, sp, #12
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	462a      	mov	r2, r5
 8002e76:	4638      	mov	r0, r7
 8002e78:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb4 <_svfiprintf_r+0x1f4>)
 8002e7a:	a904      	add	r1, sp, #16
 8002e7c:	f3af 8000 	nop.w
 8002e80:	1c42      	adds	r2, r0, #1
 8002e82:	4606      	mov	r6, r0
 8002e84:	d1d6      	bne.n	8002e34 <_svfiprintf_r+0x174>
 8002e86:	89ab      	ldrh	r3, [r5, #12]
 8002e88:	065b      	lsls	r3, r3, #25
 8002e8a:	f53f af2d 	bmi.w	8002ce8 <_svfiprintf_r+0x28>
 8002e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e90:	e72c      	b.n	8002cec <_svfiprintf_r+0x2c>
 8002e92:	ab03      	add	r3, sp, #12
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	462a      	mov	r2, r5
 8002e98:	4638      	mov	r0, r7
 8002e9a:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <_svfiprintf_r+0x1f4>)
 8002e9c:	a904      	add	r1, sp, #16
 8002e9e:	f000 f87d 	bl	8002f9c <_printf_i>
 8002ea2:	e7ed      	b.n	8002e80 <_svfiprintf_r+0x1c0>
 8002ea4:	080039a2 	.word	0x080039a2
 8002ea8:	080039a8 	.word	0x080039a8
 8002eac:	080039ac 	.word	0x080039ac
 8002eb0:	00000000 	.word	0x00000000
 8002eb4:	08002c09 	.word	0x08002c09

08002eb8 <_printf_common>:
 8002eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ebc:	4616      	mov	r6, r2
 8002ebe:	4698      	mov	r8, r3
 8002ec0:	688a      	ldr	r2, [r1, #8]
 8002ec2:	690b      	ldr	r3, [r1, #16]
 8002ec4:	4607      	mov	r7, r0
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	bfb8      	it	lt
 8002eca:	4613      	movlt	r3, r2
 8002ecc:	6033      	str	r3, [r6, #0]
 8002ece:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ed8:	b10a      	cbz	r2, 8002ede <_printf_common+0x26>
 8002eda:	3301      	adds	r3, #1
 8002edc:	6033      	str	r3, [r6, #0]
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	0699      	lsls	r1, r3, #26
 8002ee2:	bf42      	ittt	mi
 8002ee4:	6833      	ldrmi	r3, [r6, #0]
 8002ee6:	3302      	addmi	r3, #2
 8002ee8:	6033      	strmi	r3, [r6, #0]
 8002eea:	6825      	ldr	r5, [r4, #0]
 8002eec:	f015 0506 	ands.w	r5, r5, #6
 8002ef0:	d106      	bne.n	8002f00 <_printf_common+0x48>
 8002ef2:	f104 0a19 	add.w	sl, r4, #25
 8002ef6:	68e3      	ldr	r3, [r4, #12]
 8002ef8:	6832      	ldr	r2, [r6, #0]
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	42ab      	cmp	r3, r5
 8002efe:	dc2b      	bgt.n	8002f58 <_printf_common+0xa0>
 8002f00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f04:	6822      	ldr	r2, [r4, #0]
 8002f06:	3b00      	subs	r3, #0
 8002f08:	bf18      	it	ne
 8002f0a:	2301      	movne	r3, #1
 8002f0c:	0692      	lsls	r2, r2, #26
 8002f0e:	d430      	bmi.n	8002f72 <_printf_common+0xba>
 8002f10:	4641      	mov	r1, r8
 8002f12:	4638      	mov	r0, r7
 8002f14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f18:	47c8      	blx	r9
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	d023      	beq.n	8002f66 <_printf_common+0xae>
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	6922      	ldr	r2, [r4, #16]
 8002f22:	f003 0306 	and.w	r3, r3, #6
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	bf14      	ite	ne
 8002f2a:	2500      	movne	r5, #0
 8002f2c:	6833      	ldreq	r3, [r6, #0]
 8002f2e:	f04f 0600 	mov.w	r6, #0
 8002f32:	bf08      	it	eq
 8002f34:	68e5      	ldreq	r5, [r4, #12]
 8002f36:	f104 041a 	add.w	r4, r4, #26
 8002f3a:	bf08      	it	eq
 8002f3c:	1aed      	subeq	r5, r5, r3
 8002f3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002f42:	bf08      	it	eq
 8002f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	bfc4      	itt	gt
 8002f4c:	1a9b      	subgt	r3, r3, r2
 8002f4e:	18ed      	addgt	r5, r5, r3
 8002f50:	42b5      	cmp	r5, r6
 8002f52:	d11a      	bne.n	8002f8a <_printf_common+0xd2>
 8002f54:	2000      	movs	r0, #0
 8002f56:	e008      	b.n	8002f6a <_printf_common+0xb2>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	4652      	mov	r2, sl
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	4638      	mov	r0, r7
 8002f60:	47c8      	blx	r9
 8002f62:	3001      	adds	r0, #1
 8002f64:	d103      	bne.n	8002f6e <_printf_common+0xb6>
 8002f66:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f6e:	3501      	adds	r5, #1
 8002f70:	e7c1      	b.n	8002ef6 <_printf_common+0x3e>
 8002f72:	2030      	movs	r0, #48	@ 0x30
 8002f74:	18e1      	adds	r1, r4, r3
 8002f76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f80:	4422      	add	r2, r4
 8002f82:	3302      	adds	r3, #2
 8002f84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f88:	e7c2      	b.n	8002f10 <_printf_common+0x58>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	4622      	mov	r2, r4
 8002f8e:	4641      	mov	r1, r8
 8002f90:	4638      	mov	r0, r7
 8002f92:	47c8      	blx	r9
 8002f94:	3001      	adds	r0, #1
 8002f96:	d0e6      	beq.n	8002f66 <_printf_common+0xae>
 8002f98:	3601      	adds	r6, #1
 8002f9a:	e7d9      	b.n	8002f50 <_printf_common+0x98>

08002f9c <_printf_i>:
 8002f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa0:	7e0f      	ldrb	r7, [r1, #24]
 8002fa2:	4691      	mov	r9, r2
 8002fa4:	2f78      	cmp	r7, #120	@ 0x78
 8002fa6:	4680      	mov	r8, r0
 8002fa8:	460c      	mov	r4, r1
 8002faa:	469a      	mov	sl, r3
 8002fac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002fae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002fb2:	d807      	bhi.n	8002fc4 <_printf_i+0x28>
 8002fb4:	2f62      	cmp	r7, #98	@ 0x62
 8002fb6:	d80a      	bhi.n	8002fce <_printf_i+0x32>
 8002fb8:	2f00      	cmp	r7, #0
 8002fba:	f000 80d3 	beq.w	8003164 <_printf_i+0x1c8>
 8002fbe:	2f58      	cmp	r7, #88	@ 0x58
 8002fc0:	f000 80ba 	beq.w	8003138 <_printf_i+0x19c>
 8002fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002fcc:	e03a      	b.n	8003044 <_printf_i+0xa8>
 8002fce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002fd2:	2b15      	cmp	r3, #21
 8002fd4:	d8f6      	bhi.n	8002fc4 <_printf_i+0x28>
 8002fd6:	a101      	add	r1, pc, #4	@ (adr r1, 8002fdc <_printf_i+0x40>)
 8002fd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fdc:	08003035 	.word	0x08003035
 8002fe0:	08003049 	.word	0x08003049
 8002fe4:	08002fc5 	.word	0x08002fc5
 8002fe8:	08002fc5 	.word	0x08002fc5
 8002fec:	08002fc5 	.word	0x08002fc5
 8002ff0:	08002fc5 	.word	0x08002fc5
 8002ff4:	08003049 	.word	0x08003049
 8002ff8:	08002fc5 	.word	0x08002fc5
 8002ffc:	08002fc5 	.word	0x08002fc5
 8003000:	08002fc5 	.word	0x08002fc5
 8003004:	08002fc5 	.word	0x08002fc5
 8003008:	0800314b 	.word	0x0800314b
 800300c:	08003073 	.word	0x08003073
 8003010:	08003105 	.word	0x08003105
 8003014:	08002fc5 	.word	0x08002fc5
 8003018:	08002fc5 	.word	0x08002fc5
 800301c:	0800316d 	.word	0x0800316d
 8003020:	08002fc5 	.word	0x08002fc5
 8003024:	08003073 	.word	0x08003073
 8003028:	08002fc5 	.word	0x08002fc5
 800302c:	08002fc5 	.word	0x08002fc5
 8003030:	0800310d 	.word	0x0800310d
 8003034:	6833      	ldr	r3, [r6, #0]
 8003036:	1d1a      	adds	r2, r3, #4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6032      	str	r2, [r6, #0]
 800303c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003040:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003044:	2301      	movs	r3, #1
 8003046:	e09e      	b.n	8003186 <_printf_i+0x1ea>
 8003048:	6833      	ldr	r3, [r6, #0]
 800304a:	6820      	ldr	r0, [r4, #0]
 800304c:	1d19      	adds	r1, r3, #4
 800304e:	6031      	str	r1, [r6, #0]
 8003050:	0606      	lsls	r6, r0, #24
 8003052:	d501      	bpl.n	8003058 <_printf_i+0xbc>
 8003054:	681d      	ldr	r5, [r3, #0]
 8003056:	e003      	b.n	8003060 <_printf_i+0xc4>
 8003058:	0645      	lsls	r5, r0, #25
 800305a:	d5fb      	bpl.n	8003054 <_printf_i+0xb8>
 800305c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003060:	2d00      	cmp	r5, #0
 8003062:	da03      	bge.n	800306c <_printf_i+0xd0>
 8003064:	232d      	movs	r3, #45	@ 0x2d
 8003066:	426d      	negs	r5, r5
 8003068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800306c:	230a      	movs	r3, #10
 800306e:	4859      	ldr	r0, [pc, #356]	@ (80031d4 <_printf_i+0x238>)
 8003070:	e011      	b.n	8003096 <_printf_i+0xfa>
 8003072:	6821      	ldr	r1, [r4, #0]
 8003074:	6833      	ldr	r3, [r6, #0]
 8003076:	0608      	lsls	r0, r1, #24
 8003078:	f853 5b04 	ldr.w	r5, [r3], #4
 800307c:	d402      	bmi.n	8003084 <_printf_i+0xe8>
 800307e:	0649      	lsls	r1, r1, #25
 8003080:	bf48      	it	mi
 8003082:	b2ad      	uxthmi	r5, r5
 8003084:	2f6f      	cmp	r7, #111	@ 0x6f
 8003086:	6033      	str	r3, [r6, #0]
 8003088:	bf14      	ite	ne
 800308a:	230a      	movne	r3, #10
 800308c:	2308      	moveq	r3, #8
 800308e:	4851      	ldr	r0, [pc, #324]	@ (80031d4 <_printf_i+0x238>)
 8003090:	2100      	movs	r1, #0
 8003092:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003096:	6866      	ldr	r6, [r4, #4]
 8003098:	2e00      	cmp	r6, #0
 800309a:	bfa8      	it	ge
 800309c:	6821      	ldrge	r1, [r4, #0]
 800309e:	60a6      	str	r6, [r4, #8]
 80030a0:	bfa4      	itt	ge
 80030a2:	f021 0104 	bicge.w	r1, r1, #4
 80030a6:	6021      	strge	r1, [r4, #0]
 80030a8:	b90d      	cbnz	r5, 80030ae <_printf_i+0x112>
 80030aa:	2e00      	cmp	r6, #0
 80030ac:	d04b      	beq.n	8003146 <_printf_i+0x1aa>
 80030ae:	4616      	mov	r6, r2
 80030b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80030b4:	fb03 5711 	mls	r7, r3, r1, r5
 80030b8:	5dc7      	ldrb	r7, [r0, r7]
 80030ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030be:	462f      	mov	r7, r5
 80030c0:	42bb      	cmp	r3, r7
 80030c2:	460d      	mov	r5, r1
 80030c4:	d9f4      	bls.n	80030b0 <_printf_i+0x114>
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d10b      	bne.n	80030e2 <_printf_i+0x146>
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	07df      	lsls	r7, r3, #31
 80030ce:	d508      	bpl.n	80030e2 <_printf_i+0x146>
 80030d0:	6923      	ldr	r3, [r4, #16]
 80030d2:	6861      	ldr	r1, [r4, #4]
 80030d4:	4299      	cmp	r1, r3
 80030d6:	bfde      	ittt	le
 80030d8:	2330      	movle	r3, #48	@ 0x30
 80030da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030e2:	1b92      	subs	r2, r2, r6
 80030e4:	6122      	str	r2, [r4, #16]
 80030e6:	464b      	mov	r3, r9
 80030e8:	4621      	mov	r1, r4
 80030ea:	4640      	mov	r0, r8
 80030ec:	f8cd a000 	str.w	sl, [sp]
 80030f0:	aa03      	add	r2, sp, #12
 80030f2:	f7ff fee1 	bl	8002eb8 <_printf_common>
 80030f6:	3001      	adds	r0, #1
 80030f8:	d14a      	bne.n	8003190 <_printf_i+0x1f4>
 80030fa:	f04f 30ff 	mov.w	r0, #4294967295
 80030fe:	b004      	add	sp, #16
 8003100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	f043 0320 	orr.w	r3, r3, #32
 800310a:	6023      	str	r3, [r4, #0]
 800310c:	2778      	movs	r7, #120	@ 0x78
 800310e:	4832      	ldr	r0, [pc, #200]	@ (80031d8 <_printf_i+0x23c>)
 8003110:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	6831      	ldr	r1, [r6, #0]
 8003118:	061f      	lsls	r7, r3, #24
 800311a:	f851 5b04 	ldr.w	r5, [r1], #4
 800311e:	d402      	bmi.n	8003126 <_printf_i+0x18a>
 8003120:	065f      	lsls	r7, r3, #25
 8003122:	bf48      	it	mi
 8003124:	b2ad      	uxthmi	r5, r5
 8003126:	6031      	str	r1, [r6, #0]
 8003128:	07d9      	lsls	r1, r3, #31
 800312a:	bf44      	itt	mi
 800312c:	f043 0320 	orrmi.w	r3, r3, #32
 8003130:	6023      	strmi	r3, [r4, #0]
 8003132:	b11d      	cbz	r5, 800313c <_printf_i+0x1a0>
 8003134:	2310      	movs	r3, #16
 8003136:	e7ab      	b.n	8003090 <_printf_i+0xf4>
 8003138:	4826      	ldr	r0, [pc, #152]	@ (80031d4 <_printf_i+0x238>)
 800313a:	e7e9      	b.n	8003110 <_printf_i+0x174>
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	f023 0320 	bic.w	r3, r3, #32
 8003142:	6023      	str	r3, [r4, #0]
 8003144:	e7f6      	b.n	8003134 <_printf_i+0x198>
 8003146:	4616      	mov	r6, r2
 8003148:	e7bd      	b.n	80030c6 <_printf_i+0x12a>
 800314a:	6833      	ldr	r3, [r6, #0]
 800314c:	6825      	ldr	r5, [r4, #0]
 800314e:	1d18      	adds	r0, r3, #4
 8003150:	6961      	ldr	r1, [r4, #20]
 8003152:	6030      	str	r0, [r6, #0]
 8003154:	062e      	lsls	r6, r5, #24
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	d501      	bpl.n	800315e <_printf_i+0x1c2>
 800315a:	6019      	str	r1, [r3, #0]
 800315c:	e002      	b.n	8003164 <_printf_i+0x1c8>
 800315e:	0668      	lsls	r0, r5, #25
 8003160:	d5fb      	bpl.n	800315a <_printf_i+0x1be>
 8003162:	8019      	strh	r1, [r3, #0]
 8003164:	2300      	movs	r3, #0
 8003166:	4616      	mov	r6, r2
 8003168:	6123      	str	r3, [r4, #16]
 800316a:	e7bc      	b.n	80030e6 <_printf_i+0x14a>
 800316c:	6833      	ldr	r3, [r6, #0]
 800316e:	2100      	movs	r1, #0
 8003170:	1d1a      	adds	r2, r3, #4
 8003172:	6032      	str	r2, [r6, #0]
 8003174:	681e      	ldr	r6, [r3, #0]
 8003176:	6862      	ldr	r2, [r4, #4]
 8003178:	4630      	mov	r0, r6
 800317a:	f000 f859 	bl	8003230 <memchr>
 800317e:	b108      	cbz	r0, 8003184 <_printf_i+0x1e8>
 8003180:	1b80      	subs	r0, r0, r6
 8003182:	6060      	str	r0, [r4, #4]
 8003184:	6863      	ldr	r3, [r4, #4]
 8003186:	6123      	str	r3, [r4, #16]
 8003188:	2300      	movs	r3, #0
 800318a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800318e:	e7aa      	b.n	80030e6 <_printf_i+0x14a>
 8003190:	4632      	mov	r2, r6
 8003192:	4649      	mov	r1, r9
 8003194:	4640      	mov	r0, r8
 8003196:	6923      	ldr	r3, [r4, #16]
 8003198:	47d0      	blx	sl
 800319a:	3001      	adds	r0, #1
 800319c:	d0ad      	beq.n	80030fa <_printf_i+0x15e>
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	079b      	lsls	r3, r3, #30
 80031a2:	d413      	bmi.n	80031cc <_printf_i+0x230>
 80031a4:	68e0      	ldr	r0, [r4, #12]
 80031a6:	9b03      	ldr	r3, [sp, #12]
 80031a8:	4298      	cmp	r0, r3
 80031aa:	bfb8      	it	lt
 80031ac:	4618      	movlt	r0, r3
 80031ae:	e7a6      	b.n	80030fe <_printf_i+0x162>
 80031b0:	2301      	movs	r3, #1
 80031b2:	4632      	mov	r2, r6
 80031b4:	4649      	mov	r1, r9
 80031b6:	4640      	mov	r0, r8
 80031b8:	47d0      	blx	sl
 80031ba:	3001      	adds	r0, #1
 80031bc:	d09d      	beq.n	80030fa <_printf_i+0x15e>
 80031be:	3501      	adds	r5, #1
 80031c0:	68e3      	ldr	r3, [r4, #12]
 80031c2:	9903      	ldr	r1, [sp, #12]
 80031c4:	1a5b      	subs	r3, r3, r1
 80031c6:	42ab      	cmp	r3, r5
 80031c8:	dcf2      	bgt.n	80031b0 <_printf_i+0x214>
 80031ca:	e7eb      	b.n	80031a4 <_printf_i+0x208>
 80031cc:	2500      	movs	r5, #0
 80031ce:	f104 0619 	add.w	r6, r4, #25
 80031d2:	e7f5      	b.n	80031c0 <_printf_i+0x224>
 80031d4:	080039b3 	.word	0x080039b3
 80031d8:	080039c4 	.word	0x080039c4

080031dc <memmove>:
 80031dc:	4288      	cmp	r0, r1
 80031de:	b510      	push	{r4, lr}
 80031e0:	eb01 0402 	add.w	r4, r1, r2
 80031e4:	d902      	bls.n	80031ec <memmove+0x10>
 80031e6:	4284      	cmp	r4, r0
 80031e8:	4623      	mov	r3, r4
 80031ea:	d807      	bhi.n	80031fc <memmove+0x20>
 80031ec:	1e43      	subs	r3, r0, #1
 80031ee:	42a1      	cmp	r1, r4
 80031f0:	d008      	beq.n	8003204 <memmove+0x28>
 80031f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031fa:	e7f8      	b.n	80031ee <memmove+0x12>
 80031fc:	4601      	mov	r1, r0
 80031fe:	4402      	add	r2, r0
 8003200:	428a      	cmp	r2, r1
 8003202:	d100      	bne.n	8003206 <memmove+0x2a>
 8003204:	bd10      	pop	{r4, pc}
 8003206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800320a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800320e:	e7f7      	b.n	8003200 <memmove+0x24>

08003210 <_sbrk_r>:
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	2300      	movs	r3, #0
 8003214:	4d05      	ldr	r5, [pc, #20]	@ (800322c <_sbrk_r+0x1c>)
 8003216:	4604      	mov	r4, r0
 8003218:	4608      	mov	r0, r1
 800321a:	602b      	str	r3, [r5, #0]
 800321c:	f7fd fc58 	bl	8000ad0 <_sbrk>
 8003220:	1c43      	adds	r3, r0, #1
 8003222:	d102      	bne.n	800322a <_sbrk_r+0x1a>
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	b103      	cbz	r3, 800322a <_sbrk_r+0x1a>
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	bd38      	pop	{r3, r4, r5, pc}
 800322c:	200006e0 	.word	0x200006e0

08003230 <memchr>:
 8003230:	4603      	mov	r3, r0
 8003232:	b510      	push	{r4, lr}
 8003234:	b2c9      	uxtb	r1, r1
 8003236:	4402      	add	r2, r0
 8003238:	4293      	cmp	r3, r2
 800323a:	4618      	mov	r0, r3
 800323c:	d101      	bne.n	8003242 <memchr+0x12>
 800323e:	2000      	movs	r0, #0
 8003240:	e003      	b.n	800324a <memchr+0x1a>
 8003242:	7804      	ldrb	r4, [r0, #0]
 8003244:	3301      	adds	r3, #1
 8003246:	428c      	cmp	r4, r1
 8003248:	d1f6      	bne.n	8003238 <memchr+0x8>
 800324a:	bd10      	pop	{r4, pc}

0800324c <_realloc_r>:
 800324c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003250:	4680      	mov	r8, r0
 8003252:	4615      	mov	r5, r2
 8003254:	460c      	mov	r4, r1
 8003256:	b921      	cbnz	r1, 8003262 <_realloc_r+0x16>
 8003258:	4611      	mov	r1, r2
 800325a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800325e:	f7ff bc47 	b.w	8002af0 <_malloc_r>
 8003262:	b92a      	cbnz	r2, 8003270 <_realloc_r+0x24>
 8003264:	f7ff fbda 	bl	8002a1c <_free_r>
 8003268:	2400      	movs	r4, #0
 800326a:	4620      	mov	r0, r4
 800326c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003270:	f000 f81a 	bl	80032a8 <_malloc_usable_size_r>
 8003274:	4285      	cmp	r5, r0
 8003276:	4606      	mov	r6, r0
 8003278:	d802      	bhi.n	8003280 <_realloc_r+0x34>
 800327a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800327e:	d8f4      	bhi.n	800326a <_realloc_r+0x1e>
 8003280:	4629      	mov	r1, r5
 8003282:	4640      	mov	r0, r8
 8003284:	f7ff fc34 	bl	8002af0 <_malloc_r>
 8003288:	4607      	mov	r7, r0
 800328a:	2800      	cmp	r0, #0
 800328c:	d0ec      	beq.n	8003268 <_realloc_r+0x1c>
 800328e:	42b5      	cmp	r5, r6
 8003290:	462a      	mov	r2, r5
 8003292:	4621      	mov	r1, r4
 8003294:	bf28      	it	cs
 8003296:	4632      	movcs	r2, r6
 8003298:	f7ff fbb2 	bl	8002a00 <memcpy>
 800329c:	4621      	mov	r1, r4
 800329e:	4640      	mov	r0, r8
 80032a0:	f7ff fbbc 	bl	8002a1c <_free_r>
 80032a4:	463c      	mov	r4, r7
 80032a6:	e7e0      	b.n	800326a <_realloc_r+0x1e>

080032a8 <_malloc_usable_size_r>:
 80032a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032ac:	1f18      	subs	r0, r3, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	bfbc      	itt	lt
 80032b2:	580b      	ldrlt	r3, [r1, r0]
 80032b4:	18c0      	addlt	r0, r0, r3
 80032b6:	4770      	bx	lr

080032b8 <_init>:
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	bf00      	nop
 80032bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032be:	bc08      	pop	{r3}
 80032c0:	469e      	mov	lr, r3
 80032c2:	4770      	bx	lr

080032c4 <_fini>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	bf00      	nop
 80032c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ca:	bc08      	pop	{r3}
 80032cc:	469e      	mov	lr, r3
 80032ce:	4770      	bx	lr
